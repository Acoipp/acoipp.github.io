<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023 CSP-J/S（游记）</title>
    <url>/2024/01/07/2023-CSP-J-S%EF%BC%88%E6%B8%B8%E8%AE%B0%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Day-0"><a href="#Day-0" class="headerlink" title="Day-0"></a>Day-0</h2><p>第二次进入 CSP-J&#x2F;S 的考场。</p>
<p>我不是很好评价，有电梯不让我们坐电梯，还好楼层不高，不然的话真的要再次领略到 2022 年 cqbz 的爬楼梯的残酷了。。。</p>
<p>去试机的时候 Judgelight 打趣旁边的小朋友我们是 cqbs 的，结果一问发现是校友。</p>
<p>后面因为某人在模拟赛中写了这么一句话 <code>#include&lt;windows.h&gt;</code>，导致 CE 之后号召所有人在 NOI linux 上用这个头文件，方便对拍，而且不用会 CE。</p>
<p>结果是小朋友们没有一个信他的（</p>
<p>旁边的人都在玩 edge:&#x2F;&#x2F;surf，我试了一下 NOI linux 里面能不能用 pbds，结果是可以的，然后又去查了一下资料，大概是这样描述的：</p>
<ul>
<li>除了明确要求外，可以使用带有下划线开头的宏和库。（<a href="http://www.noi.cn/">www.noi.cn</a> 2021）</li>
</ul>
<p>下面附了一个链接，代表明确要求不能用的宏和库，点进去：</p>
<ul>
<li>任何下划线开头的宏和库禁止使用。（<a href="http://www.noi.cn/">www.noi.cn</a> 2011）</li>
</ul>
<p>我人都不好了，还好的是这个库除了卡卡常没什么用。</p>
<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day-1"></a>Day-1</h2><p>CSP-J，正常发挥，第 4 题可能稍微难了一点，但是可以写。</p>
<p>T3 的话是一道小模拟，细节也不是很多，要求了输出最大值我们全部取绝对值就不需要判断负数的情况了。</p>
<p>睡了 1 个半小时，之前以为是 4 个小时，结果后面 12:00 就收卷了，考得还不错。</p>
<h2 id="Day-1-5"><a href="#Day-1-5" class="headerlink" title="Day-1.5"></a>Day-1.5</h2><p>CSP-S，第一题很简单，暴力就可以做了。</p>
<p>第二题就有点不可做了，推了半个小时性质，因为忘记了结束时间，有点手忙脚乱，中间 Hash 还被卡了模数，最后换成更为稳定的 trie 才算告一段落。</p>
<p>还剩 2.5 小时，C 题也是一道中等的模拟，写了 1 个小时，调试没有太多时间，也是顺利结束，还剩 1.5 小时。</p>
<p>下面就是转折的开始。</p>
<p>前 3 道题做得挺顺利，想着能不能拿下 T4，然后看了一下题意，挺清晰明了。</p>
<p>D 题一上来想到二分，然后纠结了一下贪心对不对，认为我那个是对的就打了线段树优化的贪心，后面调的时候发现大样例始终过不去，怀疑是代码哪里有问题，一直调。</p>
<p>后面到了考试结束也没有调出来，但是可以得一部分分，后面一问同学发现 T4 比 T2 还简单，原因是 T4 直接按二分的结果排序就可以了，不需要减去深度。</p>
<p>当时觉得贪心不对就应该朝不同方向尝试的，真的太着急了以至于没有想到这边去。</p>
<p>以后我们的算法的正确性（特别是贪心），一定要在特别有保证之后再去写，不然会浪费很多时间！</p>
<p>半家欢喜半家愁。</p>
<p>（有一说一，这次 CCF 的大样例还挺良心的，所有情况基本上都考虑到了）</p>
<h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day-2"></a>Day-2</h2><p>比完赛后又做综合作业，抽空看了一下 Bilibili，感觉十分不爽。</p>
<p>后面在 B 站上看到一个写得不错的中篇小说，10 分钟看完之后，更不爽了，因为这个小说的情节真的很扣人心弦，以至于连比赛失利这件事都无法比拟。</p>
<p>大概就是这样吧，能够让我打炸之后如此平静的原因我猜有这几个：</p>
<ul>
<li>性格使然。</li>
<li>B 站给了我放松的空间。（本来想玩一下原神的但是忘了）</li>
<li>（秘密）</li>
</ul>
<p>行吧，虽然 CSP-S 失利了，但是我相信后面的比赛一定能够稳定发挥，越打越好。</p>
<p>$\color{white}{\text{加油！}}$</p>
]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>CSP</tag>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title>CQCPC 2023 游记</title>
    <url>/2024/01/07/CQCPC-2023-%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CQCPC，重庆大学生程序设计比赛，本次我们是持“外卡”参加，不参与最终排名和颁奖。</p>
<p>最近重庆是越来越冷了，早上从校门走出去的时候还浑身打着哆嗦。</p>
<h2 id="Day-3"><a href="#Day-3" class="headerlink" title="Day-(-3)"></a>Day-(-3)</h2><p>学校公布了这场比赛的组队情况，我，<a href="https://www.luogu.com.cn/user/636142">recollect_i</a> 还有 <a href="https://www.luogu.com.cn/user/511676">naoliaok_lovely</a> 组成一队，顺便还打了一次 CQCPC-10 的重现赛（这次是 11），感觉会有两道防 AK 题，十分有趣，我们配合也十分默契，感觉状态比较好。</p>
<p>只打了 2 个小时左右，主要是练练手感，三个人只能使用一台电脑有点分配不均匀，但是习惯就好了。后面我们找到了感觉之后就很快过掉了大部分题，只是罚时很高，这得问问 <a href="https://www.luogu.com.cn/user/511676">naoliaok_lovely</a>。</p>
<p>同时我们还添了 T-shirt 的尺码，我填的是 L，并且学校也通知说三人一组又 500 yuan 的报名费，但是不知道学校可不可以批准下来。</p>
<p>老师也教学了一下 Code block 的使用方法，但是后面比赛官方说有 Dev-C++ 于是就抛之脑后了（甚至有传言系统不是 Windows 也不是 Linux）。</p>
<p>目前 Code block 的用途是颓废。</p>
<h2 id="Day-2-1"><a href="#Day-2-1" class="headerlink" title="Day-(-2)&#x2F;(-1)"></a>Day-(-2)&#x2F;(-1)</h2><p>没什么好说的，准备第二天的 USACO。</p>
<h2 id="Day-0"><a href="#Day-0" class="headerlink" title="Day-0"></a>Day-0</h2><p>一天都在打 USACO，但是比较幸运的是我之前打到过了 Gold，然后这次 Gold 的题目也比较简单，所以 AK 之后就练其他题目了，在白金组开始之前大部分时间在颓废。</p>
<p>一天下来只过了 $2$ 道题。 </p>
<p>下午放学之后，家长送来了部分衣物和好吃的（，出去好好享受了一大碗冒菜之后，我打算晚上去机房练一下题目，但是被赶出去了，原因是学校不允许在没有老师的情况下进入机房（蚌埠</p>
<p>不得不说，校里面树太多了，导致更冷了，风吹过来的时候还会发出沙沙的响声，带着帽子才敢走出 KXG。</p>
<p>然后就被迫在 qs 做了几个小时的 whk 作业，简直是要累死人，但是还没做完。。。</p>
<p>于是爽爽地洗了个澡，在 <a href="https://www.noi.cn/xw/2013-02-04/714970.shtml">WC</a> 里面待了将近一个小时才出来（别问我在里面干了什么，问就是在 enjoy w**hing）</p>
<p>出去之后快要十点钟了，又听了几首音乐卡准到十点钟上床睡觉。</p>
<h2 id="Day-0-5"><a href="#Day-0-5" class="headerlink" title="Day-0.5"></a>Day-0.5</h2><p>无梦之夜。。。</p>
<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day-1"></a>Day-1</h2><p>早上和金牌教练（真的得了金牌）约定好了 7:45 在校门口集合，我起床比较早，然后出校门之后去罗森买了一个鸡腿和巧克力狂啃。啃完之后才暖和了许多。</p>
<p>后面 7:40 左右教练就看到了我，我们打了个车去重庆西南大学北碚校区。</p>
<p>原来这么早三峡广场就这么多人了啊，那个红绿灯一如既往的堵。</p>
<p>还有，北碚为什么是主城九区啊，这么远，还过了个“北碚隧道”。。。</p>
<p>总之最后安全抵达，但是是从 $2$ 号门近的，很是麻烦，导致走了 20 多分钟才到达 25 号教学楼。</p>
<p>路途中看到了一个背着 Adidas 书包的人，我认为是我们同学，后来证明这是对的，我们教练和我路上一直在谈某知名大学的体育活动和场地。</p>
<p>我们到达了 25 号教学楼下看到了很多老故人，包括但不限于同级的，上一级的和下一级的。</p>
<p>我们领取了自己的东西，帆布包里面装着一件 T-shirt 和名字牌，十分好看。</p>
<p>在那里大概等了 30 多分钟，中途和同学的家长说了几句，然后就无所事事，等着比赛开始。话说茶歇处的东西可以随便吃吗（</p>
<p>坐着电梯上去，电梯很挤，差点就挤到电井里面了，我们是在 $2$ 考场，然后这个考场是中学生的队伍专属的，因此远远地看到了一些熟悉的同学（<a href="https://www.luogu.com.cn/user/500205">ssxvngn</a>），虽然以前没见过，但是已经久仰大名了。</p>
<p>接下来就在希冀平台开始试机，我没有试，因为感觉跟平时差不多，交给 naoliaok_lovely 和 recollect_i 了。</p>
<p>有一说一，这些电脑真的很卡，连玩个谷歌小恐龙都会卡成 PPT，更不要说敲代码了，所以导致写代码的时候一直很难受。</p>
<p>又是漫长的等待，等到比赛正式开始，我们赶快看了一下题，我一看，哇 C 题原神，于是赶快去敲 C 题，但是 naoliaok_lovely 说他会 A 题，于是就交给他了，因为 A 题代码好写得多，但是写完之后他先是读错题意，WA 了一发，然后因为细节问题 WA 了 2 发，我帮他调试细节之后交错题目又 WA 了一发，总共 A 题这种签到题 WA 了 4 发，有点稍微扰乱节奏，但是总体影响不大，因为据 naoliaok_lovely 自己阐述，有他在的比赛罚时都会异常地高。</p>
<p>接着 recollect_i 说他会 H 题，并且不用数据结构，于是让他来敲 H 题了，他凭借着自身稳定的特点一发 AC。</p>
<p>然后我赶快凭借着记忆把 C 题敲了，但是样例很水，多加了一个 $1$ 都没发现于是 WA 了一发，把这个东西改过来之后就 AC 了，成功拿到了本场比赛我们队伍第一个，也是唯一一个首 A。</p>
<p>然后我们开了一下 D 题，D 题的数据范围居然有下界！我根据这个口胡了一个暴力做法，但是由于其贪心性质不知道对不对，这是 recollect_i 提出第四维可以二分解决，我又详细想了一下正确性，于是这道题就通过了，但是 WA 了一发因为没有删去调试语句（逃</p>
<p>接下来他们开始搞 F 题，我就看了一下 E 和 G 题，顺便也看了一下榜单，很多队伍都把 G 题过了，我简单想了一下思路就写了 G 题（他们的 F 题 WA 了，正在纸上调小样例），但是 WA 了几次，原因是 $4$ 和 $6$ 的情况没有判掉，我偷了个懒，把所有质因数拿出来 dp 就过了。</p>
<p>他们这个时候还在调 F 题，我觉得不能一直耽误在一道题上，恰好我也看了 E 题，E 题需要分解质因数，于是叫 naoliaok_lovely 打了一个 Pollard-Rho，只打了一半我们就发现只需要知道质因数的次数就可以了，于是预处理了 $1 \sim 10^6$ 的质数，暴力除，最后再判断剩下来的数是不是平方数就可以了。最后一步就是根据这点暴搜即可，时间还不是很快，但是能过，一遍 AC。</p>
<p>后来他们找到了 F 题的问题所在：排序的时候需要一定的随机化才能通过，于是写了一个随机 $7$ 次的程序就过了。</p>
<p>这里不得不佩服 recollect_i 的英语，E 和 H 题都是英文，翻译出来完全准确，没有一点偏差。</p>
<p>还剩大概 $2$ 个小时，I 题计算几何，完全不可做，但是 B 题我们猜了一个结论，后面打出来之后发现死活 WA，就很离谱，至少结论在 $1 \sim 10^7$ 内是有效的，知道比赛最后还没调出来。</p>
<p>最后比赛结束了，封榜（比赛结束前 $1$ 小时）的时候我们是第 $2$，第 $1$ 也是中学生，也是我们学校的。</p>
<p>中途比赛官方还发了牛奶、面包、牛肉，我感觉只有那一包牛肉好吃一点，哦，对了，咖啡也很不错，只是天友的牛奶吃得我翻江倒海的。</p>
<p>比赛结束后学校的一位老师，我们同学的一个家长带着我们参观了西南大学的计算机室、机器人室、监控（农业）室和图书馆。</p>
<p>图书馆真的很大，比重庆图书馆还要大很多倍，这里有很多同学在学习、聊天、<del>玩原神</del>。机器人也很好玩，我有幸去玩了一把，简直比吃了德芙巧克力还要丝滑，最令人注目的是机器人室的同学们（西南大学）<del>居然</del>果然也有玩 Genshin-Impact 的！</p>
<p>那些同学们给我们介绍了一些机器人大赛的内容，十分有趣，比 OI 好到哪里去了。</p>
<p>最后我们和老师同学们道了别，和 recollect_i 乘坐老师的车回去。</p>
<p>车上睡了一觉，补充了一下体力，准备晚自习的 USACO。</p>
<p>晚自习十分平常，但是我请了个假去机房打 USACO-P，被打爆了，4 个小时的成果就是 A 题过了一半的测试点。</p>
<p>比赛过程中 AC 了一道题就给我们发了一个气球，我把这些气球带到了乡村基去吃了一份牛排，看起来就像卖气球的一样（据老师说去年还有人真的问他们气球怎么卖）。</p>
<p>现在保留了两个气球在 qs，留作纪念。</p>
<h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day-2"></a>Day-2</h2><p>尾声。</p>
<p>老师公布了最后的榜单，我们队还是第二名，前 $5$ 名都做了 $7$ 道题，并且有 $4$ 个都是我们学校的，剩下一个是大学的，不得不说打出了一个很好的成绩。</p>
<p>我在整理东西的时候发现了我的 T-shirt 居然给我发成了 XL 的，但是差别不大，将就着穿吧。</p>
<p>本来是拿了四个气球回去的，走的时候被 xyl 和 zcl 白嫖了两个。</p>
<p>我还是想用一句话结尾，就是：一切都像做了一场梦一样。</p>
<p>突然想到了三体中也有类似的话：在短暂的魔法时代过后，这个世界又落到了预定的轨道上。（可能会有所偏差，大概是这个意思）</p>
<p><code>I&#39;m still looking forward to joining the competition with each other!</code></p>
]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>ICPC</tag>
      </tags>
  </entry>
  <entry>
    <title>THUSC2023游记</title>
    <url>/2024/01/06/THUSC2023%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<p>第一次写游记。。。</p>
<h1 id="Day-4-16"><a href="#Day-4-16" class="headerlink" title="Day-4.16"></a><strong>Day-4.16</strong></h1><p>从老师那里得知 THUSC 与 PKUSC 审核通过的事情，犹豫了一会，趁着家长考虑的间隙过了一道题（，最后选择 THUSC，带队老师是我们教练。</p>
<span id="more"></span>

<h1 id="Day-4-27-4-28"><a href="#Day-4-27-4-28" class="headerlink" title="Day-4.27~4.28"></a><strong>Day-4.27~4.28</strong></h1><p>准备出行等事情，了解了 THUSC 的大致情况（居然有英文论文，对低年级不太友好哦）。然后针对这些弱点开始复习（然而并没有复习英语。</p>
<p>给班主任请了假，预计 5.6~5.7 到南外参加夏令营。</p>
<h1 id="Day-4-29-5-3"><a href="#Day-4-29-5-3" class="headerlink" title="Day-4.29~5.3"></a><strong>Day-4.29~5.3</strong></h1><p>最苦的五天，有三天集训，从早上 8:00 上到晚上 21:00，关键的是，题目大部分还听不懂，低年级主要就是去骗分的。做题的过程中发现 THUSC2021 的题目还算简单，但愿今年也是如此吧。</p>
<p>看了一下洛谷 THUSC 的题目，五紫一黑……</p>
<h1 id="Day-5-4"><a href="#Day-5-4" class="headerlink" title="Day-5.4"></a><strong>Day-5.4</strong></h1><p>上课一天，晚上收拾东西，洗了个澡，定好第二天早上的闹钟，早早地休息了，Good Luck to ME!</p>
<h1 id="Day-5-5"><a href="#Day-5-5" class="headerlink" title="Day-5.5"></a><strong>Day-5.5</strong></h1><p>和我们教练、另一个校区的教练一起打了个车去机场，在机场碰到了同学们（大部分都不认识）。我们就坐飞机去了南京，飞机上听音乐，没想到把电弄完了，只好躺一躺。飞机一会就到了，这是我第一次去南京，感觉跟重庆没什么区别，主要是路两旁有非机动车道，然后林荫小道有些多。</p>
<p>品尝了南京特色——粉丝老鸭汤（似乎不是这个名字？），挺好吃的。下午在酒店收拾好东西，就去南京外国语学院报道。发了一个背包和学生证，包里有卡套、口罩、转盘（BUG调试指南），好像都是清华文创产品，还有一件T-shirt，要求穿上它来比赛，看了看，有清华校徽和计算机学院徽章以及“2023大中衔接活动”的文字。</p>
<p>晚上回来，在一个学长（很强）的带领下，熟悉了Linux的操作以及编译命令，挺复杂的，还装了VMware虚拟机。</p>
<h1 id="Day-5-6"><a href="#Day-5-6" class="headerlink" title="Day-5.6"></a><strong>Day-5.6</strong></h1><p>早早地起了床，去试机，全英文有点不太习惯，其它没什么。</p>
<p>试机完就是拍照，拍照的那位大叔，有点6。</p>
<p>中午回酒店休息了，准备下午的比赛。</p>
<p>下午精神状态堪忧，先是网站爆炸延时45分钟。T1曾经做过简化版，但是考试过程中没想出来。。。T2打暴力，被卡了，大部分分都没拿到，最后网站卡了，把提交语言卡掉了，那几分也没了。T3也是打了暴力，基环树上算就行了，得了十几分，然后T4，没看。。。</p>
<p>一共：$68+0+14+0&#x3D;82$。</p>
<p>朕考试考砸了，朕心要碎了。<del>祖宗把江山交到了朕的手里，</del>（</p>
<h1 id="Day-5-7"><a href="#Day-5-7" class="headerlink" title="Day-5.7"></a><strong>Day-5.7</strong></h1><p>早早地起了床，今天是工程题，美其名曰：造电脑。</p>
<p>昨晚有同学吐了，吐得一地都是，我是他的室友。。。</p>
<p>凌晨才睡觉。</p>
<p>早上状态不错，第五题卡了我很久，题面没看清楚，第六题没有看PPT根本不会，6。</p>
<p>最后：$125$。</p>
<p>一共 $207$，完结撒花吗？下午听了讲座和工程题的题解，最后发了奖项，考得还不错。本来要讲 Day1 题解的，但是时间到了，不得不放弃。</p>
<p>到酒店就开始玩。。。</p>
<h1 id="Day-5-8"><a href="#Day-5-8" class="headerlink" title="Day-5.8"></a><strong>Day-5.8</strong></h1><p>起床比较晚，然后又开始玩，玩到9:00，后面下去吃早饭，打个车去了机场，在机场里面吃了午饭。登机之后又在飞机上吃了一顿。。。最后安全回到重庆，下午回学校上了一节晚自习。</p>
<p>感觉就像做了一场梦。。。</p>
<p>期待下次 Travel！</p>
]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>THUSC</tag>
        <tag>清华大学</tag>
        <tag>夏令营</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 NOIP 游记</title>
    <url>/2024/01/07/2023-NOIP-%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Day-0"><a href="#Day-0" class="headerlink" title="Day-0"></a>Day-0</h2><p>摆烂，吃多了水母，开始随机发电。</p>
<p>虽然没有比赛，但是我知道我已经 AK 了 $\color{white}{\text{cos 温迪}}$</p>
<p>至于摆烂的方法嘛，总还是有的，鲁迅曾经说过，如何摆烂的时间就像海绵，只要愿意挤总还是有的。（海绵不代指某个海绵，就是很普通的海绵，就是那种会吸水的海绵，不是会说话的海绵宝宝）</p>
<p>然后看到了 dottle 的故事接龙，比较好笑的是：</p>
<blockquote>
<p>他：他一出生就死了</p>
</blockquote>
<p>而且还有很多规则怪谈，比较有意思，但是看不懂就很那啥。</p>
<p>就这样颓颓颓，过去了一天。</p>
<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day-1"></a>Day-1</h2><p>来，原神启动之后进了考场。</p>
<p>令我记忆犹新的是一个女孩子，她看到我们高呼原神启动，说了半句：“原来你也玩原神”</p>
<p>（其实是教练说的，口号就是“原神启动”）</p>
<p>这是前摇。</p>
<p>之前教练还说 CG 会在考场内巡视，但是没看到她，估计是在办公室里面喝仙人掌泡的茶。</p>
<p>T1 嘛，就是先 <code>sort</code> 然后 <code>reverse</code>，再 <code>sort</code>，再 <code>reverse</code>…</p>
<p>大概就可以了，测了大样例，一遍过，之后就没管了，认为可能会 TLE，但是自己看了一下，时间复杂度很好，常数很小，应该不会 T。</p>
<p>事实上这道题时间复杂度是 $O(1)$，常数是 $O(nm \log n)$，但是因为常数可以忽略不计，所以我的 T1 是跑得飞快的。</p>
<p>实在被卡我也想过使用 lm 数这种可能，那么时间复杂度就变成了 $O(i)$。</p>
<p>T2 不好评价，忘了是什么了。</p>
<p>哦哦哦，又想起来了，大概就是一眼看上去可以用 dp 乱搞，想了一下，边是随着时间变化的，而且每个操作是 $a \gets b$，故可以记录一下开始状态和结果状态，然后并查集维护即可。</p>
<p>测完大样例，不出意外还是一遍过，但是保险起见手搓了几组小样例，然后把某些关键代码删掉跑了一下大样例，发现是错的，那没问题了，便搁置在一边。</p>
<p>现在过了 $1 \text{ h}$。</p>
<p>接下来开 T3，看了一个小时感觉不太可做于是去做 T4，T4 是原神，然后写完线段树之后就可以了，大样例调试了大概 $10 \text{ min}$ 才过，然后还剩 $2 \text{ h}$。</p>
<p>接下来搞 T3，于是 T3 想到了一个做法，快速写完，可能会轻微卡常，大样例都过了，然后就开始着手写对拍。</p>
<p>现在还剩 $1\text{ h}$，中途上过几次厕所，但是都没有看到 CG，******</p>
<p>接下来是愉快的对拍时间，对拍出来第三道题有些问题没有考虑到，改了之后继续拍。</p>
<p>感觉 1、4 题没有问题，那么也因为时间原因就没有写对拍，2、3 题也是成功过拍。</p>
<p>然后最后 $15 \text{ min}$，让监考员开了一下 Linux 系统测了一下会不会 CE，接下来开摆。</p>
<p>考试结束。</p>
<p>然后去准备高考了。。。</p>
<h1 id="Day-1-5"><a href="#Day-1-5" class="headerlink" title="Day-1.5"></a>Day-1.5</h1><p>晚上去查了一下成绩，发现 T3 会有概率 WA 掉，目前 WA 的情况是 $10 \sim 20$ 分，然后我还是劝 CCF 善良，dddd。</p>
<p>T3 有些卡常，熨斗上和洛谷上的 TLE 都有点玄，后面知道这两个平台架构是一样的，3.30 GHz，CCF 是 3.70 GHz，我还是劝 CCF 善良，ddd。</p>
<p>其它三道没啥问题，xt* 的四题数据有些问题，不过后来修了也没有什么大问题了。</p>
<p>值得一说的是我的本机 2.10 GHz 跑 T3 跑了 1.5s，开了 O2，有些玄乎。</p>
<p>现在没发现 T3 有什么问题，打算拍一下。</p>
<h1 id="Day-2"><a href="#Day-2" class="headerlink" title="Day-2"></a>Day-2</h1><p>学文化，没想到啊没想到，gy* 居然和 z* 骂了起来，令人印象最深的是下面一段话：</p>
<blockquote>
<p>z*： 你又不来考试？</p>
</blockquote>
<blockquote>
<p>gy*：我就不来考试。</p>
</blockquote>
<blockquote>
<p>…</p>
</blockquote>
<blockquote>
<p>gy*：你整天就在这里阴阳怪气，是不是有病？！</p>
</blockquote>
<blockquote>
<p>z*：你说谁有病？</p>
</blockquote>
<blockquote>
<p>gy<em>：我说你有病！（刚想拉开门准备离开，被 z</em> 按住了手）</p>
</blockquote>
<blockquote>
<p>z*：今天你不来考试把家长叫过来了才能走</p>
</blockquote>
<blockquote>
<p>gy<em>：我就不考试！（按下了 z</em> 的手摔门而去）</p>
</blockquote>
<p>第二天 z* 来上课的时候发现他好像没什么异常，但是 gy* 没有来上课。</p>
<p>$\color{white}{\text{没了，真的没了，再也没有什么可写的了。}}$</p>
]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>NOIP</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello-World</title>
    <url>/9999/12/31/Hello-World/</url>
    <content><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h2><p>这里是 Acoipp（洛谷 uid：674469）的 github 个人博客！</p>
<p>这里存放了 Acoipp 的游记和学习笔记等大部分与 OI 相关的资料，你可以在每一个博客的下方评论，发表自己的见解。</p>
<p>同时，你也可以通过右上角的搜索按钮来精确定位你想要的内容。</p>
<p>我的联系方式为邮箱 <a href="mailto:&#56;&#x37;&#51;&#53;&#48;&#49;&#x31;&#x35;&#x34;&#64;&#113;&#113;&#x2e;&#99;&#111;&#x6d;">&#56;&#x37;&#51;&#53;&#48;&#49;&#x31;&#x35;&#x34;&#64;&#113;&#113;&#x2e;&#99;&#111;&#x6d;</a>，你随时可以向这个邮箱里发送消息。</p>
<p>所有在洛谷博客上的文章（题解除外），都会陆续搬运到此博客中。</p>
<p>希望我们在信息学这条道路上越走越远！</p>
<p>2024-01-07 11:26:25</p>
<p>Acoipp 于重庆</p>
]]></content>
  </entry>
  <entry>
    <title>THUSC2023游记</title>
    <url>/2024/01/06/%E6%8F%92%E5%85%A5%E7%B1%BB%E5%9E%8B-DP-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="插入类型-DP"><a href="#插入类型-DP" class="headerlink" title="插入类型 DP"></a><strong>插入类型 DP</strong></h1><h2 id="形式"><a href="#形式" class="headerlink" title="形式"></a><strong>形式</strong></h2><ul>
<li><p>多为 $n$ 个元素无法重复使用，需要给定一个排列，满足一定条件或是求有多少个排列满足一定条件。</p>
</li>
<li><p>$n$ 一般在 $100 \sim 5 \times 10^3$ 左右。</p>
</li>
<li><p>满足一些函数图像，类似于波浪函数，且答案与每个波浪和波浪的顶点有关（函数的 $x$ 坐标为下标，$y$ 坐标为下标上数的值）。</p>
</li>
</ul>
<p>满足以上三个条件的 DP 大部分是插入类型的 DP。</p>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a><strong>引入</strong></h2><p>先来看一道例题：</p>
<ul>
<li>对于一个正整数序列 $a$，长度为 $n(n \ge 3)$，如果对于所有的 $2 \le i \le n-1$，都有 $a_{i-1}+a_{i+1}\ge 2a_i$，就称这个序列是“美丽的”。现在给你另一个正整数序列 $b$，问你有多少种排列这个序列的方式使得这个序列是美丽的。（$n \le 100$）</li>
</ul>
<p>这道例题看似无从下手，但是我们把式子变换一下可以发现：<br>$$<br>a_{i-1}+a_{i+1} \ge 2a_i \to a_{i-1}-a_i \ge a_i-a_{i+1}<br>$$</p>
<p>即差分递增，差分递增有什么好处呢？把所有满足条件的 $a$ 序列列举出来，就会发现它其实是先是一段递减，然后中间可能会有平的一段（差分为 $0$），最后一段递增。事实上就是一个有平台的单谷函数。</p>
<p>有了这个性质，我们按 $a$ 从小到大排序，然后依次插入进这个函数，每个数可以插入到函数的左边，或者右边。（因为已经排好序了）</p>
<p>于是设 $dp_{i,j,k,l}$ 表示左边为 $i,j$ 且 右边为 $k,l$ 的方案数总和。</p>
<p>注意观察：这个 DP 没有后效性，且能够顺利转移，满足子问题包含的性质。</p>
<p>综上，可以 $O(n^4)$ 解决。</p>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a><strong>实践</strong></h2><p>容易看出，引子是一个水题，因为我们还没有牵扯到其它的限制，只是规定元素不能重复选，接下来我们看一下这道题：</p>
<p><a href="https://www.luogu.com.cn/problem/P5999">CEOI2016-kangaroo</a></p>
<p>这道题就满足了上面三条形式：  </p>
<ul>
<li><p>$n$ 个元素无法重复使用，求有多少个排序满足一定条件。</p>
</li>
<li><p>$2 \le n \le 2\times 10^3$</p>
</li>
<li><p>波浪函数，每个波浪的长度为 $1$</p>
</li>
</ul>
<p>这个时候，考虑怎么转换已经没有用了，因为它并不满足类似于差分递增这种规律，使得有一个单调性在里面，所以我们按照这三条形式的最后一条，即波浪进行入手。</p>
<p>先看下面一幅图：</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/zxe1whnd.png"><br>（如图，这是$n&#x3D;6,s&#x3D;4,t&#x3D;5$ 时候的一种情况。其中 $y$ 轴代表点的编号，$x$ 轴代表访问的顺序，即从 $1$ 访问到 $n$）</p>
<p>那么我们观察到这个函数图像有 $5$ 段（因为每段必须长度为 $1$）。段长不好设计 DP，那我们考虑用段的个数来设计 DP。</p>
<p>这种类型的 DP，有几个要素：</p>
<ul>
<li>确定元素添加顺序</li>
<li>确定状态的转移</li>
<li>确定对于 $s,t$ 的特判</li>
</ul>
<p>我们一个问题一个问题解决。</p>
<h3 id="确定元素添加顺序"><a href="#确定元素添加顺序" class="headerlink" title="确定元素添加顺序"></a><strong>确定元素添加顺序</strong></h3><p>没什么好说的，既然是排列，那就要从 $1\sim n$ 挨个添加。</p>
<h3 id="确定状态转移"><a href="#确定状态转移" class="headerlink" title="确定状态转移"></a><strong>确定状态转移</strong></h3><p>因为必须在 $O(n^2)$ 时间内通过此题，所以设 $dp_{i,j}$ 表示从 $1 \sim i$ 中，分成了 $j$ 段的方案数，容易得知，最后的答案是 $dp_{n,1}$。</p>
<p>什么叫段数，请看这幅图：</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/g8xedh1w.png"></p>
<p>这里，就是把 $1 \sim 5$ 分成了两段：$A \sim D,F \sim F$。</p>
<p>因为我们的 $s$ 需要特判，所以把它归在 $B \sim D$ 这个段里，准确的说，每个段应该是类似于 $M$ 形的（可以有很多拐弯，但是第一个是上升，最后一个下降）。为了准确计算，$s$ 和 $t$ 都并到相邻的段里面。</p>
<p>考虑转移，因为我们选择了 $1\sim n$ 这种顺序，那么我们每个 $i$ 都是在选了比它更小的数之后决策，再加上每个段是 $M$ 形状，所以 $i$ 可以把两个段合并成一个，或者自己新开一个段。</p>
<p>综上，DP 方程就可以出来了：<br>$$dp_{i,j} &#x3D; \begin{cases} dp_{i-1,j}+dp_{i-1,j-1} &amp; i&#x3D;s \text{ or } i&#x3D;t\ jdp_{i-1,j+1}+(j-[i&gt;s]-[i&gt;t])dp_{i-1,j-1} &amp; \text{other wise} \end{cases}$$</p>
<p>总述一下，这种类型的题其实大部分都是对段进行 DP，然后考虑转移和特判，之后就可以过了。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>此类 DP 被称为 “插入DP” 或者是 “连续段DP”，主要都是依据段数来转移状态。</p>
<p>模型：$1 \sim n$ 的元素不能重复使用，按照某个顺序排列 $i,j$ 能够使得 $i,j$ 的贡献成为定值。</p>
<p><strong>不同之处：有些题目固定了左右两端点，有些题目没有固定左右两端点。</strong></p>
<p>依据题目的不同要求，大部分题目中的段是可以 $A,W,V,M$ 等形状的，但少部分题目（例题）则限制了形状，但归根结底转移都是一样的套路。</p>
<p>设计转移时通常 <strong>按照一定顺序插入，且知道了这个顺序就知道了题目中要求的函数的值（函数的值是根据数的一定顺序决定的）</strong> 且 <strong>每个元素只有合并两段、接续一段、新开一段等操作</strong>，这样才能更好的帮助我们维护 DP 数组。（有些时候元素插入在一段的左&#x2F;右边的结果不一样，需要再开一维）</p>
<p>推这种 DP 式子的时候，我们会发现有些情况可能会缠在一起，让人分不清楚。这里要着重说一下：<strong>每个状态其实都是在为后面的状态作准备</strong>。</p>
<p>比如：</p>
<p>明明可以写为接在一个段的后面，DP 方程中偏要写为新开一个段。这就是因为新开一个段能够保证这个元素的左右两边都是比它大的数，如果是接续一个段，那么只能保证一端比它大，一端比它小。</p>
<p>所以，我们对于新开一个段和接续一个段的状态会不会重复的问题，只需要考虑它们最后形成的状态会不会重复就行了，而并不需要考虑当前的形态相不相同。例如：$1,3,2,4$ 中如果 $4$ 是接续的 $2$ 后面，那最后就有可能是 $1,3,2,4,\cdots$，即 $2,4$ 中间不会有任何元素；如果 $4$ 是新开了一个段，那么最后就可能是 $1,3,2,\cdots,4,\cdots$。那有些人就会有问题：如果 $2$ 后面的省略号的内容为空的话，那不就相同了吗？不会，因为这样的话，因为 $4,2$ 不在一个段，所以这里至少有两段，而我们最终统计答案的时候是只统计 $1$ 段的，意思是中间至少有一个元素把这两段合并起来，就与最开始的假设矛盾了，故状态不会重复。</p>
<p>最后，<strong>特别要注意整个序列两个端点需要特别判断</strong>，处理这种类型的方法有两种：</p>
<ul>
<li>在转移过程中就把贡献去掉&#x2F;加上。（多为题目固定了左右两端点）</li>
<li>多开两维数组记录两个端点的贡献或一些信息。（多为题目没有固定左右两端点）</li>
</ul>
<h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><ul>
<li><a href="https://www.luogu.com.cn/problem/P5999">CEOI2016-kangaroo</a>（例题）</li>
<li><a href="https://www.luogu.com.cn/problem/AT_abc209_f">AT_abc209_f-Deforestation</a></li>
<li><a href="https://www.luogu.com.cn/problem/AT_dp_t">AT_dp_t-permutation</a></li>
<li><a href="https://www.luogu.com.cn/problem/P7967">[COCI2021-2022#2] Magneti</a></li>
<li><a href="https://www.luogu.com.cn/problem/CF1515E">CF1515E-Phoenix and Computers</a></li>
<li><a href="https://www.luogu.com.cn/problem/CF704B">CF704B-Ant Man</a></li>
<li><a href="https://www.luogu.com.cn/problem/P9197">[JOI Open 2016] 摩天大楼</a></li>
<li><a href="https://www.luogu.com.cn/problem/P2612">[ZJOI2012]波浪</a></li>
</ul>
<hr>
<h2 id="部分习题讲评"><a href="#部分习题讲评" class="headerlink" title="部分习题讲评"></a><strong>部分习题讲评</strong></h2><h3 id="CF704B-Ant-Man"><a href="#CF704B-Ant-Man" class="headerlink" title="CF704B-Ant Man"></a><a href="https://www.luogu.com.cn/problem/CF704B"><strong>CF704B-Ant Man</strong></a></h3><h4 id="初探题面"><a href="#初探题面" class="headerlink" title="初探题面"></a><strong>初探题面</strong></h4><p>这道题我们可以先转换一下题意：</p>
<p>让 $a_i \gets a-i+x_i,b_i \gets b_i-x_i,c_i \gets c_i+x_i,d_i \gets d_i-x_i$。</p>
<p>那么就可以将 $f(i,j)$ 写为：<br>$$<br>f(i,j) &#x3D; \begin{cases} d_i+a_j &amp; i&lt;j\ c_i+b_j &amp; i&gt;j \end{cases}<br>$$</p>
<p>由这个公式看出：权值与下标的大小相关，只要确定了下标的大小，那么这个权值基本上就确定了。</p>
<p>所以，<strong>按照 $1\sim n$ 的顺序插入 DP</strong>。</p>
<h4 id="状态设计"><a href="#状态设计" class="headerlink" title="状态设计"></a><strong>状态设计</strong></h4><p>还是像例题一样，设 $dp_{i,j}$ 为 $1 \sim i$ 中分成 $j$ 段最小的代价是多少。</p>
<p>但是与例题不同的是，这里的每一段可以是 $V,M,W,A$ 形状的，就是起始位置没有硬性要求。（对于起始位置的要求视题意而设计状态）</p>
<p>那么我们就可以开始 dp 了。</p>
<p>首先考虑一般情况（$i \ne s \text{ and } i\ne t$）：</p>
<p>（以下状态设计均考虑费用提前计算技巧）</p>
<ul>
<li>$i$ 能够把之前的两段拼起来，那么 $i$ 对于全局权值的贡献就是 $a_i+c_i$。</li>
<li>$i$ 能够在一段的末尾与那一段拼起来，那么 $i$ 对于全局权值的贡献是 $a_i+d_i$。</li>
<li>$i$ 能够在一段的前面与那一段拼起来，那么 $i$ 对于全局权值的贡献是 $b_i+c_i$。</li>
<li>$i$ 独立成为一段，则贡献是 $b_i+d_i$。</li>
</ul>
<p>所以对于 $i \ne s \text{ and } i \ne t$，转移有四种：<br>$$<br>dp_{i,j} &#x3D; \min\begin{cases} dp_{i-1,j+1} +a_i+c_i \ dp_{i-1,j}+a_i+d_i \ dp_{i-1,j} + b_i+c_i \ dp_{i-1,j-1}+b_i+d_i \end{cases}<br>$$</p>
<p>注意，这些式子是怎么推导出来的！</p>
<ul>
<li>因为贡献只与两个数的大小有关</li>
<li>两个数的大小这么来判断：比 $i$ 先填的数一定比 $i$ 小，比 $i$ 后填的数一定比 $i$ 大。</li>
</ul>
<p>根据这两点，权值和方程就能很轻松写出来了。</p>
<p>至于 $i&#x3D;s \text{ or } i&#x3D;t$ 的情况，一个是只能加在某一段的后面，一个是只能加在某一段的前面，两个都可以自己成为一段，<strong>等待后面的元素把两段拼在一起！</strong></p>
<h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a><strong>细节</strong></h4><p>1、对于以 $s$ 开头的一段，<strong>不允许</strong>有任何元素拼在前面；对于以 $t$ 结尾的一段，<strong>不允许</strong>有任何元素拼在后面。  </p>
<p>2、对于以 $s$ 开头的一段和以 $t$ 开头的一段，一定到最后才能拼起来，<strong>不能在前面就合成了一个段</strong>。  </p>
<p>3、为什么我们合并两个段不需要额外记录是不是 $s$ 和 $t$ 所在的段？因为不管是合并哪两个段事实上是一样的，只要有一个段没有 $s$ 和 $t$，那么这个合并就可以进行。  </p>
<p>4、为什么考虑加在某个段的前面的时候不需要判断 $s$，$t$ 也不需要判断？因为我们加到任意一段前面&#x2F;后面的代价是一样的。（都是费用提前计算）</p>
<p>5、做这类题目时，一定要<strong>把 $i$ 和 $j$ 的关系分开（常用方法：费用提前计算），不然无法记录状态！</strong></p>
<p>综上，这道题目就做完了，为了避免一些特殊情况，代码采用从前往后的方式 DP。（从后往前也可以）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 5005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,i,j,x[N],a[N],b[N],c[N],d[N],s,t,dp[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;s&gt;&gt;t;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;x[i];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i],a[i]+=x[i];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;b[i],b[i]-=x[i];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;c[i],c[i]+=x[i];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;d[i],d[i]-=x[i];</span><br><span class="line">	<span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">	dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i==s)&#123;</span><br><span class="line">				<span class="keyword">if</span>(j&gt;=(i&gt;t))&#123;</span><br><span class="line">					<span class="keyword">if</span>(j) dp[i][j] = <span class="built_in">min</span>(dp[i][j],dp[i<span class="number">-1</span>][j]+c[i]);</span><br><span class="line">					dp[i][j+<span class="number">1</span>] = <span class="built_in">min</span>(dp[i][j+<span class="number">1</span>],dp[i<span class="number">-1</span>][j]+d[i]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(i==t)&#123;</span><br><span class="line">				<span class="keyword">if</span>(j&gt;=(i&gt;s))&#123;</span><br><span class="line">					<span class="keyword">if</span>(j) dp[i][j] = <span class="built_in">min</span>(dp[i][j],dp[i<span class="number">-1</span>][j]+a[i]);</span><br><span class="line">					dp[i][j+<span class="number">1</span>] = <span class="built_in">min</span>(dp[i][j+<span class="number">1</span>],dp[i<span class="number">-1</span>][j]+b[i]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(j&lt;((i&gt;t)+(i&gt;s))) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">if</span>(j&gt;=<span class="number">2</span>) dp[i][j<span class="number">-1</span>] = <span class="built_in">min</span>(dp[i][j<span class="number">-1</span>],dp[i<span class="number">-1</span>][j]+a[i]+c[i]);</span><br><span class="line">				dp[i][j+<span class="number">1</span>] = <span class="built_in">min</span>(dp[i][j+<span class="number">1</span>],dp[i<span class="number">-1</span>][j]+b[i]+d[i]);</span><br><span class="line">				<span class="keyword">if</span>(j&gt;(i&gt;t)) dp[i][j] = <span class="built_in">min</span>(dp[i][j],dp[i<span class="number">-1</span>][j]+a[i]+d[i]);</span><br><span class="line">				<span class="keyword">if</span>(j&gt;(i&gt;s)) dp[i][j] = <span class="built_in">min</span>(dp[i][j],dp[i<span class="number">-1</span>][j]+b[i]+c[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;dp[n][<span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JOI-Open-2016-摩天大楼"><a href="#JOI-Open-2016-摩天大楼" class="headerlink" title="[JOI Open 2016] 摩天大楼"></a><a href="https://www.luogu.com.cn/problem/P9197"><strong>[JOI Open 2016] 摩天大楼</strong></a></h3><h4 id="初探题面-1"><a href="#初探题面-1" class="headerlink" title="初探题面"></a><strong>初探题面</strong></h4><p>首先，看到绝对值想到分类讨论，即为：<br>$$<br>g(i,i+1) &#x3D; \begin{cases} f_i-f_{i+1} &amp; f_i \ge f_{i+1} \ f_{i+1}-f_i &amp; f_i &lt; f_{i+1} \end{cases}<br>$$</p>
<p>那么又是根据大小关系来决定权值大小了，所以考虑插入 DP。  </p>
<p><strong>第一种方法</strong></p>
<h4 id="状态推导"><a href="#状态推导" class="headerlink" title="状态推导"></a><strong>状态推导</strong></h4><p>像上一道题一样，这里的状态因为没有段长的硬性要求，所以 $W,V,A,M$ 形状的段都是可以的，因此也减少了初始和结尾字符的特判（尽管题目也不需要特判）。</p>
<p>设 $dp_{i,j,k}$ 表示 $1\sim i$ 这些数所代表的数值插入进去之后有 $j$ 段当前权值总和为 $k$ 的情况总数。</p>
<p>注意到最开始是不用 $f_1-f_0$ 或者 $f_0-f_1$，结尾同理，所以依旧需要特判。</p>
<p>再发现，如果我们不记录开始和结尾数值的话，很难维护，所以我们要 <strong>用尽可能小的空间传递更多的信息</strong>。</p>
<ul>
<li>如果我们能够确定第一个位置是否已经被填了，那么就不存在其它特判情况了，即在填的时候特判一下就可以了。（结尾同理）</li>
</ul>
<p>根据上面那一条发现的性质，我们对 DP 状态进行修改，设 $dp_{i,j,k,0&#x2F;1,0&#x2F;1}$ 表示 $1\sim i$ 这些数所代表的数值插入进去之后有 $j$ 段当前权值总和为 $k$ 且开头结尾有没有被确定的情况总数。</p>
<p>这个转移方程一确定，那么事情就简单多了。</p>
<h4 id="转移方程"><a href="#转移方程" class="headerlink" title="转移方程"></a><strong>转移方程</strong></h4><p>首先，明确一下状态的后效性如何去除（因为 $g(i,i+1)$ 与两个元素有关）。</p>
<p>看下面这幅图：<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/4t9nejw4.png"></p>
<p>（其中横轴为元素的位置，纵轴为元素的值）</p>
<p>容易看出这样的总的权值和是：$|5-1|+|1-6|+|6-4|+|4-3|+|3-2|+|2-7|+|7-8|$ 的。</p>
<p>在我们按照大小顺序插入的前提下考虑分开：$5-1+6-1+6-4+4-3+3-2+7-2+8-7$，消项得：$5-1+6-1+6-2+8-2$。</p>
<p>这样我们就可以得知，每个<strong>极小值</strong>会被减去两次（但是如果是在序列开头或末尾只会被减一次），每个<strong>极大值</strong>会被加两次（但是如果是在序列开头或末尾只会被加一次）。</p>
<p>即遇到极大值看它是不是在开头或者末尾，如果在，贡献就会一份，否则为两份，极小值同理。</p>
<p>综上，我们就把 $i,i+1$ 的贡献分开了，而且也利用到了我们知晓元素之间大小关系的性质，DP 转移就可以开始执行了。</p>
<p><strong>以下状态设计均为从大往小插入考虑</strong></p>
<p>然后，熟悉的分类讨论：</p>
<ul>
<li>对于 $i$，它合并了两个段，段数少 $1$</li>
</ul>
<p>因为 $i$ 合并两个段，所以它不能在最左边或者最右边，而且它两端都是比它小的数，那么它便是这个区间的极小值，对全局的贡献是负的两倍。即：<br>$$<br>dp_{i,j,k,p,l} &#x3D; jdp_{i-1,j+1,k+2a_i,p,l}<br>$$</p>
<p>（为什么是加 $2a_i$，是因为，它插入之后贡献为 $k$，插入之前肯定就是加上）</p>
<ul>
<li>对于 $i$，它新开了一个段，段数多 $1$</li>
</ul>
<p>因为 $i$ 新开了一个段，之后合并它和其它段的数一定比它小，所以它是区间极大值，对全局的贡献是正两倍，注意，它如果是在最左边，它的贡献就只有一倍，在最右边同理。特别注意，如果左右两边已经确定了，那么它能够新开段的位置会少 $1\sim 2$ 个。即：</p>
<p>$$<br>\begin{aligned}<br>dp_{i,j,k,0,0} &amp;&#x3D; jdp_{i-1,j-1,k-2a_i,0,0} \<br>dp_{i,j,k,0,1} &amp;&#x3D; (j-1)dp_{i-1,j-1,k-2a_i,0,1}+dp_{i-1,j-1,k-a_i,0,0} \<br>dp_{i,j,k,1,0} &amp;&#x3D; (j-1)dp_{i-1,j-1,k-2a_i,1,0}+dp_{i-1,j-1,k-a_i,0,0} \<br>dp_{i,j,k,1,1} &amp;&#x3D; (j-2)dp_{i-1,j-1,k-2a_i,1,1}+dp_{i-1,j-1,k-a_i,1,0}+dp_{i-1,j-1,k-a_i,0,1}<br>\end{aligned}<br>$$</p>
<ul>
<li>对于 $i$，它延续了某个段，并接在该段的左&#x2F;右边，段数不变</li>
</ul>
<p>我们以左边为例，因为 $i$ 在普通情况下一边会有比它小的，一边会有比它大的，所以 $i$ 对总的值没有贡献，但是当 $i$ 在左边或者右边时，它是区间极小值，贡献是负一倍。即：</p>
<p>$$<br>\begin{aligned}<br>dp_{i,j,k,0,0} &amp;&#x3D; jdp_{i-1,j,k,0,0} \<br>dp_{i,j,k,0,1} &amp;&#x3D; jdp_{i-1,j,k,0,1} \<br>dp_{i,j,k,1,0} &amp;&#x3D; (j-1)dp_{i-1,j,k,1,0}+dp_{i-1,j,k+a_i,0,0} \<br>dp_{i,j,k,1,1} &amp;&#x3D; (j-1)dp_{i-1,j,k,1,1}+dp_{i-1,j,k+a_i,0,1}<br>\end{aligned}<br>$$</p>
<p>加在右边同理，由此我们推导完了整个 DP，但是实现过程中还要注意一下转移时的细节：左右端点固定后权值是多少？有多少个段可以插入等。</p>
<p>这种方法常数很大，同时不利于优化，但是个人认为思维跟 kangaroo 差不多，而且更好想一些。</p>
<p><strong>第二种方法</strong></p>
<p>此处不再赘述，详见：<a href="https://www.luogu.com.cn/blog/AFewSuns/post-ti-xie-p9197-joi-open-2016-ma-tian-tai-lou">Afewsuns 的博客-[JOI Open 2016]摩天大楼题解</a>。</p>
<p>注：[ZJOI2012] 波浪 和此题十分相像，主要是处理精度问题和小数的“快速输出”，那道题可能会卡常，推荐使用第二种方法。</p>
<p>此处给出第一种方法的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,i,j,k,l,a[<span class="number">105</span>],dp[<span class="number">2</span>][<span class="number">105</span>][<span class="number">8005</span>][<span class="number">2</span>][<span class="number">2</span>],ans;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(ll a,ll b)</span></span>&#123;<span class="keyword">return</span> a&gt;b;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(ll &amp;a,ll b)</span></span>&#123;</span><br><span class="line">	a += b;</span><br><span class="line">	a %= mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;l;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">		cout&lt;&lt;<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);</span><br><span class="line">	dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=i;j++) <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;=<span class="number">6000</span>;k++) dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">0</span>]=dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">0</span>]=dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">1</span>]=dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;=<span class="number">6000</span>;k++)&#123;</span><br><span class="line">				<span class="comment">//MERGE</span></span><br><span class="line">				<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">0</span>],j*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j+<span class="number">1</span>][k+<span class="number">2</span>*a[i]][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">				<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">1</span>],j*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j+<span class="number">1</span>][k+<span class="number">2</span>*a[i]][<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">				<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">0</span>],j*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j+<span class="number">1</span>][k+<span class="number">2</span>*a[i]][<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">				<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">1</span>],j*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j+<span class="number">1</span>][k+<span class="number">2</span>*a[i]][<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">				<span class="keyword">if</span>(k&gt;=<span class="number">2</span>*a[i])&#123;</span><br><span class="line">					<span class="comment">//NEW</span></span><br><span class="line">					<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">0</span>],j*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j<span class="number">-1</span>][k<span class="number">-2</span>*a[i]][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">					<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">0</span>],(j<span class="number">-1</span>)*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j<span class="number">-1</span>][k<span class="number">-2</span>*a[i]][<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">					<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">1</span>],(j<span class="number">-1</span>)*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j<span class="number">-1</span>][k<span class="number">-2</span>*a[i]][<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">					<span class="keyword">if</span>(j<span class="number">-1</span>&gt;<span class="number">1</span>) <span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">1</span>],(j<span class="number">-2</span>)*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j<span class="number">-1</span>][k<span class="number">-2</span>*a[i]][<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(k&gt;=a[i])&#123;</span><br><span class="line">					<span class="comment">//NEW</span></span><br><span class="line">					<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">0</span>],dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j<span class="number">-1</span>][k-a[i]][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">					<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">1</span>],dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j<span class="number">-1</span>][k-a[i]][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">					<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">1</span>],dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j<span class="number">-1</span>][k-a[i]][<span class="number">0</span>][<span class="number">1</span>]+dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j<span class="number">-1</span>][k-a[i]][<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//LEFT</span></span><br><span class="line">				<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">0</span>],j*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">				<span class="keyword">if</span>(j&gt;<span class="number">1</span>) <span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">0</span>],(j<span class="number">-1</span>)*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">				<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">0</span>],dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k+a[i]][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">				<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">1</span>],j*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">				<span class="keyword">if</span>(j&gt;<span class="number">1</span>) <span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">1</span>],(j<span class="number">-1</span>)*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">1</span>]+dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k+a[i]][<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">1</span>],dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k+a[i]][<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">				<span class="comment">//RIGHT</span></span><br><span class="line">				<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">0</span>],j*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">				<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">0</span>],j*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">				<span class="keyword">if</span>(j&gt;<span class="number">1</span>) <span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">1</span>],(j<span class="number">-1</span>)*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">				<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">1</span>],dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k+a[i]][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">				<span class="keyword">if</span>(j&gt;<span class="number">1</span>) <span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">1</span>],(j<span class="number">-1</span>)*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">1</span>]+dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k+a[i]][<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">1</span>],dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k+a[i]][<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=l;i++) ans=(ans+dp[n&amp;<span class="number">1</span>][<span class="number">1</span>][i][<span class="number">1</span>][<span class="number">1</span>])%mod;</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ABC209F-Deforestation"><a href="#ABC209F-Deforestation" class="headerlink" title="[ABC209F] Deforestation"></a><a href="https://www.luogu.com.cn/problem/AT_abc209_f"><strong>[ABC209F] Deforestation</strong></a></h3><h4 id="初探题面-2"><a href="#初探题面-2" class="headerlink" title="初探题面"></a><strong>初探题面</strong></h4><p>这道题有点类似于前面提到的“凸”这道例题，但是它没有叫你计算最小的花费是多少，而是计算有多少种方案能够达到最小的花费。</p>
<p>遇到这种类型的题目，首先要明确<strong>在什么条件下能够达到最小的花费</strong>。</p>
<p>因为任意一个 $i$ 产生的权值与 $i-1,i,i+1$ 有关，说人话就是相邻的元素选择的顺序会影响到它的权值，所以我们考虑对于 $i,i+1$，哪个先选比较好。</p>
<ul>
<li>如果先选 $i$，权值为：$a_{i-1}+a_i+a_{i+1}+a_{i+1}+a_{i+2}$。</li>
<li>如果先选 $i+1$，权值为：$a_i+a_{i+1}+a_{i+2}+a_i+a_{i-1}$。</li>
</ul>
<p>用第一个式子减去第二个式子得：$2a_{i+1}-2a_i$。</p>
<p>所以当 $a_{i+1} &gt; a_i$ 时，先选 $i+1$ 更好；当 $a_i &gt; a_{i+1}$ 时，先选 $i$ 更好；如果两者相等，那么我们可以任意抉择。</p>
<p>很明显的，对于每组 $i,i+1$ 我们都可以这么抉择并且至少有一种方案满足这种选择，所以这种局部最优性可以扩展到全局，因此，我们只要求出满足这种顺序的方案数就行了。</p>
<h4 id="状态设计-1"><a href="#状态设计-1" class="headerlink" title="状态设计"></a><strong>状态设计</strong></h4><p>我们发现如果按照这个关系减出来的图其实是一个 TAG，不好维护插入顺序。因此我们只能考虑从 $1 \sim n$ 考虑插入。</p>
<p>因为 $i$ 可以插入的方案数仅与 $i-1$ 所插入的位置有关系，而且题目允许 $O(n^2)$ 的空间和时间，因此我们设计两维 DP 数组：$dp_{i,j}$ 表示第 $i$ 个数插入到了第 $j$ 个位置满足条件的方案。</p>
<p><strong>说明一下，这里的第 $j$ 个位置并不是最终操作序列上的位置，而是操作序列只保留 $1\sim i$ 的子序列的相对位置。</strong></p>
<p>对于 $a_i &gt; a_{i-1}$ 先选 $i$，所以 $i$ 的相对位置一定在 $i-1$ 的相对位置的前面，故 $dp_{i,j} &#x3D; \sum_{k&#x3D;j}^i dp_{i-1,k}$。</p>
<p>对于 $a_i &lt; a_{i-1}$ 先选 $i-1$，所以 $i$ 的相对位置一定在 $i-1$ 的相对位置的后面，故 $dp_{i,j} &#x3D; \sum_{k&#x3D;1}^{j-1} dp_{i-1,k}$。</p>
<p>对于 $a_i &#x3D; a_{i-1}$ 都可以先选，所以全部情况都可以转移，故 $dp_{i,j} &#x3D; \sum_{k&#x3D;1}^{j-1} dp_{i-1,k}$。</p>
<p>注：</p>
<ul>
<li>第一个转移方程从 $j$ 开始循环到 $i$ 是因为如果 $i-1$ 在 $1 \sim i-1$ 的第 $j$ 个位置，那么 $i$ 就可以插入到第 $j$ 个位置的前面使得 $i$ 在 $i-1$ 的前面并且相对位置也是 $j$。</li>
<li>第二个转移方程循环到 $j-1$ 的道理同上。</li>
<li>这种方法为什么能不重不漏，是因为两个不同的最终操作序列一定有一个 $i$ 在 $1\sim i$ 中的相对位置不同；两个相同的最终操作序列一定满足每一个 $i$ 在 $1\sim i$ 中的相对位置相同。</li>
<li>初始化 DP 的时候需要注意 $1$ 在 $1\sim 1$ 中的相对位置只有 $1$ 这一个。</li>
</ul>
<p>综上，代码就可以写出来了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,a[<span class="number">4005</span>],dp[<span class="number">4005</span>][<span class="number">4005</span>],m[<span class="number">4005</span>][<span class="number">4005</span>],i,j;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">	dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) m[<span class="number">1</span>][i]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]==a[i<span class="number">-1</span>]) dp[i][j]=m[i<span class="number">-1</span>][i<span class="number">-1</span>];</span><br><span class="line">			<span class="keyword">if</span>(a[i]&gt;a[i<span class="number">-1</span>]) dp[i][j]=((m[i<span class="number">-1</span>][i<span class="number">-1</span>]-m[i<span class="number">-1</span>][j<span class="number">-1</span>])%mod+mod)%mod;</span><br><span class="line">			<span class="keyword">if</span>(a[i]&lt;a[i<span class="number">-1</span>]) dp[i][j]=m[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++) m[i][j]=(m[i][j<span class="number">-1</span>]+dp[i][j])%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;m[n][n]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CF1515E-Phoenix-and-Computers"><a href="#CF1515E-Phoenix-and-Computers" class="headerlink" title="CF1515E-Phoenix and Computers"></a><strong><a href="https://www.luogu.com.cn/problem/CF1515E">CF1515E-Phoenix and Computers</a></strong></h3><h4 id="初探题面-3"><a href="#初探题面-3" class="headerlink" title="初探题面"></a><strong>初探题面</strong></h4><p>一看就知道是插入 DP，但是如何设计状态令人十分难为。</p>
<p>还是想用 $dp_{i,j}$ 表示开了 $i$ 台，构成了 $j$ 个连续段。</p>
<p>根据上面的总结，我们知道，只要这个状态所产生的的最终的所有的状态不会与另外一个不同的状态（同一阶段）所产生的不同的所有的状态相重合，那么这种做法就会做到不重不漏。</p>
<p>而且题目要求如果 $i-1$，$i+1$  两台电脑都有开启的话，$i$ 号电脑也自动开启，这就说明题目限制了如果两个段的之间的长度 $\le 1$ 的话，就会自动合并成一段，这便启发了我们状态的设计：相邻两个段之间的长度为 $\ge 2$ 的<strong>未知数</strong>。</p>
<p>注意：这里的未知数指的是中间一定有超过一个电脑，相当于中间有 $2$ 个电脑和中间有 $3$ 个电脑的状态是等价的。</p>
<p>考虑这种方法会不会导致状态有重叠，答案是不会。</p>
<p>因为考虑最终的操作序列，肯定最后合并成了一段，合并成了一段就不存在某两段之间至少有 $2$ 台电脑这个说法了，并且因为中间有 $2$ 个电脑和中间有 $3$ 个电脑的状态是等价的，故考虑转移的时候也不会重复。</p>
<p>既然都推到这里了，那么 DP 方程就出来了。</p>
<p>首先，单独形成一段，$dp_{i,j}&#x3D;j \times dp_{i-1,j-1}$。</p>
<p>然后加在某段的两边（这里的左右边是一样的，故不分开讨论）：$dp_{i,j} &#x3D; j \times 2 \times dp_{i-1,j}$。</p>
<p>最后连接连段，如果两段中间的未知数等于 $2$，那可以开 $2$ 台中的任意一台；如果未知数等于 $3$，那只能开中间那台；如果未知数是 $4$ 或更多，开的电脑就不止一台，并且都是上述 $2$ 种情况的延伸。$dp_{i,j}&#x3D;j \times dp_{i-3,j+1}+j \times 2 \times dp_{i-2,j+1}$。注意这里 $i$ 为什么要 $-2$ 或者 $-3$，因为它会自动开启 $2,3$ 台电脑。</p>
<p>最后注意一下，这次枚举的顺序就是开机的顺序了，并不是电脑编号的顺序，因为题目的自动与手动是按照开机的顺序以及位置决定的，与电脑编号没有关系。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,mod,i,j,dp[<span class="number">405</span>][<span class="number">405</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;mod;</span><br><span class="line">	dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">			dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = (dp[i+<span class="number">1</span>][j+<span class="number">1</span>]+dp[i][j]*(j+<span class="number">1</span>))%mod;</span><br><span class="line">			dp[i+<span class="number">1</span>][j] = (dp[i+<span class="number">1</span>][j]+dp[i][j]*<span class="number">2</span>*j)%mod;</span><br><span class="line">			dp[i+<span class="number">2</span>][j] = (dp[i+<span class="number">2</span>][j]+dp[i][j]*<span class="number">2</span>*j)%mod;</span><br><span class="line">			<span class="keyword">if</span>(j&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">				dp[i+<span class="number">2</span>][j<span class="number">-1</span>] = (dp[i+<span class="number">2</span>][j<span class="number">-1</span>]+dp[i][j]*(j<span class="number">-1</span>)*<span class="number">2</span>)%mod;</span><br><span class="line">				dp[i+<span class="number">3</span>][j<span class="number">-1</span>] = (dp[i+<span class="number">3</span>][j<span class="number">-1</span>]+dp[i][j]*(j<span class="number">-1</span>))%mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;dp[n][<span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>总结其实都写在例题和习题讲评里面了，复制粘贴一遍其实没有用，重要的是去理解，并且收获自己的感受，这样才能让做题的思路更加敏捷精确。这就是插入 DP，一个非常巧妙但是很难理解的 DP 类型。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>动态规划</tag>
        <tag>插入dp</tag>
      </tags>
  </entry>
</search>
