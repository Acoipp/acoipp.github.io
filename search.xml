<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AC 自动机</title>
    <url>/2024/01/14/AC-%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="AC-自动机"><a href="#AC-自动机" class="headerlink" title="AC 自动机"></a>AC 自动机</h1><h2 id="自动机"><a href="#自动机" class="headerlink" title="自动机"></a>自动机</h2><p>自动机的概念：自动机是一个有向图，它接收字符（信号）序列，并对其进行处理（识别和判定），以确定其能到达的最终状态和路径。图中的点对应字符，存在一个起始状态点，多个结束状态点。如果图中任意一个点，连出去的对应某字符 ch 的边最多只有一条，则称该自动机是确定性的（DFA）。如果图中任意一个点，连出去的对应某字符 ch 的边可能有多条，甚至存在不对应任何字符的边，则称该自动机是非确定的（NFA）。</p>
<h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>首先像 trie 树一样插入字符串，树上的每个节点代表的是根节点到这个节点经过的边上的字符所构成的字符串。</p>
<p>这些边称为“树边”，每个节点还有 <code>fail</code> 指针，这个指针指向了一个节点，这个节点代表的字符串是当前节点代表字符串的后缀，也是<strong>最长后缀</strong>。</p>
<p>这里引用一下 <a href="https://oi.wiki/">OI-wiki</a> 的 AC 自动机部分的图：</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/tcwblh5x.png"></p>
<p>其中灰色的边就是字典树上的边，黄色的边就是 <code>fail</code> 指针，我们观察发现 $8$ 号节点代表的字符串是 $\texttt{sh}$，它的 <code>fail</code> 指针就是 $1$ 号节点，因为 $1$ 号节点代表的字符串是 $\texttt{h}$，是它的最长后缀。</p>
<p>但是 $3$ 号节点的 <code>fail</code> 指向根节点，代表没有任何一个字典树上的节点代表的字符串是它代表字符串的后缀。</p>
<p>接下来是构建函数 <code>build</code>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">    <span class="keyword">if</span> (tr[<span class="number">0</span>][i]) q.<span class="built_in">push</span>(tr[<span class="number">0</span>][i]);</span><br><span class="line">  <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">    <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tr[u][i])</span><br><span class="line">        fail[tr[u][i]] = tr[fail[u]][i], q.<span class="built_in">push</span>(tr[u][i]);   <span class="comment">//直接指向 fail[u] 的第 i 个儿子</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        tr[u][i] = tr[fail[u]][i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>这是一个用于多模式串匹配的数据结构，例如我们要查找一堆串在 $T$ 中出现了多少次怎么办呢？</p>
<p>首先得记录第 $i$ 个节点所代表的字符串出现了那一堆串中间的串，在构建 trie 树的时候要加上一句 <code>cnt[p]++</code>，并且构建 AC 自动机的时候要在 <code>q.pop()</code> 后面加上 <code>cnt[u] += cnt[fail[u]]</code> 才行。</p>
<p>因为 $fail_u$ 有的字符串 $u$ 一定也有，并且不会计算重复，因为 $fail_u$ 是 $u$ 的最长后缀。</p>
<p>最后查询的时候把 $T$ 放进 AC 自动机里面走边就可以了，还要开一个变量存储次数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span> *t)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> u = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; t[i]; i++) &#123;</span><br><span class="line">    u = tr[u][t[i] - <span class="string">&#x27;a&#x27;</span>];  <span class="comment">// 转移</span></span><br><span class="line">    res += cnt[u];          <span class="comment">// 记录</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们想要查找每个字符串分别出现了多少次怎么办呢？容易发现 fail 树实际上就是一个后缀跳到后缀的过程，如果 $T$ 在上面的函数中经过了 $h$ 节点，那么 $T$ 一定包含了 $h$ 的所有祖先节点所代表的字符串，如果将它们的 $cnt$ 值都加上 $1$，答案也不会影响，于是我们可以记录经过的点，然后用拓扑排序在 <strong>fail 树上</strong>跑就可以了。</p>
<p>这里是 <a href="https://www.luogu.com.cn/problem/P5357">P5357 【模板】AC 自动机</a> 的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 2000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//AC自动机中，fail数组最重要，代表了最长后缀的失配数组</span></span><br><span class="line"><span class="type">int</span> n,i,trie[N][<span class="number">27</span>],tot,vis[N],fail[N],ans,cnt[N],res,id[N],j,in[N];</span><br><span class="line">string temp,s[<span class="number">200005</span>];</span><br><span class="line">deque&lt;<span class="type">int</span>&gt; op;</span><br><span class="line">map&lt;string,<span class="type">int</span>&gt; opp;</span><br><span class="line"><span class="comment">//add函数就是普通trie中的add函数</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(string temp,<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> p = <span class="number">0</span>;     <span class="comment">//节点号</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;temp.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!trie[p][temp[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>]) trie[p][temp[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>]=++tot;</span><br><span class="line">		p = trie[p][temp[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	vis[p]=id;     <span class="comment">//标记一下</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;         <span class="comment">//开始建造AC自动机</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">26</span>;i++) <span class="keyword">if</span>(trie[<span class="number">0</span>][i]) op.<span class="built_in">push_back</span>(trie[<span class="number">0</span>][i]);      <span class="comment">//首先把根节点的儿子push进去</span></span><br><span class="line">	<span class="keyword">while</span>(op.<span class="built_in">size</span>())&#123;</span><br><span class="line">		<span class="type">int</span> tmp = op.<span class="built_in">front</span>();</span><br><span class="line">		op.<span class="built_in">pop_front</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">26</span>;i++)&#123;       <span class="comment">//for循环字符集</span></span><br><span class="line">			<span class="keyword">if</span>(trie[tmp][i])&#123;                 <span class="comment">//如果有字符</span></span><br><span class="line">				in[trie[fail[tmp]][i]]++;            <span class="comment">//标记一下fail的入度，方便最后拓扑排序</span></span><br><span class="line">				fail[trie[tmp][i]]=trie[fail[tmp]][i],op.<span class="built_in">push_back</span>(trie[tmp][i]);      <span class="comment">//根据定义，得出fail数组的转移方程</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> trie[tmp][i]=trie[fail[tmp]][i];        <span class="comment">//否则再次转移，但是不添加进队列当中</span></span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//开始循环遍历文本串</span></span><br><span class="line">	<span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;temp.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">		p = trie[p][temp[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>];</span><br><span class="line">		cnt[p]++;         <span class="comment">//直接加即可，类似于TAG上的差分</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">topo_sort</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//拓扑排序，极大地优化了时间复杂度。</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=tot;i++) <span class="keyword">if</span>(in[i]==<span class="number">0</span>) op.<span class="built_in">push_back</span>(i);</span><br><span class="line">	<span class="keyword">while</span>(op.<span class="built_in">size</span>())&#123;</span><br><span class="line">		<span class="type">int</span> tmp = op.<span class="built_in">front</span>();</span><br><span class="line">		op.<span class="built_in">pop_front</span>();</span><br><span class="line">		cnt[fail[tmp]] += cnt[tmp],in[fail[tmp]]--;</span><br><span class="line">		<span class="keyword">if</span>(in[fail[tmp]]==<span class="number">0</span>) op.<span class="built_in">push_back</span>(fail[tmp]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=tot;i++) <span class="keyword">if</span>(vis[i]) id[vis[i]]=cnt[i];      <span class="comment">//标记</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;s[i],<span class="built_in">add</span>(s[i],i),opp[s[i]]=i;      <span class="comment">//用Map标记，可能存在相同的字符串</span></span><br><span class="line">	<span class="built_in">build</span>();</span><br><span class="line">	cin&gt;&gt;temp;              <span class="comment">//输入文本串</span></span><br><span class="line">	<span class="built_in">query</span>();</span><br><span class="line">	<span class="built_in">topo_sort</span>();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,id[opp[s[i]]]);        <span class="comment">//输出，用Map映射一下编号</span></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="fail-树"><a href="#fail-树" class="headerlink" title="fail 树"></a>fail 树</h2><p>若 $S$ 在 $T$ 中出现，则 $S$ 一定是 $T$ 的某个前缀的后缀。</p>
<p>我们把每个点的 fail 指针拿出来，恰好就构成了一棵树，这棵树每个节点代表的字符串都是它儿子节点所代表的字符串的最长后缀。</p>
<p>查询 $S$ 在 $T$ 中出现的次数，就是查找有多少个节点是 $T$ 的前缀并且存在一个后缀等于 $S$。</p>
<p>于是就有：如果 $T$ 在遍历字典树的过程中经过的节点的权值都加上 $1$ 的话，模板串 $S$ 出现的次数就是它在 fail 树上代表的节点的子树的权值和。</p>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ol>
<li><p>某个结点所对应的字符串是它的所有子孙结点所对应的字符串的后缀；</p>
</li>
<li><p>$i$ 的父亲节点对应字符串一定是点 $i$ 对应字符串的最长后缀；</p>
</li>
<li><p>从点 $i$ 出发往根走，会找到 $i$ 节点的所有后缀节点。即点 $i$ 的祖先一定是点 $i$ 的后缀；</p>
</li>
<li><p>树上的每个点都是一个单词的前缀，而且每个单词的每个前缀在这棵树上都对应着一个点；</p>
</li>
<li><p>字符串 $i$ 在自动机里匹配到的每个点在 fail 树上的所有祖先就是 $i$ 的所有子串。</p>
</li>
</ol>
<h2 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h2><p>AC 自动机因为是一张有向图，于是就有图上随机游走的问题。</p>
<p>或者是图上 dp&#x2F;矩阵加速。</p>
<p>这种情况一般都需要理解 AC 自动机每个节点指向的下一个节点一定是当前节点的字符串后面接一个字符，前面砍掉一些字符所代表的节点。</p>
<p>例如 $\text{aabbb}$ 可以转移到 $\texttt{aabbbh}$（如果有），否则就在 $\texttt{abbbh}$，$\texttt{bbbh}$，$\texttt{bbh}$，$\texttt{bh}$，$\texttt{h}$，$\emptyset$ 选存在的较前的元素。</p>
<p>fail 树则通常运用到字符串计数问题里面去，它的性质就是如果 $T$ 在遍历字典树的过程中经过的节点都加上 $1$ 的话，模板串 $S$ 出现的次数就是它在 fail 树上代表的节点的子树的和。</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>AC 自动机</tag>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 CSP-J/S（游记）</title>
    <url>/2024/01/07/2023-CSP-J-S%EF%BC%88%E6%B8%B8%E8%AE%B0%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Day-0"><a href="#Day-0" class="headerlink" title="Day-0"></a>Day-0</h2><p>第二次进入 CSP-J&#x2F;S 的考场。</p>
<p>我不是很好评价，有电梯不让我们坐电梯，还好楼层不高，不然的话真的要再次领略到 2022 年 cqbz 的爬楼梯的残酷了。。。</p>
<p>去试机的时候 Judgelight 打趣旁边的小朋友我们是 cqbs 的，结果一问发现是校友。</p>
<p>后面因为某人在模拟赛中写了这么一句话 <code>#include&lt;windows.h&gt;</code>，导致 CE 之后号召所有人在 NOI linux 上用这个头文件，方便对拍，而且不用会 CE。</p>
<p>结果是小朋友们没有一个信他的（</p>
<p>旁边的人都在玩 edge:&#x2F;&#x2F;surf，我试了一下 NOI linux 里面能不能用 pbds，结果是可以的，然后又去查了一下资料，大概是这样描述的：</p>
<ul>
<li>除了明确要求外，可以使用带有下划线开头的宏和库。（<a href="http://www.noi.cn/">www.noi.cn</a> 2021）</li>
</ul>
<p>下面附了一个链接，代表明确要求不能用的宏和库，点进去：</p>
<ul>
<li>任何下划线开头的宏和库禁止使用。（<a href="http://www.noi.cn/">www.noi.cn</a> 2011）</li>
</ul>
<p>我人都不好了，还好的是这个库除了卡卡常没什么用。</p>
<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day-1"></a>Day-1</h2><p>CSP-J，正常发挥，第 4 题可能稍微难了一点，但是可以写。</p>
<p>T3 的话是一道小模拟，细节也不是很多，要求了输出最大值我们全部取绝对值就不需要判断负数的情况了。</p>
<p>睡了 1 个半小时，之前以为是 4 个小时，结果后面 12:00 就收卷了，考得还不错。</p>
<h2 id="Day-1-5"><a href="#Day-1-5" class="headerlink" title="Day-1.5"></a>Day-1.5</h2><p>CSP-S，第一题很简单，暴力就可以做了。</p>
<p>第二题就有点不可做了，推了半个小时性质，因为忘记了结束时间，有点手忙脚乱，中间 Hash 还被卡了模数，最后换成更为稳定的 trie 才算告一段落。</p>
<p>还剩 2.5 小时，C 题也是一道中等的模拟，写了 1 个小时，调试没有太多时间，也是顺利结束，还剩 1.5 小时。</p>
<p>下面就是转折的开始。</p>
<p>前 3 道题做得挺顺利，想着能不能拿下 T4，然后看了一下题意，挺清晰明了。</p>
<p>D 题一上来想到二分，然后纠结了一下贪心对不对，认为我那个是对的就打了线段树优化的贪心，后面调的时候发现大样例始终过不去，怀疑是代码哪里有问题，一直调。</p>
<p>后面到了考试结束也没有调出来，但是可以得一部分分，后面一问同学发现 T4 比 T2 还简单，原因是 T4 直接按二分的结果排序就可以了，不需要减去深度。</p>
<p>当时觉得贪心不对就应该朝不同方向尝试的，真的太着急了以至于没有想到这边去。</p>
<p>以后我们的算法的正确性（特别是贪心），一定要在特别有保证之后再去写，不然会浪费很多时间！</p>
<p>半家欢喜半家愁。</p>
<p>（有一说一，这次 CCF 的大样例还挺良心的，所有情况基本上都考虑到了）</p>
<h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day-2"></a>Day-2</h2><p>比完赛后又做综合作业，抽空看了一下 Bilibili，感觉十分不爽。</p>
<p>后面在 B 站上看到一个写得不错的中篇小说，10 分钟看完之后，更不爽了，因为这个小说的情节真的很扣人心弦，以至于连比赛失利这件事都无法比拟。</p>
<p>大概就是这样吧，能够让我打炸之后如此平静的原因我猜有这几个：</p>
<ul>
<li>性格使然。</li>
<li>B 站给了我放松的空间。（本来想玩一下原神的但是忘了）</li>
<li>（秘密）</li>
</ul>
<p>行吧，虽然 CSP-S 失利了，但是我相信后面的比赛一定能够稳定发挥，越打越好。</p>
<p>$\color{white}{\text{加油！}}$</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>CSP</tag>
      </tags>
  </entry>
  <entry>
    <title>CQCPC 2023 游记</title>
    <url>/2024/01/07/CQCPC-2023-%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CQCPC，重庆大学生程序设计比赛，本次我们是持“外卡”参加，不参与最终排名和颁奖。</p>
<p>最近重庆是越来越冷了，早上从校门走出去的时候还浑身打着哆嗦。</p>
<h2 id="Day-3"><a href="#Day-3" class="headerlink" title="Day-(-3)"></a>Day-(-3)</h2><p>学校公布了这场比赛的组队情况，我，<a href="https://www.luogu.com.cn/user/636142">recollect_i</a> 还有 <a href="https://www.luogu.com.cn/user/511676">naoliaok_lovely</a> 组成一队，顺便还打了一次 CQCPC-10 的重现赛（这次是 11），感觉会有两道防 AK 题，十分有趣，我们配合也十分默契，感觉状态比较好。</p>
<p>只打了 2 个小时左右，主要是练练手感，三个人只能使用一台电脑有点分配不均匀，但是习惯就好了。后面我们找到了感觉之后就很快过掉了大部分题，只是罚时很高，这得问问 <a href="https://www.luogu.com.cn/user/511676">naoliaok_lovely</a>。</p>
<p>同时我们还添了 T-shirt 的尺码，我填的是 L，并且学校也通知说三人一组又 500 yuan 的报名费，但是不知道学校可不可以批准下来。</p>
<p>老师也教学了一下 Code block 的使用方法，但是后面比赛官方说有 Dev-C++ 于是就抛之脑后了（甚至有传言系统不是 Windows 也不是 Linux）。</p>
<p>目前 Code block 的用途是颓废。</p>
<h2 id="Day-2-1"><a href="#Day-2-1" class="headerlink" title="Day-(-2)&#x2F;(-1)"></a>Day-(-2)&#x2F;(-1)</h2><p>没什么好说的，准备第二天的 USACO。</p>
<h2 id="Day-0"><a href="#Day-0" class="headerlink" title="Day-0"></a>Day-0</h2><p>一天都在打 USACO，但是比较幸运的是我之前打到过了 Gold，然后这次 Gold 的题目也比较简单，所以 AK 之后就练其他题目了，在白金组开始之前大部分时间在颓废。</p>
<p>一天下来只过了 $2$ 道题。 </p>
<p>下午放学之后，家长送来了部分衣物和好吃的（，出去好好享受了一大碗冒菜之后，我打算晚上去机房练一下题目，但是被赶出去了，原因是学校不允许在没有老师的情况下进入机房（蚌埠</p>
<p>不得不说，校里面树太多了，导致更冷了，风吹过来的时候还会发出沙沙的响声，带着帽子才敢走出 KXG。</p>
<p>然后就被迫在 qs 做了几个小时的 whk 作业，简直是要累死人，但是还没做完。。。</p>
<p>于是爽爽地洗了个澡，在 <a href="https://www.noi.cn/xw/2013-02-04/714970.shtml">WC</a> 里面待了将近一个小时才出来（别问我在里面干了什么，问就是在 enjoy w**hing）</p>
<p>出去之后快要十点钟了，又听了几首音乐卡准到十点钟上床睡觉。</p>
<h2 id="Day-0-5"><a href="#Day-0-5" class="headerlink" title="Day-0.5"></a>Day-0.5</h2><p>无梦之夜。。。</p>
<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day-1"></a>Day-1</h2><p>早上和金牌教练（真的得了金牌）约定好了 7:45 在校门口集合，我起床比较早，然后出校门之后去罗森买了一个鸡腿和巧克力狂啃。啃完之后才暖和了许多。</p>
<p>后面 7:40 左右教练就看到了我，我们打了个车去重庆西南大学北碚校区。</p>
<p>原来这么早三峡广场就这么多人了啊，那个红绿灯一如既往的堵。</p>
<p>还有，北碚为什么是主城九区啊，这么远，还过了个“北碚隧道”。。。</p>
<p>总之最后安全抵达，但是是从 $2$ 号门近的，很是麻烦，导致走了 20 多分钟才到达 25 号教学楼。</p>
<p>路途中看到了一个背着 Adidas 书包的人，我认为是我们同学，后来证明这是对的，我们教练和我路上一直在谈某知名大学的体育活动和场地。</p>
<p>我们到达了 25 号教学楼下看到了很多老故人，包括但不限于同级的，上一级的和下一级的。</p>
<p>我们领取了自己的东西，帆布包里面装着一件 T-shirt 和名字牌，十分好看。</p>
<p>在那里大概等了 30 多分钟，中途和同学的家长说了几句，然后就无所事事，等着比赛开始。话说茶歇处的东西可以随便吃吗（</p>
<p>坐着电梯上去，电梯很挤，差点就挤到电井里面了，我们是在 $2$ 考场，然后这个考场是中学生的队伍专属的，因此远远地看到了一些熟悉的同学（<a href="https://www.luogu.com.cn/user/500205">ssxvngn</a>），虽然以前没见过，但是已经久仰大名了。</p>
<p>接下来就在希冀平台开始试机，我没有试，因为感觉跟平时差不多，交给 naoliaok_lovely 和 recollect_i 了。</p>
<p>有一说一，这些电脑真的很卡，连玩个谷歌小恐龙都会卡成 PPT，更不要说敲代码了，所以导致写代码的时候一直很难受。</p>
<p>又是漫长的等待，等到比赛正式开始，我们赶快看了一下题，我一看，哇 C 题原神，于是赶快去敲 C 题，但是 naoliaok_lovely 说他会 A 题，于是就交给他了，因为 A 题代码好写得多，但是写完之后他先是读错题意，WA 了一发，然后因为细节问题 WA 了 2 发，我帮他调试细节之后交错题目又 WA 了一发，总共 A 题这种签到题 WA 了 4 发，有点稍微扰乱节奏，但是总体影响不大，因为据 naoliaok_lovely 自己阐述，有他在的比赛罚时都会异常地高。</p>
<p>接着 recollect_i 说他会 H 题，并且不用数据结构，于是让他来敲 H 题了，他凭借着自身稳定的特点一发 AC。</p>
<p>然后我赶快凭借着记忆把 C 题敲了，但是样例很水，多加了一个 $1$ 都没发现于是 WA 了一发，把这个东西改过来之后就 AC 了，成功拿到了本场比赛我们队伍第一个，也是唯一一个首 A。</p>
<p>然后我们开了一下 D 题，D 题的数据范围居然有下界！我根据这个口胡了一个暴力做法，但是由于其贪心性质不知道对不对，这是 recollect_i 提出第四维可以二分解决，我又详细想了一下正确性，于是这道题就通过了，但是 WA 了一发因为没有删去调试语句（逃</p>
<p>接下来他们开始搞 F 题，我就看了一下 E 和 G 题，顺便也看了一下榜单，很多队伍都把 G 题过了，我简单想了一下思路就写了 G 题（他们的 F 题 WA 了，正在纸上调小样例），但是 WA 了几次，原因是 $4$ 和 $6$ 的情况没有判掉，我偷了个懒，把所有质因数拿出来 dp 就过了。</p>
<p>他们这个时候还在调 F 题，我觉得不能一直耽误在一道题上，恰好我也看了 E 题，E 题需要分解质因数，于是叫 naoliaok_lovely 打了一个 Pollard-Rho，只打了一半我们就发现只需要知道质因数的次数就可以了，于是预处理了 $1 \sim 10^6$ 的质数，暴力除，最后再判断剩下来的数是不是平方数就可以了。最后一步就是根据这点暴搜即可，时间还不是很快，但是能过，一遍 AC。</p>
<p>后来他们找到了 F 题的问题所在：排序的时候需要一定的随机化才能通过，于是写了一个随机 $7$ 次的程序就过了。</p>
<p>这里不得不佩服 recollect_i 的英语，E 和 H 题都是英文，翻译出来完全准确，没有一点偏差。</p>
<p>还剩大概 $2$ 个小时，I 题计算几何，完全不可做，但是 B 题我们猜了一个结论，后面打出来之后发现死活 WA，就很离谱，至少结论在 $1 \sim 10^7$ 内是有效的，知道比赛最后还没调出来。</p>
<p>最后比赛结束了，封榜（比赛结束前 $1$ 小时）的时候我们是第 $2$，第 $1$ 也是中学生，也是我们学校的。</p>
<p>中途比赛官方还发了牛奶、面包、牛肉，我感觉只有那一包牛肉好吃一点，哦，对了，咖啡也很不错，只是天友的牛奶吃得我翻江倒海的。</p>
<p>比赛结束后学校的一位老师，我们同学的一个家长带着我们参观了西南大学的计算机室、机器人室、监控（农业）室和图书馆。</p>
<p>图书馆真的很大，比重庆图书馆还要大很多倍，这里有很多同学在学习、聊天、<del>玩原神</del>。机器人也很好玩，我有幸去玩了一把，简直比吃了德芙巧克力还要丝滑，最令人注目的是机器人室的同学们（西南大学）<del>居然</del>果然也有玩 Genshin-Impact 的！</p>
<p>那些同学们给我们介绍了一些机器人大赛的内容，十分有趣，比 OI 好到哪里去了。</p>
<p>最后我们和老师同学们道了别，和 recollect_i 乘坐老师的车回去。</p>
<p>车上睡了一觉，补充了一下体力，准备晚自习的 USACO。</p>
<p>晚自习十分平常，但是我请了个假去机房打 USACO-P，被打爆了，4 个小时的成果就是 A 题过了一半的测试点。</p>
<p>比赛过程中 AC 了一道题就给我们发了一个气球，我把这些气球带到了乡村基去吃了一份牛排，看起来就像卖气球的一样（据老师说去年还有人真的问他们气球怎么卖）。</p>
<p>现在保留了两个气球在 qs，留作纪念。</p>
<h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day-2"></a>Day-2</h2><p>尾声。</p>
<p>老师公布了最后的榜单，我们队还是第二名，前 $5$ 名都做了 $7$ 道题，并且有 $4$ 个都是我们学校的，剩下一个是大学的，不得不说打出了一个很好的成绩。</p>
<p>我在整理东西的时候发现了我的 T-shirt 居然给我发成了 XL 的，但是差别不大，将就着穿吧。</p>
<p>本来是拿了四个气球回去的，走的时候被 xyl 和 zcl 白嫖了两个。</p>
<p>我还是想用一句话结尾，就是：一切都像做了一场梦一样。</p>
<p>突然想到了三体中也有类似的话：在短暂的魔法时代过后，这个世界又落到了预定的轨道上。（可能会有所偏差，大概是这个意思）</p>
<p><code>I&#39;m still looking forward to joining the competition with each other!</code></p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>ICPC</tag>
      </tags>
  </entry>
  <entry>
    <title>DP提高笔记</title>
    <url>/2024/01/07/DP%E6%8F%90%E9%AB%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="数位-DP"><a href="#数位-DP" class="headerlink" title="数位 DP"></a>数位 DP</h1><p>即为对数字的每一位来进行 DP。</p>
<p>例 1：</p>
<blockquote>
<p>给定两个正整数 $a$ 和 $b$，求在 $[a,b]$ 中的所有整数中，每个数码各出现了多少次。</p>
</blockquote>
<p>很明显，直接套数位 DP 的模板即可：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(ll pos,ll num,...,<span class="type">bool</span> limit,<span class="type">bool</span> lead)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!pos) <span class="keyword">return</span> <span class="built_in">end</span>(num,...);</span><br><span class="line">	<span class="keyword">if</span>(!limit&amp;&amp;!lead&amp;&amp;dp[...]!=<span class="number">-1</span>) <span class="keyword">return</span> dp[...];</span><br><span class="line">	ll ans = <span class="number">0</span>,up = (limit?poss[pos]:<span class="number">9</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">		ans += <span class="built_in">dfs</span>(pos<span class="number">-1</span>,...,limit&amp;&amp;(i==up),lead&amp;&amp;(i==<span class="number">0</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!limit&amp;&amp;!lead) dp[...]=ans;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例 2：</p>
<blockquote>
<p>求满足下列所有条件的4元组（整数）  数量：<br>$a+c &gt; b+d,a+d \ge b+c,0 \le a \le A,0 \le b \le B,0 \le c \le C,0 \le d \le D$（$0 \le A,B,C,D \le 10^{18}$）</p>
</blockquote>
<p>还是套模板，但是此处涉及到了加法，那么很显然要再开一维表示进位，然后会发现 TLE，因为一次转移跟 $d$ 有很大的关系，考虑转化为 $2$ 进制，发现还是 TLE，原来 $limit$ 和 $lead$ 浪费的时间太多了，那么直接存在 dp 状态里面就可以了。</p>
<p>例 3：<a href="https://www.luogu.com.cn/problem/P3281">[SCOI2013] 数数</a></p>
<p>先套模板，然后会发现数位和会 TLE，但是发现 $i&#x3D;0,i&#x3D;up$ 和 $1 \le i &lt; up$ 分别都是相同的转移，然后去除无用状态和循环即可。</p>
<p>例 4：</p>
<blockquote>
<p>对 $1$ 个 $10$ 进制数，定义它的众数为所有数位中出现次数最多的数字d，特别的，若出现次数最多的数字有多个，则认为众数不存在，例如，$114514$ 的众数为 $1$；$4396$ 则不存在众数，求 $[l,r]$ 中众数为 $d$ 的数字数量。</p>
</blockquote>
<p>对于每个 dfs 状态，然后如果 $limit&#x3D;0$ 那么可以直接通过每个数出现的次数 dp 出来结果。</p>
<p>还要处理前导 $0$，那么一次询问就是 $18 \times 18 \times 10^3$ 左右的，但是我们发现对于一个数 $\overline{abcde\cdots }$，其所有 $0 \sim 99999\dots 999$，位数到达 $b$ 的位置都可以预处理得到。</p>
<p>故时间复杂度少了一个 $18$，即可通过。</p>
<p>例 5：<a href="https://www.luogu.com.cn/problem/P3303">[SDOI2013] 淘金</a></p>
<p>考虑数位 dp 的模板，额外记录当前乘积中 $2,3,5,7$ 的因子个数，然后发现总状态只有 $8 \times 10^3$ 左右个，然后暴力地执行 dp 最后跑一下二路归并即可。</p>
<p>总结：</p>
<ul>
<li>如果 dp 过程中在 $limit&#x3D;0$ 的时间可以 $O(d)$ 得出答案，那么一共可以在 $O(d \times T \times \text{位数}^2)$ 的时间复杂度内算出答案，如果可以记忆化可以少一个位数的时间复杂度。</li>
<li>有些状态是完全重叠的，那么我们直接合并就可以优化时间复杂度。</li>
<li>做数位 dp 应该像普通 dp 那样寻找重叠的子任务，然后合并而不是只套模板。</li>
</ul>
<h1 id="斜率优化"><a href="#斜率优化" class="headerlink" title="斜率优化"></a>斜率优化</h1><p>斜率，直线上任取两点 $(x_1,y_1),(x_2,y_2)$ 的 $\dfrac{y_2-y_1}{x_2-x_1}$。</p>
<p>主要应用于形如下式的 1D&#x2F;1D 动态规划：</p>
<p>$$<br>f_i &#x3D; \min&#x2F;\max{f_j+a_i \times b_j+c_i+d_j}<br>$$</p>
<p>遇到这种情况可以选择斜率优化，李超线段树的写法在这里不做详解。</p>
<p>斜率优化具体而言是维护一个凸包，形如下图（左边是下凸包，右边是上凸包）</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/v7hcxyou.png"></p>
<p>对于一般的题目都是要求截距 （$y&#x3D;kx+b$ 中的 $b$）最小&#x2F;大化，故此处对斜率最小&#x2F;大化，不过多讲解，但是都可以互相转化。</p>
<p>凸包的特点就是每条线段的斜率都是单调的，且上下凸包恰好相反。</p>
<p>考虑在凸包上加点：</p>
<ul>
<li><p>如果加的点的 $x$ 坐标单调不降，那么我们可以动态维护凸包，即使用单调栈，判断线段的斜率即可。</p>
</li>
<li><p>如果加的点的 $x$ 坐标非单调，那么我们需要用 CDQ 分治强制让它单调，然后处理左边对右边的贡献就可以了。（左边按 $x$ 排序，右边按斜率排序就可以处理了，还有要记住添加的顺序不能打乱）</p>
</li>
</ul>
<p>考虑点的斜率：</p>
<ul>
<li>如果斜率单调不降，那么它具有决策单调性，可以把前面的全部弹出去直到最小&#x2F;大的那个，而且同时保证了后面的点的决策正确性。</li>
<li>否则需要在凸包上二分，二分哪个点最优，我们发现，对于下凸包而言（上凸包类似），所有点到当前决策点的线的截距一定是形如 $a_1 &gt; a_2 &gt; \dots &gt;a_i &lt; a_{i+1} &lt; \dots &lt; a_k$，二分这个符号，找到最后一个大于即可。</li>
</ul>
<p>综上：</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">$x$ 单调不下降</th>
<th align="center">$k$ 单调不下降</th>
</tr>
</thead>
<tbody><tr>
<td align="center">是</td>
<td align="center">单调栈</td>
<td align="center">决策单调性</td>
</tr>
<tr>
<td align="center">否</td>
<td align="center">CDQ分治</td>
<td align="center">单调队列上二分或者CDQ分治</td>
</tr>
</tbody></table>
<p>注意：</p>
<ul>
<li><strong>如果碰到 $x$ 相同的两个节点，那么如果是维护最小值的话，要丢弃 $y$ 较大的，否则丢齐较小的。</strong></li>
</ul>
<p>最后就是一定要把 $x,y,k$ 的公式列出来，对于斜率优化而言，上述 dp 方程中：$x&#x3D;b_j,y&#x3D;f_j+d_j,k&#x3D;a_i$，把 $j$ 这个点加到凸包里面，然后对于 $i$ 来说用斜率为 $k$ 的直线去截取凸包就可以了。</p>
<p>特别的，李超线段树恰好相反。</p>
<p>有时候一个等于号就能够改变整个代码的逻辑，写代码的时候一定要注意。</p>
<h1 id="四边形不等式"><a href="#四边形不等式" class="headerlink" title="四边形不等式"></a>四边形不等式</h1><p>统一地来说，若一个函数 $w(a,b)$ 满足下列条件则称 $w$ 函数满足四边形不等式。</p>
<p>$$<br>w(a,c)+w(b,d) \le w(a,d)+w(b,c)(a \le b \le c \le d)<br>$$</p>
<p>通常用来解决决策单调性的问题。</p>
<h2 id="1D-1D-动态规划"><a href="#1D-1D-动态规划" class="headerlink" title="1D&#x2F;1D 动态规划"></a>1D&#x2F;1D 动态规划</h2><p>若我们可以写成 $f_i &#x3D; \min{f_j+w(i,j)}$ 的形式，且 $w$ 函数满足四边形不等式，则称 $f$ 函数具有决策单调性。</p>
<p>或者 $f_i &#x3D; \max{j+w(i,j)}$ 但是 $w$ 函数满足交叉<strong>大于</strong>包含，也可以用决策单调性。</p>
<p>即设 $f_i$ 是由 $f_{k1}$ 转移过来且 $f_j$ 是由 $f_{k2}$ 转移过来，那么若 $i&gt;j$ 那么 $k1 \ge k2$。</p>
<p>此处证明略。</p>
<h3 id="w-函数与-f-没有关系"><a href="#w-函数与-f-没有关系" class="headerlink" title="$w$ 函数与 $f$ 没有关系"></a>$w$ 函数与 $f$ 没有关系</h3><p>如果满足上面的条件的话，那么我们可以用整体二分法求解。</p>
<p>即函数 $\operatorname{solve}(l,r,s,t)$ 表示 $f_{l \sim r}$ 的决策点一定都是在 $s \sim t$ 内的。</p>
<p>那么我们每次转移的时候就取中间点，然后分为两部分递归下去就行了，特别的，如果 $w_{l,r}$ 必须通过 $O(n)$ 的方式得到，那么我们可以在函数的过程中添加一个莫队的指针移动，这样的话时间复杂度是严格 $O(n \log n)$ 的。</p>
<h3 id="w-函数与-f-有关系"><a href="#w-函数与-f-有关系" class="headerlink" title="$w$ 函数与 $f$ 有关系"></a>$w$ 函数与 $f$ 有关系</h3><p>我们考虑单调队列存储三元组 $(l,r,p)$，表示所有 $dp_{l \sim r}$ 的转移点，都是 $p$，如果我们添加进来了一个新的转移点，那就比较如果在 $dp_l$ 地方是这个新的转移点较优，那 $dp_{l \sim r}$ 一定都选这个转移点，直接 $\operatorname{pop}$ 即可；否则需要二分找到一个临界点 $k$，使得 $dp_{l \sim k}$ 的转移点都是原来的 $p$，然后 $dp_{k+1,r}$ 的转移点是新的转移点，然后 $\operatorname{push}$ 进单调队列即可。</p>
<p>最后如果队头的 $r&lt;$ 当前决策点 $i$，直接弹出即可，时间复杂度 $O(n \log n)$。</p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>当然还有 $w$ 函数，满足四边形不等式，但是符号相反，即四边形不等式和 dp 转移符号相反。那样的话需要用到单调栈维护。</p>
<p>栈顶到栈低一定也是三元组 $(l,r,p)$，且 $l,r$ 递增。（$l$ 和 $r$ 有可能会发生变化，因此不存下来，而是要用的时候二分求解）</p>
<p>此处就不再赘述了，大概就是先看栈头的两个元素的分界点是不是小于 $i$，如果小于就弹出，最后把 $i$ 更新之后加入到栈里面，且满足决策点递增。（决策点如果不递增就直接弹出栈顶）</p>
<p>解释：详见 Fiyuls 博客，很详细。</p>
<h2 id="2D-1D-动态规划"><a href="#2D-1D-动态规划" class="headerlink" title="2D&#x2F;1D 动态规划"></a>2D&#x2F;1D 动态规划</h2><p>形如 $dp_{l,r} &#x3D; \min{dp_{l,k}+dp_{k+1,r}+w(l,r)}$ 的转移且 $w$ 函数满足四边形不等式和区间单调性（$w(a,b) \ge w(c,d) (a \le c \le d \le b)$，那么 $dp_{l,r}$ 也具有决策单调性。</p>
<p>遇到这种情况，把每个决策点存下来，然后 $dp_{l,r}$ 的最优决策点一定在 $dp_{l,r-1}$ 的最优决策点和 $dp_{l+1,r}$ 的最优决策点之间，然后 for 循环枚举即可。</p>
<p>注意到每一种区间长度的枚举总数一定不超过 $2n$，所以整个时间复杂度是 $O(n^2)$。</p>
<p>常见的问题就是优化石子合并。</p>
<h1 id="动态-DP"><a href="#动态-DP" class="headerlink" title="动态 DP"></a>动态 DP</h1><p>用线段树维护矩阵转移。</p>
<p>主要是一些树上 dp 被弄上了修改点权的操作。</p>
<p>把 dp 用广义矩阵乘法写出来，然后再来一个 $g$ 数组表示去掉重儿子的答案，再搞一个 $f$ 数组表示直接答案。</p>
<p>$g$ 的转移矩阵一定得用关于 $x$ 和其儿子的变量表示出来（常数），然后 $f$ 一定能用 $g$ 和重儿子的信息表示出来（常数）。</p>
<p>最后树链剖分维护一下每条重链的信息就可以了。</p>
<p>注意：</p>
<ul>
<li>矩阵常数优化可以拆开乘法的过程。</li>
<li>每条链可以单独开一个线段树，这样节省了很多时间。</li>
<li>此处树链剖分时，线段树每个节点存储的是一段矩阵乘法。</li>
<li>特别注意叶子节点的边界情况，一般是“单位矩阵”。</li>
</ul>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>动态规划</tag>
        <tag>数位dp</tag>
        <tag>斜率优化</tag>
        <tag>四边形不等式</tag>
        <tag>动态dp</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 NOIP 游记</title>
    <url>/2024/01/07/2023-NOIP-%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Day-0"><a href="#Day-0" class="headerlink" title="Day-0"></a>Day-0</h2><p>摆烂，吃多了水母，开始随机发电。</p>
<p>虽然没有比赛，但是我知道我已经 AK 了 $\color{white}{\text{cos 温迪}}$</p>
<p>至于摆烂的方法嘛，总还是有的，鲁迅曾经说过，如何摆烂的时间就像海绵，只要愿意挤总还是有的。（海绵不代指某个海绵，就是很普通的海绵，就是那种会吸水的海绵，不是会说话的海绵宝宝）</p>
<p>然后看到了 dottle 的故事接龙，比较好笑的是：</p>
<blockquote>
<p>他：他一出生就死了</p>
</blockquote>
<p>而且还有很多规则怪谈，比较有意思，但是看不懂就很那啥。</p>
<p>就这样颓颓颓，过去了一天。</p>
<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day-1"></a>Day-1</h2><p>来，原神启动之后进了考场。</p>
<p>令我记忆犹新的是一个女孩子，她看到我们高呼原神启动，说了半句：“原来你也玩原神”</p>
<p>（其实是教练说的，口号就是“原神启动”）</p>
<p>这是前摇。</p>
<p>之前教练还说 CG 会在考场内巡视，但是没看到她，估计是在办公室里面喝仙人掌泡的茶。</p>
<p>T1 嘛，就是先 <code>sort</code> 然后 <code>reverse</code>，再 <code>sort</code>，再 <code>reverse</code>…</p>
<p>大概就可以了，测了大样例，一遍过，之后就没管了，认为可能会 TLE，但是自己看了一下，时间复杂度很好，常数很小，应该不会 T。</p>
<p>事实上这道题时间复杂度是 $O(1)$，常数是 $O(nm \log n)$，但是因为常数可以忽略不计，所以我的 T1 是跑得飞快的。</p>
<p>实在被卡我也想过使用 lm 数这种可能，那么时间复杂度就变成了 $O(i)$。</p>
<p>T2 不好评价，忘了是什么了。</p>
<p>哦哦哦，又想起来了，大概就是一眼看上去可以用 dp 乱搞，想了一下，边是随着时间变化的，而且每个操作是 $a \gets b$，故可以记录一下开始状态和结果状态，然后并查集维护即可。</p>
<p>测完大样例，不出意外还是一遍过，但是保险起见手搓了几组小样例，然后把某些关键代码删掉跑了一下大样例，发现是错的，那没问题了，便搁置在一边。</p>
<p>现在过了 $1 \text{ h}$。</p>
<p>接下来开 T3，看了一个小时感觉不太可做于是去做 T4，T4 是原神，然后写完线段树之后就可以了，大样例调试了大概 $10 \text{ min}$ 才过，然后还剩 $2 \text{ h}$。</p>
<p>接下来搞 T3，于是 T3 想到了一个做法，快速写完，可能会轻微卡常，大样例都过了，然后就开始着手写对拍。</p>
<p>现在还剩 $1\text{ h}$，中途上过几次厕所，但是都没有看到 CG，******</p>
<p>接下来是愉快的对拍时间，对拍出来第三道题有些问题没有考虑到，改了之后继续拍。</p>
<p>感觉 1、4 题没有问题，那么也因为时间原因就没有写对拍，2、3 题也是成功过拍。</p>
<p>然后最后 $15 \text{ min}$，让监考员开了一下 Linux 系统测了一下会不会 CE，接下来开摆。</p>
<p>考试结束。</p>
<p>然后去准备高考了。。。</p>
<h1 id="Day-1-5"><a href="#Day-1-5" class="headerlink" title="Day-1.5"></a>Day-1.5</h1><p>晚上去查了一下成绩，发现 T3 会有概率 WA 掉，目前 WA 的情况是 $10 \sim 20$ 分，然后我还是劝 CCF 善良，dddd。</p>
<p>T3 有些卡常，熨斗上和洛谷上的 TLE 都有点玄，后面知道这两个平台架构是一样的，3.30 GHz，CCF 是 3.70 GHz，我还是劝 CCF 善良，ddd。</p>
<p>其它三道没啥问题，xt* 的四题数据有些问题，不过后来修了也没有什么大问题了。</p>
<p>值得一说的是我的本机 2.10 GHz 跑 T3 跑了 1.5s，开了 O2，有些玄乎。</p>
<p>现在没发现 T3 有什么问题，打算拍一下。</p>
<h1 id="Day-2"><a href="#Day-2" class="headerlink" title="Day-2"></a>Day-2</h1><p>学文化，没想到啊没想到，gy* 居然和 z* 骂了起来，令人印象最深的是下面一段话：</p>
<blockquote>
<p>z*： 你又不来考试？</p>
</blockquote>
<blockquote>
<p>gy*：我就不来考试。</p>
</blockquote>
<blockquote>
<p>…</p>
</blockquote>
<blockquote>
<p>gy*：你整天就在这里阴阳怪气，是不是有病？！</p>
</blockquote>
<blockquote>
<p>z*：你说谁有病？</p>
</blockquote>
<blockquote>
<p>gy<em>：我说你有病！（刚想拉开门准备离开，被 z</em> 按住了手）</p>
</blockquote>
<blockquote>
<p>z*：今天你不来考试把家长叫过来了才能走</p>
</blockquote>
<blockquote>
<p>gy<em>：我就不考试！（按下了 z</em> 的手摔门而去）</p>
</blockquote>
<p>第二天 z* 来上课的时候发现他好像没什么异常，但是 gy* 没有来上课。</p>
<p>$\color{white}{\text{没了，真的没了，再也没有什么可写的了。}}$</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>NOIP</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello-World</title>
    <url>/9999/12/31/Hello-World/</url>
    <content><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h2><p>这里是 Acoipp（洛谷 uid：674469）的 github 个人博客！</p>
<p>这里存放了 Acoipp 的游记，学习笔记和总结等大部分与 OI 相关的资料，你可以在每一个博客的下方评论，发表自己的见解。</p>
<p>同时，你也可以通过右上角的搜索按钮来精确定位你想要的内容。</p>
<p>我的联系方式为邮箱 <a href="mailto:&#x38;&#55;&#51;&#53;&#x30;&#49;&#x31;&#x35;&#x34;&#x40;&#113;&#113;&#46;&#99;&#111;&#x6d;">&#x38;&#55;&#51;&#53;&#x30;&#49;&#x31;&#x35;&#x34;&#x40;&#113;&#113;&#46;&#99;&#111;&#x6d;</a>，你随时可以向这个邮箱里发送消息。</p>
<p>所有在洛谷博客上的文章（题解除外），都会陆续搬运到此博客中。</p>
<p>希望我们在信息学这条道路上越走越远！</p>
<p>2024-01-07 11:26:25</p>
<p>Acoipp 于重庆</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
  </entry>
  <entry>
    <title>NK集训总结</title>
    <url>/2024/01/07/NK%E9%9B%86%E8%AE%AD%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="NKJK集训总结"><a href="#NKJK集训总结" class="headerlink" title="NKJK集训总结"></a><strong>NKJK集训总结</strong></h1><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a><strong>练习</strong></h2><p>从作业表 $1$ 到作业表 $11$，我发现自己在信竞这方面的水平又提高了不少。</p>
<ul>
<li>以前不会或不能推的数学式子，现在能够行云流水推下去。</li>
<li>以前看到就怕的 CSP-S&#x2F;NOIP&#x2F;省选试题，现在敢于去挑战了。</li>
<li>以前上了 1kb 的代码就会 Bug 百出，现在很少有 Bug，就算有也能很快找到问题。</li>
</ul>
<p>总之，从能力方面来说是一个质的飞跃。</p>
<p>但是这也暴露出了之前的一些不足：</p>
<ul>
<li>DP 能力欠缺，有些 DP （期望）还没有见识&#x2F;了解过。</li>
<li>数学能力不太好，对于模板的公式能推，但是如果是另一个没学过的公式就推不了了。</li>
<li>码量逐渐变大，Bug 也越来越难找，有时候还会因此出现情绪问题。</li>
</ul>
<p>前两个是学习上的，后一个是情绪上的。</p>
<p>我个人认为，稳定情绪是第一位的，但是不知道为什么调不出来代码就感觉不好，其它人经常说要拿得起，放得下，但是信竞在我心中的地位不言而喻，是这么快就能放下的吗？</p>
<p>前两个倒是比较好解决，后面的时间里，我会抓住我的弱点去练习。何老板说过“得DP者得天下”，而数学又是 DP 的基础，所以这是非常重要的。</p>
<h2 id="考试"><a href="#考试" class="headerlink" title="考试"></a><strong>考试</strong></h2><p>考试也是一个难点。</p>
<p>在线考试我觉得比较得心应手，但是离线考试下来就有点吃力了。</p>
<p>先是确定正确性，代码只能交一次，还有注意常数优化（有些电脑的速度很慢），最后就是一些小细节。</p>
<p>这三点中第一点无疑是最恐怖的，如果交多次，我们可以发现哪里错了，但是只能交一次，还是最后交，就让人担心他的代码写得对不对。</p>
<p>还有 OI 赛制的影响，我们是去拿分的，不是去 AC 的，这会导致时间分配不均匀，从而挂分。</p>
<p>总之就是：<strong>稳住心态，稳定发挥，稳住交题。</strong></p>
<h2 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a><strong>比赛</strong></h2><p>比赛其实没什么，跟考试差不多，不过有更多人参加，也没有考试那么正式。</p>
<p>特别是 ABC 和平常信竞老师弄的班上的比赛。</p>
<p>因为是线上的，所以我觉得打得都不错。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a><strong>后记</strong></h2><p>希望能进 JK，而且希望每次考试稳住，不要挂分。</p>
<p>以后一定会拓宽知识面，做题的时候深入理解，不只是 AC 就过了。</p>
<p>综上，I LOVE NK！</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>学期总结</tag>
      </tags>
  </entry>
  <entry>
    <title>THUSC2023游记</title>
    <url>/2024/01/06/THUSC2023%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<p>第一次写游记。。。</p>
<h1 id="Day-4-16"><a href="#Day-4-16" class="headerlink" title="Day-4.16"></a><strong>Day-4.16</strong></h1><p>从老师那里得知 THUSC 与 PKUSC 审核通过的事情，犹豫了一会，趁着家长考虑的间隙过了一道题（，最后选择 THUSC，带队老师是我们教练。</p>
<span id="more"></span>

<h1 id="Day-4-27-4-28"><a href="#Day-4-27-4-28" class="headerlink" title="Day-4.27~4.28"></a><strong>Day-4.27~4.28</strong></h1><p>准备出行等事情，了解了 THUSC 的大致情况（居然有英文论文，对低年级不太友好哦）。然后针对这些弱点开始复习（然而并没有复习英语。</p>
<p>给班主任请了假，预计 5.6~5.7 到南外参加夏令营。</p>
<h1 id="Day-4-29-5-3"><a href="#Day-4-29-5-3" class="headerlink" title="Day-4.29~5.3"></a><strong>Day-4.29~5.3</strong></h1><p>最苦的五天，有三天集训，从早上 8:00 上到晚上 21:00，关键的是，题目大部分还听不懂，低年级主要就是去骗分的。做题的过程中发现 THUSC2021 的题目还算简单，但愿今年也是如此吧。</p>
<p>看了一下洛谷 THUSC 的题目，五紫一黑……</p>
<h1 id="Day-5-4"><a href="#Day-5-4" class="headerlink" title="Day-5.4"></a><strong>Day-5.4</strong></h1><p>上课一天，晚上收拾东西，洗了个澡，定好第二天早上的闹钟，早早地休息了，Good Luck to ME!</p>
<h1 id="Day-5-5"><a href="#Day-5-5" class="headerlink" title="Day-5.5"></a><strong>Day-5.5</strong></h1><p>和我们教练、另一个校区的教练一起打了个车去机场，在机场碰到了同学们（大部分都不认识）。我们就坐飞机去了南京，飞机上听音乐，没想到把电弄完了，只好躺一躺。飞机一会就到了，这是我第一次去南京，感觉跟重庆没什么区别，主要是路两旁有非机动车道，然后林荫小道有些多。</p>
<p>品尝了南京特色——粉丝老鸭汤（似乎不是这个名字？），挺好吃的。下午在酒店收拾好东西，就去南京外国语学院报道。发了一个背包和学生证，包里有卡套、口罩、转盘（BUG调试指南），好像都是清华文创产品，还有一件T-shirt，要求穿上它来比赛，看了看，有清华校徽和计算机学院徽章以及“2023大中衔接活动”的文字。</p>
<p>晚上回来，在一个学长（很强）的带领下，熟悉了Linux的操作以及编译命令，挺复杂的，还装了VMware虚拟机。</p>
<h1 id="Day-5-6"><a href="#Day-5-6" class="headerlink" title="Day-5.6"></a><strong>Day-5.6</strong></h1><p>早早地起了床，去试机，全英文有点不太习惯，其它没什么。</p>
<p>试机完就是拍照，拍照的那位大叔，有点6。</p>
<p>中午回酒店休息了，准备下午的比赛。</p>
<p>下午精神状态堪忧，先是网站爆炸延时45分钟。T1曾经做过简化版，但是考试过程中没想出来。。。T2打暴力，被卡了，大部分分都没拿到，最后网站卡了，把提交语言卡掉了，那几分也没了。T3也是打了暴力，基环树上算就行了，得了十几分，然后T4，没看。。。</p>
<p>一共：$68+0+14+0&#x3D;82$。</p>
<p>朕考试考砸了，朕心要碎了。<del>祖宗把江山交到了朕的手里，</del>（</p>
<h1 id="Day-5-7"><a href="#Day-5-7" class="headerlink" title="Day-5.7"></a><strong>Day-5.7</strong></h1><p>早早地起了床，今天是工程题，美其名曰：造电脑。</p>
<p>昨晚有同学吐了，吐得一地都是，我是他的室友。。。</p>
<p>凌晨才睡觉。</p>
<p>早上状态不错，第五题卡了我很久，题面没看清楚，第六题没有看PPT根本不会，6。</p>
<p>最后：$125$。</p>
<p>一共 $207$，完结撒花吗？下午听了讲座和工程题的题解，最后发了奖项，考得还不错。本来要讲 Day1 题解的，但是时间到了，不得不放弃。</p>
<p>到酒店就开始玩。。。</p>
<h1 id="Day-5-8"><a href="#Day-5-8" class="headerlink" title="Day-5.8"></a><strong>Day-5.8</strong></h1><p>起床比较晚，然后又开始玩，玩到9:00，后面下去吃早饭，打个车去了机场，在机场里面吃了午饭。登机之后又在飞机上吃了一顿。。。最后安全回到重庆，下午回学校上了一节晚自习。</p>
<p>感觉就像做了一场梦。。。</p>
<p>期待下次 Travel！</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>THUSC</tag>
        <tag>清华大学</tag>
        <tag>夏令营</tag>
      </tags>
  </entry>
  <entry>
    <title>二次同余式与平方剩余</title>
    <url>/2024/01/25/%E4%BA%8C%E6%AC%A1%E5%90%8C%E4%BD%99%E5%BC%8F%E4%B8%8E%E5%B9%B3%E6%96%B9%E5%89%A9%E4%BD%99/</url>
    <content><![CDATA[<h1 id="二次同余式与平方剩余"><a href="#二次同余式与平方剩余" class="headerlink" title="二次同余式与平方剩余"></a>二次同余式与平方剩余</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>一般二次同余式是形如 $ax^2+bx+c \equiv 0 \pmod m$ 的方程，需要在 $\log$ 时间内求出方程的解。</p>
<p>接下来我们分类讨论一下这个方程的解法。</p>
<p>首先由中国剩余定理得对于 $m&#x3D;p_1^{c_1}p_2^{c_2}\dots p_k^{c_k}$，如果 $ax^2+bx+c \equiv 0 \pmod {p^k}$ 都有解，那就可以合并出来一组合法的 $x$。</p>
<h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><p>首先我们只需要解决 $ax^2+bx+c \equiv 0 \pmod {p^k}$ 的问题，如果 $p^{\alpha} \le p_k$ 并且 $p^{\alpha} \mid \gcd(a,b,c)$ 那么我们可以得到另外一个方程 $\frac a {p^{\alpha}}x^2+\frac b {p^{\alpha}}x+c \equiv 0 \pmod {p^{k-\alpha}}$，这两个方程完全等价，故问题缩小到了 $p \not\mid \gcd(a,b,c)$ 的问题。</p>
<p>如果 $p \mid a$ 且 $p \mid b$，那么 $p \not\mid c$，所以方程无解。</p>
<p>如果 $p \mid a$ 并且 $p \not\mid b$，那么 $f’(x)&#x3D;2ax+b \equiv 0 \pmod p$ 无解，根据同余式的一些性质，它有解的充分必要条件是 $ax^2+bx+c \equiv 0 \pmod p$ 有解，因为 $\gcd(b,p)&#x3D;1$，所以此方程一定有解。</p>
<p>还有 $p \not\mid a$ 和 $p&#x3D;2$ 的时候的情况，这些情况最终可以归约成 $x^2 \equiv a \pmod {p^k}$ 的情况，具体推导就不展开了，留作以后补充或者复习。</p>
<h2 id="再优化"><a href="#再优化" class="headerlink" title="再优化"></a>再优化</h2><p>因为问题缩小到了 $x^2 \equiv a \pmod {p^k}$，如果 $p^k$ 很大，那么我们可以使用 BSGS 求解。</p>
<p>下面我们假设 $k&#x3D;1$，并且介绍一种 $\log$ 的解法，下面的 $p$ 都是任意奇质数。</p>
<h3 id="Euler-判别法"><a href="#Euler-判别法" class="headerlink" title="Euler 判别法"></a>Euler 判别法</h3><p>如果 $a^{\frac {p-1}2} \equiv 1 \pmod p$，那么 $a$ 在模 $p$ 意义下有二次剩余，否则没有。</p>
<p>先有一个引理：</p>
<blockquote>
<p>如果 $n \le p$，那么方程 $x^n+\sum_{i&#x3D;0}^{n-1} a_ix^i \equiv 0 \pmod p$ 有 $n$ 个解当且仅当存在整系数多项式 $q(x),r(x)(\deg r&lt;n)$ 使得 $x^p-x&#x3D;f(x)q(x)+pr(x)$。</p>
<p>这个引理的证明参见 <a href="https://oi.wiki/math/number-theory/congruence-equation/#%E5%AE%9A%E7%90%86-5">OI-wiki</a>。</p>
</blockquote>
<p>证明如下：</p>
<blockquote>
<p>如果 $\gcd(a,p) \not&#x3D; 1$，那么显然不可能满足上式，也不可能有二次剩余。（$a&#x3D;0$）</p>
<p>否则 $\gcd(a,p)&#x3D;1$，那么由费马小定理得 $a^{p-1} \equiv 1 \pmod p$，那么 $(a^{\frac {p-1}2}-1)(a^{\frac {p-1}2}+1) \equiv 0 \pmod p$。</p>
<p>所以因为 $x^2 \equiv a \pmod p$，所以 $x^{p-1}-a^{\frac {p-1}2}&#x3D;(x^2)^{\frac {p-1}{2}}-a^{\frac {p-1}2}&#x3D;(x^2-a)P(x)$，其中 $P(x)$ 是某整系数多项式，就有：</p>
<ul>
<li>$x^p-x&#x3D;x(x^{p-1}-a^{\frac {p-1}{2}})+x(a^{\frac {p-1}2}-1)&#x3D;(x^2-a)xP(x)+(a^{\frac {p-1}2}-1)x$。</li>
</ul>
<p>由引理得 $a$ 是模 $p$ 的二次剩余当且仅当 $a^{\frac {p-1}2} \equiv 1 \pmod p$，所以 $a$ 是模 $p$ 的非二次剩余当且仅当 $a^{\frac {p-1}{2}} \not \equiv 1 \pmod p$。</p>
</blockquote>
<h3 id="相关定理"><a href="#相关定理" class="headerlink" title="相关定理"></a>相关定理</h3><p>设 $n \not \mid p-1,p \not\mid a$，那么方程 $x^n \equiv a \pmod p$ 有解当且仅当 $a^{\frac {p-1}n} \equiv 1 \pmod p$，且解数为 $n$。</p>
<p>证明如下（很像上面的证明）：</p>
<blockquote>
<p>充分性：</p>
<p>因为 $x^n \equiv a \pmod p$，所以 $x^{p-1}-a^{\frac {p-1}n}&#x3D;(x^n)^{\frac {p-1}{n}}-a^{\frac {p-1}n}&#x3D;(x^n-a)P(x)$，其中 $P(x)$ 是某整系数多项式，就有：</p>
<ul>
<li>$x^p-x&#x3D;x(x^{p-1}-a^{\frac {p-1}{n}})+x(a^{\frac {p-1}n}-1)&#x3D;(x^n-a)xP(x)+(a^{\frac {p-1}n}-1)x$。</li>
</ul>
<p>由引理得 $a$ 是模 $p$ 的 $n$ 次剩余当且仅当 $a^{\frac {p-1}n} \equiv 1 \pmod p$，所以 $a$ 是模 $p$ 的非 $n$ 次剩余当且仅当 $a^{\frac {p-1}{n}} \not \equiv 1 \pmod p$，并且有 $n$ 个解。</p>
<p>必要性：</p>
<p>如果 $x_0$ 是一解，那么 $(x_0^n)^{\frac {p-1}{n}} \equiv 1$，那么 $a^{\frac {p-1}n} \equiv 1$。</p>
</blockquote>
<h3 id="二次剩余的数量"><a href="#二次剩余的数量" class="headerlink" title="二次剩余的数量"></a>二次剩余的数量</h3><p>根据欧拉判别法，我们需要计算 $a^{\frac {p-1}2} \equiv 1 \pmod p$ 的 $a$ 有多少个，由上面的相关定理，所以 $a$ 有 $\frac {p-1}{2}$ 个，并且这几个的恰好与 $1^2,2^2,\dots,({\frac {p-1}{2}})^2$ 中的一个同余，并且形成一个排列的关系。（两两不重复）</p>
<p>证明如下：</p>
<blockquote>
<p>如果 $1 \le k &lt; l \le \frac {p-1}2$，那么说明 $x^2 \equiv k^2$ 有四个解 $x&#x3D;+k,-k+l,-l \pmod p$，与前面的只有两个解相违背，所以此条件成立。</p>
</blockquote>
<h3 id="Cipolla-算法"><a href="#Cipolla-算法" class="headerlink" title="Cipolla 算法"></a>Cipolla 算法</h3><p>为了解决 $x^2 \equiv a \pmod p$ 的问题，我们首先随机一个数 $r$ 满足 $r^2-a$ 为二次非剩余，因为二次剩余和非二次剩余的数量差不多，所以这个 $r$ 可以很快找到。</p>
<p>然后因为不存在 $i$ 使得 $i^2 \equiv r^2-a$，那么就像 $\sqrt{-1}$ 一样扩域，即在模 $p$ 的简化剩余系加一个元素 $i$，新的域中的每个数都可以写成 $a+bi$ 的形式。</p>
<p>同理我们可以定义加法 $A+B&#x3D;(A_a+B_a)+(A_b+B_b)i$，乘法 $AB&#x3D;(A_aB_a+A_bB_bi^2)+(A_aB_b+A_bB_a)i$，同时还有逆元。</p>
<p>引理 $1$：$i^p&#x3D;-i$，证明：$i^p&#x3D;i(i^2)^{\frac {p-1}2}&#x3D;i(r^2-a)^{\frac {p-1}2}&#x3D;-i$。</p>
<p>引理 $2$：$(A+B)^p \equiv A^p+B^p$，考虑使用二项式展开，因为 $p$ 是质数，所以二项式展开之后 $C_p^i$ 中只有 $i&#x3D;0,p$ 的项不包含 $p$ 因子，所以证明显然。</p>
<p>那么 $(a+i)^{p+1} \equiv n$，证明如下：</p>
<blockquote>
<p>$(a+i)^{p+1} \equiv (a^p+i^p)(a+i) \equiv (a-i)(a+i) \equiv a^2-(a^2-n) \equiv n$。</p>
</blockquote>
<p>于是 $(a+i)^{\frac {p+1}{2}}$ 就是一个解，另外一个解就是这个解的相反数，如果这个数的虚部不为 $0$，那么我们就可以拿这个当做答案了。</p>
<p>感性理解一下这个数的虚部确实不为 $0$，当然你也可以用反证法证明一下。</p>
<p>于是代码就很好写了，定义一个复数类即可：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll T,n,p,x,y,ans1,ans2;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">poly</span>&#123;ll a,b;&#125;res,t;</span><br><span class="line">poly <span class="keyword">operator</span>*(poly a,poly b)&#123;<span class="keyword">return</span> (poly)&#123;((a.a*b.a+a.b*b.b%p*((x*x-n)%p))+p)%p,(a.b*b.a+a.a*b.b)%p&#125;;&#125;</span><br><span class="line"><span class="function">ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>%p,t=a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(time(<span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;T;</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		cin&gt;&gt;n&gt;&gt;p;</span><br><span class="line">		n%=p;</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">			cout&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">qmi</span>(n,(p<span class="number">-1</span>)/<span class="number">2</span>,p)==p<span class="number">-1</span>)&#123;</span><br><span class="line">			cout&lt;&lt;<span class="string">&quot;Hola!\n&quot;</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">			x=<span class="built_in">rnd</span>()%p;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">qmi</span>((((x*x-n)%p)+p)%p,(p<span class="number">-1</span>)/<span class="number">2</span>,p)==p<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		res.a = <span class="number">1</span>,res.b = <span class="number">0</span>,t.a = x,t.b = <span class="number">1</span>;</span><br><span class="line">		y = (p+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">while</span>(y)&#123;</span><br><span class="line">			<span class="keyword">if</span>(y&amp;<span class="number">1</span>) res=res*t;</span><br><span class="line">			t=t*t;</span><br><span class="line">			y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ans1 = res.a,ans2 = (p-ans1)%p;</span><br><span class="line">		<span class="keyword">if</span>(ans1==ans2) cout&lt;&lt;ans1&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(ans1&gt;ans2) <span class="built_in">swap</span>(ans1,ans2);</span><br><span class="line">			cout&lt;&lt;ans1&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans2&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>数论</tag>
        <tag>二次剩余</tag>
        <tag>Cipolla</tag>
      </tags>
  </entry>
  <entry>
    <title>博弈论</title>
    <url>/2024/01/07/%E5%8D%9A%E5%BC%88%E8%AE%BA/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>此处的博弈论只研究 ICG（公平组合游戏）和反常游戏中的 ICG，很多棋类游戏都是非公平组合游戏，因为双方只能移动自己的棋子。</p>
<p>一个游戏是 ICG 当且仅当：</p>
<ul>
<li><p>游戏有两个人参与，二者轮流做出决策，双方均知道游戏的完整信息。</p>
</li>
<li><p>有明确的终止态，游戏不会无休止地进行下去。</p>
</li>
<li><p>每一个局面都是先手必胜（N）或者先手必败的局面（P）。</p>
</li>
<li><p>任意时刻双方可以执行的操作集合只与游戏的状态无关，与双方的身份无关。</p>
</li>
</ul>
<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>由第二条定义可得我们可以抽象成一个有向无环图，每个玩家操作一枚棋子往一条出边移动，谁移动不了了就输了。</p>
<p>那么对于没有出边的位置肯定是 P 局面，那么我们考虑倒推所有位置的 N&#x2F;P 状态，从而得知整个游戏是先手必胜还是先手必败。</p>
<ul>
<li><p>如果一个点的出边中有 P 局面，那么这个点是 N 局面。</p>
</li>
<li><p>如果一个点的出边中全是 N 局面，那么这个点是 P 局面。</p>
</li>
</ul>
<p>这两条性质是双向的，并且可以很显然地由 ICG 的定义得到。</p>
<p>小例子，有一堆石子大小为 $n$，你和小 A 每次可以从中取出来 $[1,k]$ 区间中的石子，谁无法取了就失败。</p>
<p>可以发现一个大小为 $n$ 的后继节点是 $[n-k,n-1]$，然后直接打表 SG 值即可，或者构造一种必胜的方案，方案小学生都会就不写了。</p>
<h2 id="相关函数与模型"><a href="#相关函数与模型" class="headerlink" title="相关函数与模型"></a>相关函数与模型</h2><h3 id="Nim-游戏"><a href="#Nim-游戏" class="headerlink" title="Nim 游戏"></a>Nim 游戏</h3><blockquote>
<p>给定 $n$ 堆石子，每堆石子有 $a_i$ 个石子，你和小 A 每次可以从任意一堆石子中选出来至少一个石子扔掉，无法操作的人输，你先手，问最后你和小 A 谁有必胜策略。</p>
</blockquote>
<h4 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h4><p>如果 $ans&#x3D;\operatorname{xor}_{i&#x3D;1}^n a_i&gt;0$ 的话先手一定有必胜策略，否则后手必胜。</p>
<h4 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h4><p>首先，没有后继的状态，即 $a_1&#x3D;a_2&#x3D;\dots&#x3D;a_n&#x3D;0$ 的时候一定先手必败。</p>
<p>然后如果 $k&#x3D;\operatorname{xor}<em>{i&#x3D;1}^n a_i&gt;0$ 的话一定存在一种操作使得 $\operatorname{xor}</em>{i&#x3D;1}^n a_i&#x3D;0$，我们显然可以找到一个 $a_i \operatorname{xor} k &lt; a_i$，然后改成 $a_i \operatorname{xor} k$ 就可以了。</p>
<p>最后需要证明如果 $k&#x3D;\operatorname{xor}<em>{i&#x3D;1}^n a_i&#x3D;0$ 的话不可能存在任何一种操作使得 $k&#x3D;\operatorname{xor}</em>{i&#x3D;1}^n a_i&#x3D;0$，显然成立。</p>
<p>所以结论成立。</p>
<h3 id="SG-函数"><a href="#SG-函数" class="headerlink" title="SG 函数"></a>SG 函数</h3><p>定义集合的 SG 运算为 $\operatorname{mex}{S}$ 表示 $S$ 中最小的没有出现过的自然数，那么 $SG(x) &#x3D; \operatorname{mex}{y_1,y_2,\dots,y_k}$，其中 $y$ 是 $x$ 的后继节点。</p>
<p>如果 $SG(x)&gt;0$，那么代表先手的棋子如果在 $x$ 这个节点先手必胜，否则后手必胜。这个的证明也很显然，参考前面的 ICG 游戏的性质即可。</p>
<p>那么如果我们是多个游戏拼在一起的怎么办呢？</p>
<p>例如我们在有向图游戏上有多个棋子，然后每次可以移动一颗，最后不能移动者失败。</p>
<p>我们发现 $x$ 可以移动到 $SG(y) &lt; SG(x)$ 或者 $SG(y)&gt;SG(x)$ 的节点，如果我们移动到了 $y$ 满足 $SG(y)&gt;SG(x)$，那么后手如果觉察到不优秀，肯定会从 $y$ 移动到 $z$ 满足 $SG(x)&#x3D;SG(z)$，这样的操作是不优秀的。</p>
<p>那么我们只剩下移动到 SG 值比它小的节点，那么这就是一个 Nim 博弈，我们相当于每次可以拿走若干个大于等于 $1$ 小于等于全部的石头，于是直接把所有起点的 SG 值异或起来，然后按照 Nim 博弈的判断标准来判断就行了。</p>
<p><strong>注意：每个局面都可以转化为含有 $SG(x)$ 个石子的 Nim 游戏，如果有多个局面，就相当于 Nim 游戏有多个石堆。</strong></p>
<h3 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h3><ul>
<li><p>如果我们构造了一个模型发现一个石子移动了会影响另外的石堆，那么我们可以对每个石子单独考虑得出结果。</p>
</li>
<li><p>SG 函数不一定是直接取若干个后继节点的 $\operatorname{mex}$，而是有可能每个后继节点又衍生出两个游戏，那么我们要把这两个游戏的 SG 值异或起来再取 $\operatorname{mex}$。</p>
</li>
<li><p>有些 SG 函数十分刁钻，需要打表，并且可能会出现循环节，并且只有几个特殊情况。</p>
</li>
</ul>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>有 $n$ 堆石子，每堆石子有 $a_i$ 个石头，每次可以选择 $i&lt;j \le k$ 且 $a_i&gt;0$，从第 $i$ 堆石头中选择一个石头扔掉，然后给第 $j$ 和 $k$ 堆石头中添加一个石头，最后无法操作的人失败，问先手是否拥有必胜策略。</p>
<p>首先，因为一次操作会影响石堆互相的值，所以考虑对每个石头分开考虑，如果当前石头距离最后一堆石头 $k$ 堆，那么我们可以扔掉它，然后加入两个距离最后一堆石头 $&lt;k$ 的石头，就相当于可以让一个值为 $k$ 的数分裂为两个 $1 \le k_1,k_2&lt;k$ 的数，然后分开考虑，最后异或起来就可以了。</p>
<p>因为 $n$ 只有 $20$，所以 $k$ 也只有 $20$，记忆化搜索打表即可。</p>
<p>题目如果要求输出第一次操作的方案，我们直接暴力 $O(n^3)$ 枚举第一次操作的 $i,j,k$，拿走之后判断是否先手必败即可。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll t,n,a[<span class="number">25</span>],b[<span class="number">25</span>],i,j,k,l,ans,ans1,ans2,ans3,sg[<span class="number">22</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">19</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">35</span>,<span class="number">37</span>,<span class="number">38</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">(ll a[<span class="number">25</span>])</span></span>&#123;</span><br><span class="line">	ll ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]%<span class="number">2</span>==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">		ans^=sg[n-i+<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		cin&gt;&gt;n;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">		ans=<span class="built_in">solve</span>(a);</span><br><span class="line">		<span class="keyword">if</span>(ans==<span class="number">0</span>)&#123;</span><br><span class="line">			cout&lt;&lt;<span class="string">&quot;-1 -1 -1\n0\n&quot;</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ans=<span class="number">0</span>,ans1=ans2=ans3=LLONG_MAX;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(k=j;k&lt;=n;k++)&#123;</span><br><span class="line">					<span class="keyword">for</span>(l=<span class="number">1</span>;l&lt;=n;l++) b[l]=a[l];</span><br><span class="line">					b[i]--,b[j]++,b[k]++;</span><br><span class="line">					<span class="keyword">if</span>(<span class="built_in">solve</span>(b)==<span class="number">0</span>)&#123;</span><br><span class="line">						ans++;</span><br><span class="line">						<span class="keyword">if</span>(i&lt;ans1) ans1=i,ans2=j,ans3=k;</span><br><span class="line">						<span class="keyword">else</span> <span class="keyword">if</span>(i==ans1)&#123;</span><br><span class="line">							<span class="keyword">if</span>(j&lt;ans2) ans2=j,ans3=k;</span><br><span class="line">							<span class="keyword">else</span> <span class="keyword">if</span>(j==ans2)&#123;</span><br><span class="line">								<span class="keyword">if</span>(k&lt;ans3) ans3=k;</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout&lt;&lt;ans1<span class="number">-1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans2<span class="number">-1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans3<span class="number">-1</span>&lt;&lt;endl&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>附：有些题也不需要转化为 Nim 游戏，直接通过题目的性质转化为有向图游戏，然后通过 SG 函数计算即可。（需要去除一些无用状态或者记忆化一下）</p>
<h2 id="取石子游戏"><a href="#取石子游戏" class="headerlink" title="取石子游戏"></a>取石子游戏</h2><p>一维翻硬币问题有一个结论:</p>
<p>局面的 SG 值等于局面中所有反面朝上的硬币单独存在时的 SG 值的异或和。</p>
<p>这个结论同样适用于二维的翻硬币问题。</p>
<h2 id="删边游戏"><a href="#删边游戏" class="headerlink" title="删边游戏"></a>删边游戏</h2><blockquote>
<p>有一幅图，每次操作可以删去图上的一条边，操作结束之后把所有没有与 $root$ 相连的边和点删去，最后无法操作者失败。</p>
</blockquote>
<h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><p>首先对于叶子结点，因为只剩一个节点，所以 SG 值为 $0$。</p>
<p>然后对于某些其它节点 $i$，它的 SG 值经过证明可得 $SG_i &#x3D; \operatorname{xor}_{v \in son_i}{SG_v+1}$.</p>
<p>最后整张图的 SG 值就是 $SG_{root}$。</p>
<h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p>首先需要找出所有的环（边双连通分量），如果一个环内的边数是偶数，那么直接将这个环缩成一个点即可。</p>
<p>否则需要将环缩成一个点还要再新建一个点挂一条边。</p>
<p>然后如果根属于一个环，那新的根就是环缩点的那个点。</p>
<p>容易发现这样操作完成之后是一棵树，于是直接用树删边定理即可，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 300005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; op[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; op2[N],op3[N],ans[N];</span><br><span class="line"><span class="type">int</span> T,n,m,x[N],y[N],i,j,tot,scc,dfn[N],low[N],cut[N],vis[N],edge[N],sg[N],root,id[N],col[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	dfn[x] = low[x] = ++tot;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;op[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!dfn[op[x][i].first])&#123;</span><br><span class="line">			<span class="built_in">tarjan</span>(op[x][i].first,op[x][i].second);</span><br><span class="line">			low[x] = <span class="built_in">min</span>(low[x],low[op[x][i].first]);</span><br><span class="line">			<span class="keyword">if</span>(low[op[x][i].first]&gt;dfn[x]) cut[op[x][i].second] = <span class="number">1</span>; </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(r!=op[x][i].second) low[x] = <span class="built_in">min</span>(low[x],dfn[op[x][i].first]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	vis[x] = <span class="number">1</span>,ans[scc].<span class="built_in">push_back</span>(x),col[x] = scc;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;op2[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">		edge[scc]++;</span><br><span class="line">		<span class="keyword">if</span>(!vis[op2[x][i]]) <span class="built_in">dfs</span>(op2[x][i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;op3[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(op3[x][i]==fa) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve</span>(op3[x][i],x);</span><br><span class="line">		sg[x] ^= (sg[op3[x][i]]+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;T;</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">			cin&gt;&gt;x[i]&gt;&gt;y[i];</span><br><span class="line">			op[x[i]].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(y[i],i)),op[y[i]].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(x[i],i));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(!dfn[i]) <span class="built_in">tarjan</span>(i,<span class="number">-1</span>); </span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!cut[i])&#123;</span><br><span class="line">				op2[x[i]].<span class="built_in">push_back</span>(y[i]);</span><br><span class="line">				op2[y[i]].<span class="built_in">push_back</span>(x[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(!vis[i]) scc++,<span class="built_in">dfs</span>(i),edge[scc]/=<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=scc;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(ans[i].<span class="built_in">size</span>()==<span class="number">1</span>&amp;&amp;edge[i]==<span class="number">0</span>)&#123;</span><br><span class="line">				id[i]=ans[i][<span class="number">0</span>];</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(edge[i]%<span class="number">2</span>==<span class="number">1</span>) id[i]=++n,++n,op3[id[i]].<span class="built_in">push_back</span>(n),op3[n].<span class="built_in">push_back</span>(id[i]);</span><br><span class="line">			<span class="keyword">else</span> id[i]=++n;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(cut[i])&#123;</span><br><span class="line">				op3[id[col[x[i]]]].<span class="built_in">push_back</span>(id[col[y[i]]]);</span><br><span class="line">				op3[id[col[y[i]]]].<span class="built_in">push_back</span>(id[col[x[i]]]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		root = id[col[<span class="number">1</span>]];</span><br><span class="line">		<span class="built_in">solve</span>(root,<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">if</span>(sg[root]) cout&lt;&lt;<span class="string">&quot;Alice\n&quot;</span>;</span><br><span class="line">		<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;Bob\n&quot;</span>;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">2</span>*n;i++) op[i].<span class="built_in">clear</span>(),op2[i].<span class="built_in">clear</span>(),op3[i].<span class="built_in">clear</span>(),ans[i].<span class="built_in">clear</span>(),col[i]=id[i]=edge[i]=vis[i]=sg[i]=low[i]=dfn[i]=<span class="number">0</span>;</span><br><span class="line">		tot=<span class="number">0</span>,scc=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=m;i++) x[i]=y[i]=cut[i]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;                     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反常游戏"><a href="#反常游戏" class="headerlink" title="反常游戏"></a>反常游戏</h2><blockquote>
<p>给定 $n$ 堆石子，每堆石子有 $a_i$ 个石子，你和小 A 每次可以从任意一堆石子中选出来至少一个石子扔掉，取走最后一个石子的人输，你先手，问最后你和小 A 谁有必胜策略。</p>
</blockquote>
<p>设 $k&#x3D;\operatorname{xor}_{i&#x3D;1}^n a_i$。</p>
<p>如果 $a_i$ 有的为 $0$，删去不影响答案。</p>
<p>如果 $a_i$ 全部为 $1$，如果 $n$ 为奇数先手必败，$n$ 为偶数先手必胜。</p>
<p>否则如果 $k&gt;0$ 先手必胜，否则先手必败。</p>
<h3 id="证明-1"><a href="#证明-1" class="headerlink" title="证明"></a>证明</h3><p>第一条结论显然。</p>
<p>第二条结论每次只能拿走一堆石子，所以显然。</p>
<p>第三条结论：</p>
<ul>
<li><p>如果只有一个 $a_i&gt;1$，那么先手必胜，因为先手可以让全部 $a_i$ 为 $1$，并且控制堆数的奇偶性。</p>
</li>
<li><p>有至少两个 $a_i&gt;1$，那么如果 $k&gt;0$ 由 Nim 游戏可得先手可以把 $k$ 转化成 $0$。</p>
</li>
<li><p>若 $k&#x3D;0$，先手可以转化为至少两个 $a_i&gt;1$ 并且 $k&gt;0$ 的情况，那么这么交叉进行最后 $a_i$ 的堆数会逐渐减少，回归最开始的情况。</p>
</li>
<li><p>并且这种情况可以让对方必胜，也可以转化为至少两个 $a_i&gt;1$ 并且 $k&gt;0$ 的局面，并且至少两个 $a_i&gt;1$ 并且 $k&gt;0$ 的局面只能转化为 $k&#x3D;0$ 的局面，所以这种情况先手必胜。</p>
</li>
</ul>
<p>得证。</p>
<h2 id="Nim-k-游戏"><a href="#Nim-k-游戏" class="headerlink" title="Nim-k 游戏"></a>Nim-k 游戏</h2><p>给定 $n$ 堆石子，每堆有 $a_i$ 个石头，每次可以选择 $1 \sim k$ 堆，从每堆中拿走一部分石子，拿走的石子总数必须大于等于 $1$，谁无法操作就失败，问什么情况下先手必胜。</p>
<p>结论：如果存在一位 $j$ 使得 $a_i$ 二进制下第 $j$ 位为 $1$ 的个数 $\ \bmod \ (k+1) \ne 0$，那么先手必胜，否则先手必败。</p>
<p>容易发现，Nim 游戏就是在 $k&#x3D;1$ 的时候的特例。</p>
<h3 id="证明-2"><a href="#证明-2" class="headerlink" title="证明"></a>证明</h3><p>首先如果不存在任何一位 $j$ 满足上述条件，一次操作之后不可能也不存在一位 $j$ 满足上述条件。</p>
<p>如果存在，那就把所有的 $j$ 拿出来，然后因为 $a \bmod (k+1) \le k$，所以一定可以加入到 $k$ 个集合中，于是我们通过 Nim 游戏的证明就可以证出可以通过一次操作使得不存在任何一位 $j$ 满足上述条件。</p>
<p>当所有元素都为 $0$ 时，不存在任何一位 $j$ 满足上述条件，先手必败。</p>
<p>于是一来一回归纳得证。</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>如果是到达一个状态先手必胜，那么我们必须转化为到达某个状态先手必败，然后再用 Nim&#x2F;SG 的相关知识解决。</p>
<p>例题：</p>
<blockquote>
<p>有 $n$ 个棋子，第 $i$ 个棋子在 $(x_i,y_i)$，每次可以移动一颗棋子到 $(x_i-k,y_i),(x_i,y_i-k),(x_i-k,y_i-k)$ 之一（$1 \le k$），$x \ge 0,y \ge 0$，AB互相博弈，A先手，如果某人移动了某颗棋子到 $(0,0)$，此人胜利，问先手是否必胜。</p>
</blockquote>
<p>因为是移动到 $(0,0)$ 就胜利，而且有多颗棋子，我们可以考虑什么情况下面某人必败，来转化。</p>
<p>首先，一个人不会傻到移动棋子到 $(0,k),(k,0),(k,k)$，除非没有地方移动了。</p>
<p>我们就会发现如果有一个棋子位于上面三个位置，先手必胜，特判掉即可。</p>
<p>如果不，那么当且仅当棋子在 $(1,2)$ 或者 $(2,1)$ 的时候一定会移动到上面三个位置之一，这就是终止态，先手必败。</p>
<p>然后按照 SG 函数合并即可，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 305</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll T,n,x,y,ans,i,j,sg[N][N],temp;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">0</span>||y==<span class="number">0</span>||(x==y)) <span class="keyword">return</span> <span class="number">10000</span>;</span><br><span class="line">	<span class="keyword">if</span>(sg[x][y]!=<span class="number">-1</span>) <span class="keyword">return</span> sg[x][y];</span><br><span class="line">	<span class="type">bool</span> vis[<span class="number">1005</span>];</span><br><span class="line">	<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=x;i++)&#123;</span><br><span class="line">		ll temp = <span class="built_in">dfs</span>(x-i,y);</span><br><span class="line">		<span class="keyword">if</span>(temp&lt;=<span class="number">1000</span>) vis[temp]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=y;i++)&#123;</span><br><span class="line">		ll temp = <span class="built_in">dfs</span>(x,y-i);</span><br><span class="line">		<span class="keyword">if</span>(temp&lt;=<span class="number">1000</span>) vis[temp]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=<span class="built_in">min</span>(x,y);i++)&#123;</span><br><span class="line">		ll temp = <span class="built_in">dfs</span>(x-i,y-i);</span><br><span class="line">		<span class="keyword">if</span>(temp&lt;=<span class="number">1000</span>) vis[temp]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;;i++) <span class="keyword">if</span>(!vis[i]) <span class="keyword">return</span> sg[x][y]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">memset</span>(sg,<span class="number">-1</span>,<span class="built_in">sizeof</span>(sg));</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++) <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">100</span>;j++) <span class="built_in">dfs</span>(i,j);</span><br><span class="line">	cin&gt;&gt;T;</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		ans=<span class="number">0</span>,temp=<span class="number">0</span>;</span><br><span class="line">		cin&gt;&gt;n;</span><br><span class="line">		<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">			cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">			<span class="keyword">if</span>(x==<span class="number">0</span>||y==<span class="number">0</span>||(x==y)) temp=<span class="number">1</span>;</span><br><span class="line">			ans^=sg[x][y];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(ans||temp) cout&lt;&lt;<span class="string">&quot;^o^\n&quot;</span>;</span><br><span class="line">		<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;T_T\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>博弈论</tag>
        <tag>SG函数</tag>
      </tags>
  </entry>
  <entry>
    <title>周小结</title>
    <url>/2023/06/08/%E5%91%A8%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h1 id="周小结1-2023-6-5-2023-6-9"><a href="#周小结1-2023-6-5-2023-6-9" class="headerlink" title="周小结1(2023.6.5-2023.6.9)"></a><strong>周小结1(2023.6.5-2023.6.9)</strong></h1><h2 id="题目概要"><a href="#题目概要" class="headerlink" title="题目概要"></a><strong>题目概要</strong></h2><h3 id="Day-1："><a href="#Day-1：" class="headerlink" title="Day-1："></a><strong>Day-1：</strong></h3><h4 id="1、Two-Currencies"><a href="#1、Two-Currencies" class="headerlink" title="1、Two Currencies"></a><strong>1、Two Currencies</strong></h4><p>题目链接：<a href="https://atcoder.jp/contests/abc164/tasks/abc164_e?lang=en">AT_abc164_e</a>。  </p>
<p>分层图最短路便可过。</p>
<h4 id="2、Serval-and-Rooted-Tree"><a href="#2、Serval-and-Rooted-Tree" class="headerlink" title="2、Serval and Rooted Tree"></a><strong>2、Serval and Rooted Tree</strong></h4><p>题目链接：<a href="https://codeforces.com/problemset/problem/1153/D">CF1153D</a>。  </p>
<p>贪心+动态规划便可过。</p>
<h4 id="3、Donation"><a href="#3、Donation" class="headerlink" title="3、Donation"></a><strong>3、Donation</strong></h4><p>题目链接：<a href="https://atcoder.jp/contests/arc098/tasks/arc098_d?lang=en">AT_arc098_d</a>。  </p>
<p>需要发现一些性质，经过每个点 $i$ 后至少得有 $c_i&#x3D;\max  (a_i-b_i,0)$ 的钱，然后，所以对于每一条边 $(u,v)$ 经过它至少得有 $\max(c_u,c_v)$ 的钱。</p>
<p>最后用一下<del>超纲</del>知识 <strong>Kruskal重构树</strong> 维护一个树形 DP 就行了。</p>
<h4 id="4、Colorful-Balls"><a href="#4、Colorful-Balls" class="headerlink" title="4、Colorful Balls"></a><strong>4、Colorful Balls</strong></h4><p>题目链接：<a href="https://atcoder.jp/contests/agc012/tasks/agc012_d?lang=en">AT_arc012_d</a>。  </p>
<p>计数DP一下便可过。</p>
<h4 id="5、已经没有什么好害怕的了"><a href="#5、已经没有什么好害怕的了" class="headerlink" title="5、已经没有什么好害怕的了"></a><strong>5、已经没有什么好害怕的了</strong></h4><p>题目链接：<a href="https://www.luogu.com.cn/problem/P4859">洛谷 P4859</a>。  </p>
<p>主要还是计数DP，但是最后需要用到第二种容斥，即 $ans&#x3D;\sum_{i&#x3D;k}^n (-1)^{i-k} f_i$ 这个公式才能解决。</p>
<h3 id="Day-2："><a href="#Day-2：" class="headerlink" title="Day-2："></a><strong>Day-2：</strong></h3><h4 id="1、Make-M"><a href="#1、Make-M" class="headerlink" title="1、Make M"></a><strong>1、Make M</strong></h4><p>题目链接：<a href="https://atcoder.jp/contests/arc161/tasks/arc161_a?lang=en">AT_arc161_a</a>。  </p>
<p>贪心之后判定一下便可过，但是题目有坑点。</p>
<h4 id="2、Exactly-Three-Bits"><a href="#2、Exactly-Three-Bits" class="headerlink" title="2、Exactly Three Bits"></a><strong>2、Exactly Three Bits</strong></h4><p>题目链接：<a href="https://atcoder.jp/contests/arc161/tasks/arc161_b?lang=en">AT_arc161_b</a>。    </p>
<p>贪心或者动态规划便可过。</p>
<h4 id="3、Dyed-by-Majority-Odd-Tree"><a href="#3、Dyed-by-Majority-Odd-Tree" class="headerlink" title="3、Dyed by Majority (Odd Tree)"></a><strong>3、Dyed by Majority (Odd Tree)</strong></h4><p>题目链接：<a href="https://atcoder.jp/contests/arc161/tasks/arc161_c?lang=en">AT_arc161_c</a>。   </p>
<p>动态规划可以过，但是代码有点麻烦。</p>
<h4 id="4、Everywhere-is-Sparser-than-Whole-Construction"><a href="#4、Everywhere-is-Sparser-than-Whole-Construction" class="headerlink" title="4、Everywhere is Sparser than Whole (Construction)"></a><strong>4、Everywhere is Sparser than Whole (Construction)</strong></h4><p>题目链接：<a href="https://atcoder.jp/contests/arc161/tasks/arc161_d?lang=en">AT_arc161_d</a>。  </p>
<p>简单构造题。</p>
<h4 id="5、棠梨煎雪"><a href="#5、棠梨煎雪" class="headerlink" title="5、棠梨煎雪"></a><strong>5、棠梨煎雪</strong></h4><p>题目链接：<a href="https://www.luogu.com.cn/problem/P5522">洛谷 P5522</a>。  </p>
<p>数据结构（线段树+位运算）便可解决。</p>
<h4 id="6、线段树：关于时间"><a href="#6、线段树：关于时间" class="headerlink" title="6、线段树：关于时间"></a><strong>6、线段树：关于时间</strong></h4><p>题目链接：<a href="https://loj.ac/p/6346">LOJ P6346</a>。</p>
<p>其实很简单，考虑把所有集合里面的运算提到最前面去，统计答案时减去多余的即可（用两棵线段树维护）。</p>
<h4 id="7、Points"><a href="#7、Points" class="headerlink" title="7、Points"></a><strong>7、Points</strong></h4><p>题目链接：<a href="https://codeforces.com/problemset/problem/19/D">CF19D</a>。</p>
<p>线段树+平衡树，但是为了避免双 $\log$，在线段树上二分就可以求出来答案。</p>
<h3 id="Day-3："><a href="#Day-3：" class="headerlink" title="Day-3："></a><strong>Day-3：</strong></h3><h4 id="1、午餐"><a href="#1、午餐" class="headerlink" title="1、午餐"></a><strong>1、午餐</strong></h4><p>题目链接：<a href="https://www.luogu.com.cn/problem/P2577">洛谷 P2577</a>。  </p>
<p>排序后DP便可过。</p>
<h4 id="2、Removing-Coins"><a href="#2、Removing-Coins" class="headerlink" title="2、Removing Coins"></a><strong>2、Removing Coins</strong></h4><p>题目链接：<a href="https://atcoder.jp/contests/agc033/tasks/agc033_c?lang=en">AT_agc033_c</a>。    </p>
<p>求出最长链（每次都会对最长链造成影响），用博弈论式子推一下就可以了。</p>
<h4 id="3、大师"><a href="#3、大师" class="headerlink" title="3、大师"></a><strong>3、大师</strong></h4><p>题目链接：<a href="https://www.luogu.com.cn/problem/P4933">洛谷 P4933</a>。   </p>
<p>只用动态规划便可过。</p>
<h4 id="4、绝世好题"><a href="#4、绝世好题" class="headerlink" title="4、绝世好题"></a><strong>4、绝世好题</strong></h4><p>题目链接：<a href="https://www.luogu.com.cn/problem/P4310">洛谷 P4310</a>。  </p>
<p>简单动态规划题。</p>
<h4 id="5、Median-Pyramid-Hard"><a href="#5、Median-Pyramid-Hard" class="headerlink" title="5、Median Pyramid Hard"></a><strong>5、Median Pyramid Hard</strong></h4><p>题目链接：<a href="https://atcoder.jp/contests/agc006/tasks/agc006_d?lang=en">AT_agc006_d</a>。  </p>
<p>看到中位数，首先想到二分，然后发现题目中的一些性质就可以快速AC了。</p>
<h3 id="Day-4："><a href="#Day-4：" class="headerlink" title="Day-4："></a><strong>Day-4：</strong></h3><h4 id="1、ST-and-TS-Palindrome"><a href="#1、ST-and-TS-Palindrome" class="headerlink" title="1、ST and TS Palindrome"></a><strong>1、ST and TS Palindrome</strong></h4><p>题目链接：<a href="https://atcoder.jp/contests/arc155/tasks/arc155_a?lang=en">AT_arc155_a</a>。  </p>
<p>毒瘤题，但是仔细分析一下AC还是没问题的。</p>
<h4 id="2、Abs-Abs-Function"><a href="#2、Abs-Abs-Function" class="headerlink" title="2、Abs Abs Function"></a><strong>2、Abs Abs Function</strong></h4><p>题目链接：<a href="https://atcoder.jp/contests/arc155/tasks/arc155_b?lang=en">AT_arc155_b</a>。    </p>
<p>数学题，用 $\text{set}$ 维护就可以了。</p>
<h4 id="3、YY-Square"><a href="#3、YY-Square" class="headerlink" title="3、YY Square"></a><strong>3、YY Square</strong></h4><p>题目链接：<a href="https://atcoder.jp/contests/arc157/tasks/arc157_c?lang=en">AT_arc157_c</a>。 </p>
<p>简单动态规划题。</p>
<h4 id="4、Power-Up"><a href="#4、Power-Up" class="headerlink" title="4、Power Up"></a><strong>4、Power Up</strong></h4><p>题目链接：<a href="https://atcoder.jp/contests/arc160/tasks/arc160_c?lang=en">AT_arc160_c</a>。  </p>
<p>简单动态规划题。</p>
<h4 id="5、Median-Pyramid-Hard-1"><a href="#5、Median-Pyramid-Hard-1" class="headerlink" title="5、Median Pyramid Hard"></a><strong>5、Median Pyramid Hard</strong></h4><p>题目链接：<a href="https://atcoder.jp/contests/arc159/tasks/arc159_d?lang=en">AT_arc159_d</a>。  </p>
<p>动态规划，但是要用线段树维护。</p>
<h4 id="6、Even-Sum-Triplet"><a href="#6、Even-Sum-Triplet" class="headerlink" title="6、Even Sum Triplet"></a><strong>6、Even Sum Triplet</strong></h4><p>题目链接：<a href="https://atcoder.jp/contests/arc155/tasks/arc155_c?lang=en">AT_arc155_c</a>。  </p>
<p>要发现题目中的一些性质：</p>
<ul>
<li>如果有三个或多个连续的偶数，那么这些偶数都可以任意交换。</li>
<li>如果有三个连续的数中存在两个奇数，一个偶数，则奇数可以任意交换。</li>
</ul>
<p>抓住这两条性质，这道题就做完了。</p>
<h2 id="其他教训"><a href="#其他教训" class="headerlink" title="其他教训"></a><strong>其他教训</strong></h2><h3 id="Day1-C"><a href="#Day1-C" class="headerlink" title="Day1-C"></a><strong>Day1-C</strong></h3><p>这道题怪就怪在对题目的性质把握得不够，而且 kruskal重构树 也不是那么熟练。性质快要推出来了，但是在一个未经严谨的证明上耗时太久，浪费了很多时间。而且也耽误了后面比这道题稍稍简单一点的 E题 的解决。</p>
<h3 id="Day2-6"><a href="#Day2-6" class="headerlink" title="Day2-6"></a><strong>Day2-6</strong></h3><p>不知道为什么人傻了，这么简单的一道大水题都没做出来，考场上一直在考虑正着分析，却没考虑倒着分析的情况，也是耽误了 G题 的解决。</p>
<h3 id="Day4-6"><a href="#Day4-6" class="headerlink" title="Day4-6"></a><strong>Day4-6</strong></h3><p>这道题也是因为在错误的解法上僵持太久，导致所有其它的方法都没有考虑，进而错失了 AC 的机会。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>1、在一道题上耗费时间太多会影响到后面题目的解决，一定要放下心专心做某道题，才会有更大几率成功。</p>
<p>2、如果一个做法有很大概率有问题，那么不妨尝试一下其它做法，说不定其它做法会更优。</p>
<p>3、做题时不能焦躁，这样子会导致简单的题反而想复杂做不起。</p>
<p>4、还要善于发现题目的性质，数学功底要扎实，最好把题目内容用公式表达出来，这样更加清晰明了。</p>
<p>5、最后，本周总评：85&#x2F;100分。</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>周总结</tag>
      </tags>
  </entry>
  <entry>
    <title>THUWC2024游记</title>
    <url>/2024/01/28/THUWC2024%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="THUWC-2024-游记"><a href="#THUWC-2024-游记" class="headerlink" title="THUWC 2024 游记"></a>THUWC 2024 游记</h1><h2 id="Day-5-1"><a href="#Day-5-1" class="headerlink" title="Day -5~-1"></a>Day -5~-1</h2><p>我们都去报名了 THUWC 和 PKUWC，有一些人通过了，有一些人没有通过，有点遗憾，但是今年 5 月还有机会，通过之后，我们每天都在做 THUSC&#x2F;PKUSC&#x2F;THUWC&#x2F;PKUWC 的题，人都要做不好了。</p>
<p>还有讲题环节，我最好在讲题之前确认知识点我们有没有学过，小的知识点可以现学，但是大的知识点就不行了。（多项式 <del>天气预报</del>）</p>
<p>帅气的 deaf 学长也来给我们讲题了，只不过跟照片上的有些差距（</p>
<p>这几天压力感觉没有那么大，就像初一去考 THUSC 玩一样。</p>
<h2 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h2><p>上午在讲题，就是 deaf 学长，讲的题都很神仙，神仙贪心等等，当然有些完全没学过的多项式奇技淫巧就跳过了。</p>
<p>中午简单吃了个饭，和同学打了一下羽毛球，然后就准备着下午的报道。</p>
<p>下午我们乘坐着学校的大巴车到了重庆巴蜀中学（原四十一中），我是第一次来到巴蜀中学本部，被它的地形震惊到了，居然是一个长条形的，直插入山谷里面，记得鲁能巴蜀都很平整，大巴车一直沿着滨江路在走，我一直以为巴蜀中学是在河对面，没想到跟我们学校在河的同一侧。</p>
<p>车上太抖了，什么都干不了，据说有些人在研究非公平博弈，有人也和我商量着非公平博弈，为后文埋下伏笔。（指 dp</p>
<p>到了之后我们拍了照，领了报到证等东西，但是这次的奖励还很丰厚？去年是一件衬衫和一些小玩意，今年发了一个鼠标，和一个带有大师签名的 AI 普及书，感觉赚了不少。（后面听北大的说他们的礼物很寒碜，还好没去）</p>
<p>然后就是去试机，拿过一等的还不让用学校的电脑，于是我们被强迫带电脑过去，然后在物理实验室进行考试，不懂就问，为什么巴蜀那整栋楼都有一种特殊的香味啊。</p>
<p>测试了一共三道题，一道 A+B，一道构造，一道交互，交互题去年就考过，感觉快做腻了，把 A+B 过了，然后打了 T2 部分分就测试完了，学校急着集合我们走，领了 Linux 系统的安装说明然后就离开了。</p>
<p>离开的时候看着某个人戴了一个黑色的猫耳朵，不知道是谁，也没有胆量上去问。</p>
<p>其他人是在地下室考场或者和我们在同一栋楼不过是在计算机教室，地下室考场居然没有分教室，那敲键盘的声音可谓是群魔乱舞吧。</p>
<p>到达集合地点之后发现一堆人玩非公平博弈被教练抓了，但是我并不太觉得这个行为有什么过错，没事，不该我们操心的事就不要去管他，或许这跟玩游戏的性质一样吧，很多人说他是错的他就是错的，却拿不出什么能够说服的理由来。</p>
<p>晚上回寝室早早地睡了个觉，明天要早起去打车去巴蜀。</p>
<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>6:00 就起床了，然后抓紧时间洗漱，吃饭，带好一切东西去校门口和教练会面打车去巴蜀。</p>
<p>到了巴蜀中学没有想象中的人山人海，因为实在是太早了，我们到一个小餐馆去吃了顿饭（教练和另外一个同学没吃），顺便还把电脑调试好了。（虚拟机和录屏软件）</p>
<p>最后就是进考场了，途中除了本校的同学，认不得一个人，考场还是有那种特殊的香味。</p>
<p>好，调试好录屏软件开始考试了，首先看 T1，哇，线性规划，网络流怼上去，然后怼了一个小时没有怼出来结果。。。</p>
<p>感觉 T1 怕是调不出来了，打了前三个 Sub 的暴力，就去开 T3，甚至连 $2 \times 2$ 的矩阵我都做了 10 来分钟，不知道脑子怎么想的。</p>
<p>然后第二个 Sub 倍增解决嘛，第三个 Sub 想到了四分，然后用树状数组剪了一下枝就拿到了一共 75 分，还好，不打算继续优化了，这个时候应该是 2 个小时。</p>
<p>接下来是第 2 题，第 2 题首先可以 $n^3$ 优化矩阵转移，轻松通过了很多个 Sub，然后有一个 $n^2$ 但是 $m&#x3D;1$ 的点，找了一下规律，发现可以差分预处理前面 $i \to j$ 的转移，然后又过了一个 Sub，这个时候又发现矩阵的 $i,j$ 对于 $j-i$ 相同的是固定的，于是矩阵转移就变成了 $O(n^2)$ 的，但是开 <code>long long</code> 跑不过去，改成 <code>int</code> 就过了，成功拿到了 $90$ 分，这个时候定睛一看是多项式相乘，但是我不会 NTT，剩下 $10$ 分就没拿到。</p>
<p>最后看第 4 题，第 4 题第一个 Sub 暴力模拟就可以了，第二个 Sub 感觉可做，离线下来维护最小生成树就可以了，调到了比赛还剩 $20$ 分钟终于调出来了。</p>
<p>后面两个 Sub 猜得到是 LCT 维护最小生成树，但是我不会 LCT，也只能作罢。</p>
<p>最后 $10$ 分钟，灵光乍现，A 题可以直接枚举子集，于是快速写了一个 $O(3^nm)$ 的做法，不出意外 $90$ 分，比赛也结束了。</p>
<p>赛后交流了一下做法，发现 A 题把枚举子集拿到外面去可以获得 $O(3^n+2^nm)$ 的做法就可以 AC，C 题因为数据水（不过有 Sys Test），只访问右下角的矩形可以获得 $96$ 分，如果先访问右半矩形，按照第一个 Sub 来做可以得 $100$ 分，不过是错的，赛后被应该被卡到了 $24$ 分。</p>
<p>B 题 Eznibuil 拿到了 100 分，%%%。</p>
<p>然后集合去吃饭，饭 25 元，因为去的时间晚了，导致没吃到多的，只有两个菜了。。。并且那个啥连我们重庆人都觉得好辣，不知道外地人如何评价，吃完饭去集合地点玩了 surf，然后就去拍照了。</p>
<p>拍照仍然很枯燥，不过有音乐打消，还挺好的，反正这待遇去年是没有，没什么好说的。</p>
<p>不过提问环节有人直接开始问第二天的工程题是不是人工智能（</p>
<p>听讲座那些太枯燥了，我们直接在电脑上写了一个 dp 的程序 dp，只不过电脑耗电比较快，很快就没电了，没 dp 几局就关机了。</p>
<p>晚上回学校，在乡村基吃完饭后看到了 recollect_i 和 Judgelight，他们是去的 P，问了一下情况，考得还不错（至少在同一年级相比），P 的大众分是 $100+11+40&#x3D;151$，比 T 这边要难许多。</p>
<p>晚自习只有我们三个上，其它人都回去了，于是就开始搞毫（，他们在卷题，我在准备明天工程题的 Linux 系统还有录屏软件。</p>
<p>仍然早早睡了觉，明天是 8:00 集合，故可以睡久一点。</p>
<h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><p>自己打车吃饭去巴蜀中学，情况同第一天差不多，有人来得更早，我不说是谁。</p>
<p>道了别，去各自的考场迎接今年的工程题轰炸，果然还是跟人工智能相关，四子棋，我爱死你了。</p>
<p>汲取了去年没有看 ppt 的教训，今年直接开始看 ppt，然后在本机用 Linux 系统测试了一下，测试大概花费了 $1$ 个小时，我对 Linux 的系统操作还不是很熟悉，主要是以为 <code>.so</code> 文件可以运行，实际上只是一个普通的后缀名。。。</p>
<p>ppt 说有极大极小算法，$\alpha-\beta$ 剪枝，还有什么什么树，我感觉不太好理解，于是自己写了一个特判的代码，就是能绝杀一定绝杀，否则不能让对手绝杀自己。</p>
<p>然后完全没有注意到 $2$ 是自己，$1$ 是下发程序，调了 $1$ 个小时，连 $4.so$ 都打不过，交上去 TLE 了，发现是输出太多了，没删除调试语句，删了之后过了 $1.so,3.so$。</p>
<p>于是转去写那个啥啥树，那个还比较好些，稍微卡了一下时间（后面两个小时的主要操作内容），然后把十次机会用完了，得到了 $100+90+80+50+30$ 的好成绩。。。</p>
<p>很遗憾，两天加起来 $291+350&#x3D;641$，第一天如果拿到 $10$ 分的话，分数也会好看一些，第二天如果写了 $\alpha-\beta$ 剪枝，据说可以拿到 $400$ 分，没事，过去就过去了，没什么好说的，争取下次还按这样的分值总分的话，拿到 $700$ 吧。</p>
<p>比赛结束后据说很多人没有看 ppt 自己写，大部分没有写出来什么，但是 naoliaok_lovely 写的暴搜得到了 $320$，%%%。</p>
<p>这个就没有 Sys test 了，还好。</p>
<p>下午是讲座，讲座上蚌埠住了，那句话我仍然记忆犹新：“你好，我是洛谷的题解审核志愿者……” 好好好</p>
<p>后面就是发纸，我们拿过的因为视频还没有接受审核，还拿不到奖状，所以只有等教练的消息，而我们学校的也是一些人欢喜，一些人忧愁，但是还是祝贺一下 Xseventh 和 naoliaok_lovely。</p>
<p>最后集合解散的时候看到一个人身上别了很多洛谷知名人物的徽章，十分羡慕，但是很无奈没有手机无法确认身份，这是今年最大的一个遗憾。</p>
<p>总之，过去就过去了，下次得想办法让今年的遗憾不在下次比赛中继续产生，尽管如此，我仍然期待着 THUSC 或者 PKUSC 的赛场！</p>
<p>以下是附录：</p>
<h1 id="Day-1-题面"><a href="#Day-1-题面" class="headerlink" title="Day-1 题面"></a>Day-1 题面</h1><h2 id="t1-—-小-R-的项目"><a href="#t1-—-小-R-的项目" class="headerlink" title="t1 — 小 R 的项目"></a>t1 — 小 R 的项目</h2><p><strong>时间限制：</strong> 1.0 秒</p>
<p><strong>空间限制：</strong> 1024 MiB</p>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>小 R 有一个项目，这个项目由 $n$ 项任务构成。由于时间紧迫，他需要请一些同学协助他完成。</p>
<p>小 R 有 $m$ 位同学，请第 $i$ 位同学协助的费用为 $c_i$。不同的同学完成同一项任务的效果可能不同，具体来说，请第 $i$ 位同学完成第 $j$ 项任务的收益为 $a_{i,j}$。</p>
<p>小 R 可以请若干名同学协助他完成这个项目。对于每项任务，小 R 会从他请来的同学中选出收益<strong>最高</strong>的一位来完成。具体来说，他的总收入将以如下方式计算：</p>
<ul>
<li>每项任务的收益为：所有他请的同学完成该项任务的收益的最大值；</li>
<li>小 R 的总收入为：所有任务的收益之和，减去每位他请的同学的费用。</li>
</ul>
<p>注意，小 R 请一位同学的费用与这位同学最终完成的任务数<strong>无关</strong>，他请来的每位同学都可以完成零项或大于一项任务，但是费用<strong>只计入答案一次</strong>。</p>
<p>特别地，如果小 R 没有请任何同学，他的总收入为 $0$。</p>
<p>你需要帮助小 R 求出他能获得的最大总收入。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>从标准输入读入数据。</p>
<p>输入的第一行包含两个正整数 $n,m$。</p>
<p>接下来 $m$ 行，第 $i$ 行包含 $n$ 个正整数 $a_{i,1},a_{i,2},\dots,a_{i,n}$。</p>
<p>接下来一行包含 $m$ 个正整数 $c_1,c_2,\dots,c_m$。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出到标准输出。</p>
<p>输出共一行，包含一个非负整数，分别表示小 R 能获得的最大总收入。</p>
<h3 id="样例-1-输入"><a href="#样例-1-输入" class="headerlink" title="样例 1 输入"></a>样例 1 输入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 3</span><br><span class="line">2 1 4</span><br><span class="line">1 4 2</span><br><span class="line">4 2 1</span><br><span class="line">3 3 3</span><br></pre></td></tr></table></figure>

<h3 id="样例-1-输出"><a href="#样例-1-输出" class="headerlink" title="样例 1 输出"></a>样例 1 输出</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<h3 id="样例-1-解释"><a href="#样例-1-解释" class="headerlink" title="样例 1 解释"></a>样例 1 解释</h3><p>小 R 能获得的最大总收入是 $4$，共有以下 $6$ 种方式使他获得最大总收入：</p>
<ul>
<li>请第 $1$ 位同学，总收入为 $2+1+4-3&#x3D;4$；</li>
<li>请第 $2$ 位同学，总收入为 $1+4+2-3&#x3D;4$；</li>
<li>请第 $3$ 位同学，总收入为 $4+2+1-3&#x3D;4$；</li>
<li>请第 $1,2$ 位同学，总收入为 $\max⁡(2,1)+\max⁡(1,4)+\max⁡(4,2)-3-3&#x3D;4$；</li>
<li>请第 $1,3$ 位同学，总收入为 $\max⁡(2,4)+\max⁡(1,2)+\max⁡(4,1)-3-3&#x3D;4$；</li>
<li>请第 $2,3$ 位同学，总收入为 $\max⁡(1,4)+\max⁡(4,2)+\max⁡(2,1)-3-3&#x3D;4$。</li>
</ul>
<h3 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 2"></a>样例 2</h3><p>见题目目录下的 <em>2.in</em> 与 <em>2.ans</em>。</p>
<p>该样例满足子任务 1 的限制。</p>
<h3 id="样例-3"><a href="#样例-3" class="headerlink" title="样例 3"></a>样例 3</h3><p>见题目目录下的 <em>3.in</em> 与 <em>3.ans</em>。</p>
<p>该样例满足子任务 5 的限制。</p>
<h3 id="子任务"><a href="#子任务" class="headerlink" title="子任务"></a>子任务</h3><p>对于所有测试数据，满足 $1 \le n \le 15$，$1 \le m \le 3000$，$1 \le c_i,a_{i,j} \le 100$。</p>
<table>
<thead>
<tr>
<th align="center">子任务编号</th>
<th align="center">分值</th>
<th align="center">$n \le $</th>
<th align="center">$m \le$</th>
<th align="center">特殊性质</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">$21$</td>
<td align="center">$15$</td>
<td align="center">$16$</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">$24$</td>
<td align="center">$4$</td>
<td align="center">$50$</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">$13$</td>
<td align="center">$15$</td>
<td align="center">$3000$</td>
<td align="center">保证 $c_{i,j}&#x3D;1$ 或 $c_{i,j}&#x3D;50$</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">$32$</td>
<td align="center">$10$</td>
<td align="center">$3000$</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">$10$</td>
<td align="center">$15$</td>
<td align="center">$3000$</td>
<td align="center">无</td>
</tr>
</tbody></table>
<hr>
<h2 id="t2-—-小-R-的序列"><a href="#t2-—-小-R-的序列" class="headerlink" title="t2 — 小 R 的序列"></a>t2 — 小 R 的序列</h2><p><strong>时间限制：</strong> 2.0 秒</p>
<p><strong>空间限制：</strong> 1024 MiB</p>
<h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>小 R 有一个长度为 $n$ 的非负整数环状序列 $a_0,a_1,\dots,a_{n-1}$。</p>
<p>小 C 将小 R 的序列拿去做了 $m$ 次操作。小 R 并不知道这些操作是什么，但他知道小 C 会随机选择一段环上的区间，并将区间内的所有数随机打乱。</p>
<p>具体而言，小 C 的每次操作按照如下过程进行：</p>
<ol>
<li>在 $[0,n)$ 中等概率随机选择一个非负整数 $p$，在 $[1,n]$ 中等概率随机选择一个正整数 $l$；</li>
<li>将 $a_p,a_{(p+1) \bmod n},\dots,a_{(p+l-1)\bmod n}$ 随机打乱，即在 $0 \sim l-1$ 的所有排列中等概率随机选择排列 $q_0,q_1,\dots,q_{l-1}$，然后将 $a_p,a_{(p+1) \bmod n},\dots,a_{(p+l-1)\bmod n}$ <strong>同时</strong>替换为 $a_{(p+q_0) \bmod n},a_{(p+q_1) \bmod n},\dots,a_{(p+q_{l-1}) \bmod n}$。</li>
</ol>
<p>小 R 想知道小 C 进行 $m$ 次操作后序列上每个位置的数的期望，你只需要告诉他期望对 $998244353$ 取模后的结果。</p>
<h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p>从标准输入读入数据。</p>
<p>输入的第一行包含两个正整数 $n,m$。</p>
<p>输入的第二行包含 $n$ 个非负整数 $a_0,a_1,\dots,a_{n-1}$。</p>
<h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出到标准输出。</p>
<p>输出共一行，包含 $n$ 个非负整数，用空格隔开，分别表示 $m$ 次操作后序列上每个位置的数的期望。</p>
<h3 id="样例-1-输入-1"><a href="#样例-1-输入-1" class="headerlink" title="样例 1 输入"></a>样例 1 输入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 1</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure>

<h3 id="样例-1-输出-1"><a href="#样例-1-输出-1" class="headerlink" title="样例 1 输出"></a>样例 1 输出</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">499122178 2 499122179</span><br></pre></td></tr></table></figure>

<h3 id="样例-1-解释-1"><a href="#样例-1-解释-1" class="headerlink" title="样例 1 解释"></a>样例 1 解释</h3><p>在这个样例中，小 C 进行了一次操作：</p>
<ul>
<li>若 $l&#x3D;1$，得到 ${1,2,3}$；</li>
<li>若 $l&#x3D;2$，有 $\frac 12$ 的概率得到 ${1,2,3}$，各 $\frac 16$ 的概率得到 ${2,1,3},{1,3,2},{3,2,1}$；</li>
<li>若 $l&#x3D;3$，等概率得到 ${1,2,3}$ 的所有排列中的一个。</li>
</ul>
<p>最终每个位置的期望如下：</p>
<ul>
<li>$a_0$ 的期望为 $\frac 13 \times 1+\frac 1 3 \times(\frac 12 \times 1+\frac 16×(2+1+3))+\frac 13\times \frac 16 \times (1+1+2+2+3+3)&#x3D;\frac 32$；</li>
<li>$a_1$ 的期望为 $\frac 13 \times 2+\frac 13\times (\frac 12\times2+\frac 16\times(1+3+2))+\frac13\times \frac 16\times(1+1+2+2+3+3)&#x3D;2$；</li>
<li>$a_2$ 的期望为 $\frac 13 \times 3+\frac 13\times(\frac 12\times 3+\frac 16\times (3+2+1))+\frac 13\times \frac 16 \times(1+1+2+2+3+3)&#x3D;\frac 52$；</li>
</ul>
<h3 id="样例-2-1"><a href="#样例-2-1" class="headerlink" title="样例 2"></a>样例 2</h3><p>见题目目录下的 <em>2.in</em> 与 <em>2.ans</em>。</p>
<p>该样例满足子任务 3 的限制。</p>
<h3 id="样例-3-1"><a href="#样例-3-1" class="headerlink" title="样例 3"></a>样例 3</h3><p>见题目目录下的 <em>3.in</em> 与 <em>3.ans</em>。</p>
<p>该样例满足子任务 5 的限制。</p>
<h3 id="样例-4"><a href="#样例-4" class="headerlink" title="样例 4"></a>样例 4</h3><p>见题目目录下的 <em>4.in</em> 与 <em>4.ans</em>。</p>
<p>该样例满足子任务 9 的限制。</p>
<h3 id="子任务-1"><a href="#子任务-1" class="headerlink" title="子任务"></a>子任务</h3><p>对于所有测试数据，满足 $2 \le n \le 131072$，$1 \le m \le 10^9$，$0 \le a_i &lt; 998244353$。</p>
<table>
<thead>
<tr>
<th align="center">子任务编号</th>
<th align="center">分值</th>
<th align="center">$n&#x3D;$</th>
<th align="center">$m \le$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">$3$</td>
<td align="center">$2$</td>
<td align="center">$1$</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">$9$</td>
<td align="center">$2$</td>
<td align="center">$10^9$</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">$14$</td>
<td align="center">$8$</td>
<td align="center">$1$</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">$8$</td>
<td align="center">$128$</td>
<td align="center">$1$</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">$15$</td>
<td align="center">$128$</td>
<td align="center">$10$</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">$9$</td>
<td align="center">$128$</td>
<td align="center">$10^9$</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">$12$</td>
<td align="center">$2048$</td>
<td align="center">$1$</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">$20$</td>
<td align="center">$2048$</td>
<td align="center">$10^9$</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">$6$</td>
<td align="center">$16384$</td>
<td align="center">$10^9$</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">$4$</td>
<td align="center">$131072$</td>
<td align="center">$10^9$</td>
</tr>
</tbody></table>
<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p><strong>期望</strong>：对于离散型随机变量 $x$，其期望 $E[x]$ 定义为以概率为权，$x$ 所有可能取值的加权平均数，即<br>$$<br>E[x]&#x3D;\sum_{k}Pr[x&#x3D;k] \cdot k<br>$$<br>其中 $Pr[x&#x3D;k]$ 表示 $x$ 取值为 $k$ 的概率。</p>
<h2 id="t3-—-小-C-的矩阵"><a href="#t3-—-小-C-的矩阵" class="headerlink" title="t3 — 小 C 的矩阵"></a>t3 — 小 C 的矩阵</h2><p><strong>时间限制：</strong> 1.0 秒</p>
<p><strong>空间限制：</strong> 1024 MiB</p>
<p><strong>这是一道交互题。</strong></p>
<h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>小 C 有一个 $n \times m$ 的 01 矩阵 $A$，他想让小 R 猜一猜，矩阵中最接近 $(n,m)$ 的 $1$ 在哪里。形式化地说，他想让小 R 猜出满足 $A_{i,j}&#x3D;1$ 的最大的 $i+j$。小 C 保证了他的矩阵里至少有一个 $1$。</p>
<p>小 C 允许小 R 询问他一个子矩形内是否有 $1$。每次询问小 R 可以选定 $1 \le u \le d \le n,1 \le l \le r \le m$，小 C 将会告诉他 $\sum_{i&#x3D;u}^d \sum_{j&#x3D;l}^r A_{i,j}$ 是否非零。</p>
<p>小 C 不希望小 R 问他太多个问题，也不希望小 R 询问的子矩形过大。他决定统计小 R 询问的次数（记作 $c_1$），以及小 R 所有询问的 $\max(d-u+1,r-l+1)$ 之和（记作 $c_2$）。</p>
<p>你需要帮助小 R 问出满足 $A_{i,j}&#x3D;1$ 的最大的 $i+j$，同时保证 $c_1,c_2$ 不超过小 C 的限制。当然，只要你的询问次数不超过 $10^6$，小 C 都会根据 $c_1,c_2$ 给出一部分的分数。如果你的询问次数超过 $10^6$，小 C 将会拒绝你之后的询问并直接判定你回答错误。</p>
<h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h3><p>你不需要，也不应该实现主函数，你只需要实现如下函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int Find (int n, int m, int id);</span><br></pre></td></tr></table></figure>

<ul>
<li>$n,m$ 的含义如【题目描述】中所示，$id$ 表示该测试点所属的子任务编号。特别地，样例的子任务编号为 $0$。</li>
<li>你需要返回一个正整数表示满足 $A_{i,j}$ 的最大的 $i+j$。</li>
</ul>
<p>你可以通过调用以下函数来和交互库进行交互：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int Ask (int u, int d, int l, int r);</span><br></pre></td></tr></table></figure>

<ul>
<li>$u,d,l,r$ 的含义如【题目描述】中所示，你需要保证 $1 \le u \le d \le n$，$1 \le l \le r \le m$。</li>
<li>该函数返回一个非负整数 $0$ 或 $1$，返回值为 $0$ 代表该子矩形中没有 $1$，返回值为 $1$ 代表该子矩形中有 $1$。</li>
</ul>
<p>评测时，交互库会恰好调用 <code>Find</code> 一次。</p>
<p>本题保证所使用的矩阵在交互开始之前已经完全确定，不会根据和你的程序的交互过程动态构造，因此题目中的交互操作都是确定性的，你不需要关心这些操作在交互库中的具体实现。</p>
<p>数据保证在调用次数限制下，交互库运行所需的时间不超过 0.1 s；交互库使用的内存大小固定，且不超过 80 MB。</p>
<h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><p>该题目录下已经提供了一个 <code>sample_matrix.cpp</code>，请将这个文件拷贝一份，重命名为 <code>matrix.cpp</code>，然后在其基础上答题。</p>
<p>请确保你的程序开头有 <code>#include &quot;matrix.h&quot;</code>。</p>
<p>你需要在本题目录下使用如下命令编译得到可执行程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">g++ -o matrix matrix.cpp grader.cpp matrix.h -static -O2 -std=c++17</span><br></pre></td></tr></table></figure>

<p>对于编译得到的可执行程序：</p>
<ul>
<li>可执行文件将从标准输入读入以下格式的数据：<ul>
<li>输入的第一行包含三个正整数 $n,m,id$，含义如【题目描述】与【实现细节】中所示；</li>
<li>接下来 $n$ 行，每行包含一个长度为 $m$ 的 01 串，表示 $A_{i,1},A_{i,2},\dots,A_{i,m}$。</li>
</ul>
</li>
<li>读入完成之后，交互库将调用恰好一次函数 <code>Find</code>，用输入的数据测试你的函数。你的函数正确返回后，交互库会判断你的计算是否正确，若正确则会输出 <code>Correct.</code> 和评分参数 $c_1,c_2$，否则会输出相应的错误信息。</li>
</ul>
<p>试题目录下的 <code>grader.cpp</code> 是我们提供的交互库参考实现，<strong>最终测试时所用的交互库实现与该参考实现有所不同，因此选手的解法不应该依赖交互库实现。</strong></p>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 3 0</span><br><span class="line">010</span><br><span class="line">001</span><br><span class="line">100</span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Correct.</span><br><span class="line">C_1 = 3, C_2 = 4.</span><br></pre></td></tr></table></figure>

<h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h3><p>以下是一种可能的交互过程：</p>
<table>
<thead>
<tr>
<th align="center">选手程序</th>
<th align="center">交互库</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td align="center">调用 <code>Find(3, 3, 0)</code></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">调用 <code>Ask(2, 3, 2, 3)</code></td>
<td align="center">返回 1</td>
<td align="center">$A_{2,2}+A_{2,3}+A_{3,2}+A_{3,3}&#x3D;1 &gt; 0$</td>
</tr>
<tr>
<td align="center">调用 <code>Ask(3, 3, 3, 3)</code></td>
<td align="center">返回 0</td>
<td align="center">$A_{3,3}&#x3D;0$</td>
</tr>
<tr>
<td align="center">调用 <code>Ask(2, 2, 2, 2)</code></td>
<td align="center">返回 0</td>
<td align="center">$A_{2,2}&#x3D;0$</td>
</tr>
<tr>
<td align="center">返回 5</td>
<td align="center">输出 <code>Correct.</code></td>
<td align="center">$A_{2,3}&#x3D;1,2+3&#x3D;5$</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">输出 <code>C_1 = 3, C_2 = 4.</code></td>
<td align="center">评分参数 $c_1&#x3D;3,c_2&#x3D;4$</td>
</tr>
</tbody></table>
<h3 id="子任务-2"><a href="#子任务-2" class="headerlink" title="子任务"></a>子任务</h3><table>
<thead>
<tr>
<th align="center">子任务编号</th>
<th align="center">分值</th>
<th align="center">$n&#x3D;$</th>
<th align="center">$m&#x3D;$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">$4$</td>
<td align="center">$2$</td>
<td align="center">$2$</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">$20$</td>
<td align="center">$1$</td>
<td align="center">$4096$</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">$76$</td>
<td align="center">$4096$</td>
<td align="center">$4096$</td>
</tr>
</tbody></table>
<h3 id="评分方式"><a href="#评分方式" class="headerlink" title="评分方式"></a>评分方式</h3><p>对于每个子任务，该子任务得分为其中所有测试点得分的最小值。</p>
<p>对于所有测试点，若询问不符合要求或 $c_1 &gt; 10^6$ 或答案不正确，得 $0$ 分。否则，将根据该测试点所属的子任务编号，按照评分参数 $c_1,c_2$ 分别给出分数 $s_1,s_2$，该测试点的最终得分为 $s_1+s_2$。</p>
<p>对于第一个子任务，$s_1,s_2$ 的计算方式如下：</p>
<table>
<thead>
<tr>
<th align="center">$c_1 \in$</th>
<th align="center">$s_1&#x3D;$</th>
<th align="center">$c_2 \in$</th>
<th align="center">$s_2&#x3D;$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$(3,+ \infty)$</td>
<td align="center">$0$</td>
<td align="center">$(4,+\infty)$</td>
<td align="center">$0$</td>
</tr>
<tr>
<td align="center">$(2,3]$</td>
<td align="center">$1$</td>
<td align="center">$(3,4]$</td>
<td align="center">$1$</td>
</tr>
<tr>
<td align="center">$[0,2]$</td>
<td align="center">$2$</td>
<td align="center">$[0,3]$</td>
<td align="center">$2$</td>
</tr>
</tbody></table>
<p>对于第二个子任务，$s_1,s_2$ 的计算方式如下：</p>
<table>
<thead>
<tr>
<th align="center">$c_1 \in$</th>
<th align="center">$s_1&#x3D;$</th>
<th align="center">$c_2 \in$</th>
<th align="center">$s_2&#x3D;$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$(4096,+\infty)$</td>
<td align="center">$0$</td>
<td align="center">$(10^6,+\infty)$</td>
<td align="center">$0$</td>
</tr>
<tr>
<td align="center">$(2048,4096]$</td>
<td align="center">$2$</td>
<td align="center">$(10^5,10^6]$</td>
<td align="center">$1$</td>
</tr>
<tr>
<td align="center">$(1024,2048]$</td>
<td align="center">$3$</td>
<td align="center">$(5\times 10^4,10^5]$</td>
<td align="center">$2$</td>
</tr>
<tr>
<td align="center">$(160,1024]$</td>
<td align="center">$4$</td>
<td align="center">$(2\times 10^4,5\times10^4]$</td>
<td align="center">$3$</td>
</tr>
<tr>
<td align="center">$(80,160]$</td>
<td align="center">$5$</td>
<td align="center">$(10^4,2 \times 10^4]$</td>
<td align="center">$5$</td>
</tr>
<tr>
<td align="center">$(16,80]$</td>
<td align="center">$6$</td>
<td align="center">$(8192,10^4]$</td>
<td align="center">$7$</td>
</tr>
<tr>
<td align="center">$(13,16]$</td>
<td align="center">$7$</td>
<td align="center">$(6144,8192]$</td>
<td align="center">$8$</td>
</tr>
<tr>
<td align="center">$(12,13]$</td>
<td align="center">$8$</td>
<td align="center">$(4096,6144]$</td>
<td align="center">$9$</td>
</tr>
<tr>
<td align="center">$[0,12]$</td>
<td align="center">$10$</td>
<td align="center">$[0,4096$]</td>
<td align="center">$10$</td>
</tr>
</tbody></table>
<p>对于第三个子任务，$s_1,s_2$ 的计算方式如下：</p>
<table>
<thead>
<tr>
<th align="center">$c_1 \in$</th>
<th align="center">$s_1&#x3D;$</th>
<th align="center">$c_2 \in$</th>
<th align="center">$s_2&#x3D;$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$(10^6,+\infty)$</td>
<td align="center">$0$</td>
<td align="center">$(10^9,+\infty)$</td>
<td align="center">$0$</td>
</tr>
<tr>
<td align="center">$(6\times 10^5,10^6]$</td>
<td align="center">$4$</td>
<td align="center">$(4 \times 10^7,10^9]$</td>
<td align="center">$3$</td>
</tr>
<tr>
<td align="center">$(3 \times 10^5,6 \times 10^5]$</td>
<td align="center">$6$</td>
<td align="center">$(1.7 \times10^7,4 \times 10^7]$</td>
<td align="center">$5$</td>
</tr>
<tr>
<td align="center">$(10^5,3 \times 10^5]$</td>
<td align="center">$7$</td>
<td align="center">$(2\times 10^6,1.7 \times 10^7]$</td>
<td align="center">$7$</td>
</tr>
<tr>
<td align="center">$(5 \times 10^4,10^5]$</td>
<td align="center">$9$</td>
<td align="center">$(10^6,2 \times 10^6]$</td>
<td align="center">$25$</td>
</tr>
<tr>
<td align="center">$(3.5\times10^4,5 \times 10^4]$</td>
<td align="center">$10$</td>
<td align="center">$(3 \times 10^5,10^6]$</td>
<td align="center">$29$</td>
</tr>
<tr>
<td align="center">$(2\times 10^4,3.5\times 10^4]$</td>
<td align="center">$13$</td>
<td align="center">$(2 \times 10^5,3 \times 10^5]$</td>
<td align="center">$31$</td>
</tr>
<tr>
<td align="center">$(1.3 \times 10^4,2 \times 10^4]$</td>
<td align="center">$15$</td>
<td align="center">$(10^5,2 \times 10^5]$</td>
<td align="center">$36$</td>
</tr>
<tr>
<td align="center">$(8300,1.3 \times 10^4]$</td>
<td align="center">$17$</td>
<td align="center">$(8 \times 10^4,10^5]$</td>
<td align="center">$46$</td>
</tr>
<tr>
<td align="center">$(8192,8300]$</td>
<td align="center">$19$</td>
<td align="center">$(7.4 \times 10^4,8 \times 10^4]$</td>
<td align="center">$50$</td>
</tr>
<tr>
<td align="center">$[0,8192]$</td>
<td align="center">$20$</td>
<td align="center">$[0,7.4 \times 10^4]$</td>
<td align="center">$56$</td>
</tr>
</tbody></table>
<h2 id="t4-—-小-C-的连廊"><a href="#t4-—-小-C-的连廊" class="headerlink" title="t4 — 小 C 的连廊"></a>t4 — 小 C 的连廊</h2><p><strong>时间限制：</strong> 2.0 秒</p>
<p><strong>空间限制：</strong> 1024 MiB</p>
<h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>小 C 有一块 $n \times m$ 的网格状草坪。由于风雨会使在草坪上行动不便，他计划在草坪上修建一些连廊。</p>
<p>这块草坪上的风向是固定的，而风速可以看做一个<strong>非负整数</strong> $c$。对于风速 $c$，位于 $(x,y)$ 处的草坪可以经过当且仅当 $(x,y),(x,y+1),\dots,(x+y+c)$ 都已经修建了连廊。<strong>注意，当 $c&#x3D;0$ 时，位于 $(x,y)$ 处的草坪可以经过也需要 $(x,y)$ 已经修建了连廊。</strong></p>
<p>小 C 每次移动能从一块可经过的草坪移动到一条边相邻的另一块可经过草坪，即两块草坪能相互抵达当且仅当这两块草坪属于同一个可以经过的草坪构成的四连通块。</p>
<p>小 C 共有 $q$ 个计划，每个计划为以下两种之一：</p>
<ol>
<li>修建计划：修建一条 $(x,y_l)$ 到 $(x,y_r)$ 的连廊，即在 $(x,y_l),(x,y_l+1),\dots,(x,y_r)$ 处的草坪上修建连廊。</li>
<li>出行计划：他想从 $(x_1,y_1)$ 处的草坪走到 $(x_2,y_2)$ 处的草坪。请你帮助他求出最大的非负整数 $c$，使得风速为 $c$ 时这两块草坪能够相互抵达；或者报告无论如何都无法互相抵达。</li>
</ol>
<h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><p>从标准输入读入数据。</p>
<p>输入的第一行包含三个正整数 $q,n,m$。</p>
<p>接下来 $q$ 行，每行包含若干个正整数，表示一个计划：</p>
<ul>
<li>输入的第一个正整数 $o$ 描述这个计划的类型。保证 $o \in {1,2}$。</li>
<li>若 $o&#x3D;1$，接下来给出三个正整数 $x,y_l,y_r$，表示一个修建计划；</li>
<li>若 $o&#x3D;2$，接下来给出四个正整数 $x_1,y_1,x_2,y_2$，表示一个出行计划。</li>
</ul>
<h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出到标准输出。</p>
<p>对于每一个出行计划，输出一行一个整数，表示满足这两块草坪能够相互抵达的最大的风速 $c$。特别地，如果两块草坪无论风速如何都不能够相互抵达，输出 $-1$。</p>
<h3 id="样例-1-输入-2"><a href="#样例-1-输入-2" class="headerlink" title="样例 1 输入"></a>样例 1 输入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6 3 10</span><br><span class="line">1 1 4 10</span><br><span class="line">1 2 1 4</span><br><span class="line">2 1 4 2 1</span><br><span class="line">1 3 2 9</span><br><span class="line">1 2 6 10</span><br><span class="line">2 1 4 2 1</span><br></pre></td></tr></table></figure>

<h3 id="样例-1-输出-2"><a href="#样例-1-输出-2" class="headerlink" title="样例 1 输出"></a>样例 1 输出</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h3 id="样例-1-解释-2"><a href="#样例-1-解释-2" class="headerlink" title="样例 1 解释"></a>样例 1 解释</h3><p>第一个出行计划中，当风速为 $0$ 时，小 C 可以沿 $(1,4)-(2,4)-(2,3)-(2,2)-(2,1)$ 的路径相互抵达；当风速大于 $0$ 时，$(2,4)$ 无法经过。</p>
<p>第二个出行计划中，当风速为 $2$ 时，小 C 可以沿 $(1,4)-(1,5)-(1,6)-(2,6)-(3,6)-(3,5)-(3,4)-(3,3)-(3,2)-(2,2)-(2,1)$ 的路径相互抵达；当风速大于 $2$ 时，$(2,2)$ 无法经过。</p>
<h3 id="样例-2-2"><a href="#样例-2-2" class="headerlink" title="样例 2"></a>样例 2</h3><p>见题目目录下的 <em>2.in</em> 与 <em>2.ans</em>。</p>
<p>该样例满足子任务 1 的限制。</p>
<h3 id="样例-3-2"><a href="#样例-3-2" class="headerlink" title="样例 3"></a>样例 3</h3><p>见题目目录下的 <em>3.in</em> 与 <em>3.ans</em>。</p>
<p>该样例满足子任务 4 的限制。</p>
<h3 id="子任务-3"><a href="#子任务-3" class="headerlink" title="子任务"></a>子任务</h3><p>对于所有测试数据，满足 $1 \le n \le 10^5$，$1 \le m \le 10^9$，$1 \le q \le 3 \times 10^5$，$1 \le x,x_1,x_2 \le n$，$1 \le y_1,y_2,y_l,y_r \le m$，$y_l \le y_r$。保证修建计划的个数不超过 $10^5$，保证出行计划中 $(x_1,y_1),(x_2,y_2)$ 处的草坪均已修建连廊，保证 $(x_1,y_1) \ne (x_2,y_2)$。</p>
<table>
<thead>
<tr>
<th align="center">子任务编号</th>
<th align="center">分值</th>
<th align="center">限制</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">$15$</td>
<td align="center">$n \le 30$，$m,q \le 100$</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">$21$</td>
<td align="center">保证所有的出行计划在修建计划之后</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">$30$</td>
<td align="center">保证任意两个修建计划所修建的连廊不相连</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">$34$</td>
<td align="center">无</td>
</tr>
</tbody></table>
<p>两个修建计划所修建的连廊 $(x,y_l,y_r),(x’,y_l’,y_r’)$ 不相连当且仅当 $x \ne x’$ 或 $y_r+1&lt;y_l’$ 或 $y_r’+1 &lt;y_l$。</p>
<h1 id="Day-2-文件"><a href="#Day-2-文件" class="headerlink" title="Day-2 文件"></a>Day-2 文件</h1><p><a href="/text/t1.zip">here</a></p>
<h1 id="合影"><a href="#合影" class="headerlink" title="合影"></a>合影</h1><p><img src="/img/THUWC2024.jpg"></p>
<p><img src="/img/PKUWC2024.jpg"></p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>清华大学</tag>
        <tag>THUWC</tag>
        <tag>冬令营</tag>
      </tags>
  </entry>
  <entry>
    <title>四大离线算法笔记</title>
    <url>/2024/01/07/%E5%9B%9B%E5%A4%A7%E7%A6%BB%E7%BA%BF%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="四大离线算法"><a href="#四大离线算法" class="headerlink" title="四大离线算法"></a>四大离线算法</h1><ul>
<li>莫队（略）<ul>
<li>普通莫队</li>
<li>带修改莫队</li>
<li>回滚莫队</li>
<li>树上莫队</li>
</ul>
</li>
<li>线段树分治（略）</li>
<li>CDQ 分治（基于时间的整体二分算法）</li>
<li>整体二分（基于值域的整体二分算法）</li>
</ul>
<h1 id="CDQ-分治"><a href="#CDQ-分治" class="headerlink" title="CDQ 分治"></a>CDQ 分治</h1><p>简单来说，即为对于时间进行分治。</p>
<p>对于某段操作序列 $[l,r]$，分裂成 $[l,mid]$ 和 $[mid+1,r]$，分别执行分治，最后考虑 $[l,mid]$ 中的修改操作对 $[mid+1,r]$ 中的查询操作的影响。</p>
<p>对于每一个 $i$ 号，查询操作，容易证明，在它前面的修改操作都统计到了它的答案里面。</p>
<p>例 1：<a href="https://www.luogu.com.cn/problem/P4169">[Violet] 天使玩偶&#x2F;SJY摆棋子</a></p>
<p>很显然，如果暴力计算对于每个询问的贡献的话，枚举在它前面加入集合的坐标，然后计算 $|x_1-x_2|+|y_1-y_2|$ 的最小值就行了，注意到最小值是可以合并起来计算的，即不会相互影响，那么我们就可以用 CDQ 分治优化。</p>
<p>对于每个区间 $[l,r]$，先分裂，再递归，最后合并。</p>
<p>主要处理合并的问题，左边的修改可以对右边造成影响，且为了保证时间复杂度，这里的查询必须是 $O(\log)$ 级别的，这样的话整体时间复杂度才能是 $O(\log^2)$ 级别。</p>
<p>很显然，两边分别按 $x$ 排序，然后假设当前算某个询问点左下角距离它最近的点的答案，那么要求 $x_{add} \le x_{que}$ 且 $y_{add} \le y_{que}$。</p>
<p>然后用树状数组维护 $y$ 轴就可以了。</p>
<p>一共跑 $4$ 遍，但是写得好的话可以减少很多时间复杂度。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(ll l,ll r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line">	ll mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">solve</span>(l,mid),<span class="built_in">solve</span>(mid+<span class="number">1</span>,r);   <span class="comment">//递归 </span></span><br><span class="line">	<span class="comment">//处理 </span></span><br><span class="line">	<span class="comment">//清空数据结构 </span></span><br><span class="line">	<span class="built_in">merge</span>(p+l,p+mid+<span class="number">1</span>,p+mid+<span class="number">1</span>,p+r+<span class="number">1</span>,temp+l,cmp);  <span class="comment">//合并（此处也可以直接排序，特别是左右部分关键字不同的情况）</span></span><br><span class="line">	<span class="keyword">for</span>(ll i=l;i&lt;=r;i++) p[i]=temp[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于普通的 CDQ 分治，核心代码就这样。</p>
<p>例 2：</p>
<blockquote>
<p>给定 $n$ 个三维空间中的点，对于每个点 $i$，找到 $j$ 使得 $x_j &lt;x_i,y_j &lt; y_i,z_j&lt;z_i$ 的数量。（$1 \le n \le 10^5,1 \le x_i,y_i,z_i \le 10^9$）</p>
</blockquote>
<p>还是像上面的问题一样，将每个点看做一次询问加一次修改，注意到如果我们按点的 $x$ 轴大小顺序去加点的话是不会对答案产生影响的，因此我们先按 $x$ 从小到大排序，然后用 CDQ 分治处理 $[l,mid]$ 对 $[mid+1,r]$ 的答案。</p>
<p>很容易发现所有位于 $[l,mid]$ 的点的 $x$ 总是小于等于 $[mid+1,r]$ 的点，那么我们仍然按 $y$ 坐标合并上来，然后<strong>双指针</strong>维护 $z$ 坐标的大小关系就可以了。</p>
<p>例 3：<a href="https://www.luogu.com.cn/problem/P4093">[HEOI2016&#x2F;TJOI2016] 序列</a></p>
<p>设 $b_i$ 表示 $a_i$ 的最小可能值，$c_i$ 表示 $a_i$ 的最大可能值，那么 $i,j$ 可以连接起来当且仅当 $i&lt;j,c_i \le a_j,a_i \le b_j$。</p>
<p>这又是一个类似于上面问题的“偏序”问题，那么还是像上面一样处理答案，不过这次我们要先递归 $[l,mid]$，然后处理 $[l,mid]$ 对于 $[mid+1,r]$ 的贡献，最后递归 $[mid+1,r]$。</p>
<p>原因是因为 DP 的顺序是从小到大的，因此 CDQ 的顺序也得从小到大来计算，当然统计方案一般不存在这种问题，所以两种写法都是可以的。</p>
<p>总结一下：</p>
<ul>
<li>CDQ 用于处理左边的贡献可以合并且仅对于右边的询问产生影响的问题。</li>
<li>CDQ 也用于求解一些偏序问题。</li>
<li>CDQ 实际上是遍历一棵线段树，前序、中序和后序三种遍历方式需要视问题的不同而处理。</li>
</ul>
<p>（CDQ 分治也可以用来动态维护凸包，即优化斜率优化 DP，当然这种情况一般能被李超线段树代替，时间空间均差不了多少）</p>
<h1 id="整体二分"><a href="#整体二分" class="headerlink" title="整体二分"></a>整体二分</h1><p>简单来说，即为对值域进行分治求解。</p>
<p>假设我们知道了某些的询问的答案在 $[l,r]$ 内，而且可以通过 $O(\log)$ 的判定每个询问的答案在 $[l,mid]$ 还是在 $[mid+1,r]$ 内，那么可以在 $O(n \log^2 n)$ 的时间复杂度内求解每个询问。</p>
<p>一些条件：</p>
<ul>
<li>询问具有可二分性。</li>
<li>询问次数和数据的大小级别相当。</li>
</ul>
<p>时间复杂度：每个询问最多被遍历 $\log$ 次，每次需要 $O(\log)$ 的时间判定，即 $O(\log^2)$ 级别。</p>
<p>例 1：</p>
<blockquote>
<p>查询某个区间第 $k$ 小的数，没有修改，要求 $O(n \log^2 n)$ 内的时间，空间 $O(n)$。</p>
</blockquote>
<p>很明显每个询问具有可二分性，那么我们可以整体二分。</p>
<p>假设答案小于等于 $mid$，那么把 $a$ 序列中的所有小于等于 $mid$ 且大于等于 $l$ 的数都设为 $1$，那么如果询问区间内的 $1$ 的个数大于等于 $k$，那么这个询问的答案就在 $[l,mid]$ 内，否则在 $[mid+1,r]$ 内。</p>
<p>注意：如果这个询问被划到了 $[mid+1,r]$ 区间，那么 $k$ 要减去当前区间 $1$ 的个数，即去掉 $[1,mid]$ 内的数。</p>
<p>例 2：<a href="https://www.luogu.com.cn/problem/P4602">[CTSC2018] 混合果汁</a></p>
<p>判定就很简单了，用线段树上二分即可，此处不啰嗦。</p>
<p>类似于 CDQ 分治的第三道题目，我们在整体二分的时候需要先判定，然后处理在 $[l,mid]$ 里面的询问，然后清空，最后再处理 $[mid+1,r]$ 里面的询问。</p>
<p>至于为什么要这么做，因为每次判定必须用到 $[mid+1,n]$ 里面的信息，而我们不可能每次判定都循环 $mid+1 \sim n$，只能从前面的判定获取有用信息，$k$ 小值也可以用这种方法。</p>
<p>这样的话时间复杂度依然是 $O(n \log^2 n)$。</p>
<p>例 3：<a href="https://www.luogu.com.cn/problem/CF868F">Yet Another Minimization Problem</a></p>
<p>四边形不等式：</p>
<p>$$<br>w(a,c)+w(b,d) \le w(a,d)+w(b,c)<br>$$</p>
<p>我们可以简记为：交叉小于包含。</p>
<p>如果对于某个 dp 转移形如这种形式：</p>
<p>$$<br>f_r &#x3D; \max{f_l+\operatorname{value}(l,r)}<br>$$</p>
<p>如果 $\operatorname{value}$ 满足四边形不等式，那么 $f$ 函数满足决策单调性。</p>
<p>这里讲解 $f$ 函数是分阶段得到的，才能满足可用整体二分求解，否则需要用单调队列，后面再说。</p>
<p>整体二分求解很简单，$\operatorname{solve}(l,r,s,t)$ 表示 $f_l \sim f_r$ 的决策点一定位于 $s \sim t$ 中，然后每次找到 $mid &#x3D; \dfrac{l+r}{2}$ 的决策点进行递归，层数一共有 $n$ 层，每层遍历 $s \sim t$，故时间复杂度为 $n \log n$。</p>
<p>注意，每层仅可遍历 $l \sim r$ 和 $s \sim t$，不可遍历其它内容，除非时间复杂度确定，不然的话无法保证 $\log$ 级别的消耗。（类似于遍历 $l \sim t$）</p>
<p>最后转移即可。</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>离线算法</tag>
        <tag>莫队</tag>
        <tag>线段树分治</tag>
        <tag>CDQ 分治</tag>
        <tag>整体二分</tag>
      </tags>
  </entry>
  <entry>
    <title>图论学习笔记1</title>
    <url>/2024/01/07/%E5%9B%BE%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<p>以下均不会过多介绍算法，主要介绍的是做题的思维。</p>
<hr>
<p>PART-1</p>
<h1 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a><strong>最小生成树</strong></h1><p>最小生成树主要用于解决使用最小边权和的边连接后让图连通。</p>
<p><strong>如果有负权边，则视题目意思而定。</strong></p>
<h2 id="1、普通使用"><a href="#1、普通使用" class="headerlink" title="1、普通使用"></a><strong>1、普通使用</strong></h2><p>例题：</p>
<p>在一个 $n \times m$ 的矩形区域内，外围边界存在围墙，每个 $1 \times 1$ 的正方形区域内也存在对角线方向的一堵墙，墙的方向有两种，如下图所示：</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/hsp3uqod.png"></p>
<p>对角线方向的墙可以破坏，不同的墙破坏的代价不同。</p>
<p>支付最少的代价破坏墙，使得整个区域连通。</p>
<p>$1 \le n,m \le 500,1 \le w_{i,j} \le 5\times 10^3$。</p>
<p>很显然，每个 $1 \times 1$ 的小方格都分成了两个部分，这样我们把图建出来，然后对于有墙阻碍的边边权就是 $w$，否则边权为 $0$，一共 $n \times m$ 级别的边，所以用 Kruskal 就可以了。</p>
<h2 id="2、配合倍增"><a href="#2、配合倍增" class="headerlink" title="2、配合倍增"></a><strong>2、配合倍增</strong></h2><p><a href="https://www.luogu.com.cn/problem/P4180">P4180 [BJWC2010] 严格次小生成树</a></p>
<p>每次考虑用一条非最小生成树上的边替换最小生成树上的边，为确保次小，肯定是替换能替换的边权最大的边。</p>
<p>观察到非树边能够替换的边是树上两点间的路径，所以 $O(\log n)$ 用倍增或 $O(\log^2 n)$ 用树链剖分。</p>
<p>还有其它类似的题，套路都一样。</p>
<h2 id="3、其它"><a href="#3、其它" class="headerlink" title="3、其它"></a><strong>3、其它</strong></h2><p>例题1：</p>
<p>求一个包含 $n$ 个点 $m$ 条边的仙人掌的 $k$ 小生成树。</p>
<p>显然，每个环上选一条边，非环边全选，所以变成了一个 $k$ 路归并问题，可以做到 $O(nk \log k) \sim O(k \log k)$ 的时间复杂度。</p>
<p>例题2：*神仙题</p>
<p>Alice 和 Bob 在由 $n$ 个点 $m$ 条边构成的无向连通图上进行游戏。</p>
<p>对于一条连接节点 $x_i$ 与 $y_i$ 的边，其边权的可选项只有 $a_i$ 或 $b_i$ 。</p>
<p>游戏首先由 Alice 选择恰好 $k$ 条边，使其边权选择 $a_i$，而剩下的 $m-k$ 条边的边权选择 $b_i$。然后再由 Bob 选择恰好 $n-1$ 条边，构成原图的一棵生成树。最终的得分为 Bob 选择的生成树的边权之和。</p>
<p>Alice 想让得分尽量大，而 Bob 想让得分尽量小。在双方都按最佳策略行动时，最终的得分为多少？请你分别计算 $k&#x3D;0\sim m$ 时的答案。</p>
<p>$1 \le n \le 9,1 \le m \le 30,1 \le T \le 20$，不含重边和自环。</p>
<p>对于 $m$ 不好维护，考虑对 $n$ 进行处理。</p>
<p>由题得 Bob 其实就是求最小生成树，别无选择，真正有选择权的是 Alice。</p>
<p>考虑 Kruskal 的执行过程，对边排序之后能选就选。</p>
<p>那么我们在这道题中把 $a_i$ 和 $b_i$ 拆开排序，然后对于每个决策点设 $dp_{i,j,S}$ 表示枚举到了第 $i$ 条边，选了 $j$ 条 $a_i$ 的边（相同顶点的边一定不会重复选，所以不用担心计算重复），<strong>当前并查集的状态为 $S$</strong> 时候最小生成树最大是多少。</p>
<p>记录了并查集的状态后，本题就很好做了，因为 $Bell_9$ 大概在 $2 \times 10^4 \sim 3\times 10^4$ 之间，所以时间空间都不是问题。</p>
<hr>
<h1 id="最小树形图"><a href="#最小树形图" class="headerlink" title="最小树形图"></a>最小树形图</h1><p>给定 $n$ 个点 $m$ 条边的有向图，求出其边权和最小的一个子图，满足其是一棵外向树（所有边都是父亲指向儿子）。</p>
<p>下面有两种算法解决这个问题，但它们无一例外都无法较好地解决输出方案的问题，输出方案需要扩展过程中缩的环，并且一般不会被用到，这里就不再赘述了。</p>
<h2 id="朱刘算法-Tarjan-的优化"><a href="#朱刘算法-Tarjan-的优化" class="headerlink" title="朱刘算法 &amp; Tarjan 的优化"></a>朱刘算法 &amp; Tarjan 的优化</h2><p>下面先给出普通的朱刘算法的简介，即在 $O(nm)$ 的时间内求出这个问题的答案。</p>
<p>设根节点为 $r$，则在初始的时候维护一个栈，设栈顶是 $s_t$，栈底是 $s_1$，那么就相当于维护了 $s_t \to s_{t-1},s_{t-1} \to s_{t-2},\dots,s_2\to s_1$ 这一条链。</p>
<p>每次找到栈顶 $s_t$，以及指向它的一条边权最短的边 $u \to s_t$，如果 $u \in s_{1 \sim t}$，设 $u&#x3D;s_p$，那么 $s_p,s_{p+1},\dots,s_t$ 形成了一个环，我们把这个环缩成一个点即可；否则直接将 $s_{t+1} \gets u$ 即可。</p>
<p>最后为了确保图的连通性，我们可以将 $1 \to 2,2 \to 3,\dots,n \to 1$ 连向 $\text{inf}$ 的边，这样的话如果最终的答案 $\ge \text{inf}$，那么就代表不存在任何一棵最小树形图。</p>
<p>接下来我们需要考虑边权的问题，OI-wiki 上写得太简略了，这里补充一下，证明倒可以参考一下 OI-wiki。</p>
<p>首先找到了 $u$，如果 $u \not\in s$，那么直接加入，此处不统计边权；如果 $u$ 和某些点形成了环，那么我们需要加上这个环所有边的边权，并且把这个环缩点，设 $E_u$ 表示以 $u$ 为终点的边的集合，那么相当于答案加上所有 $id \in s_{p \sim t},\min_{i \in E_{id}}{val_i}$。</p>
<p>因为后面答案可能会反悔，也就是不选这条边，设 $\min_{i \in E_{id}}{val_i}$ 为 $Emin_{u}$，那么我们需要将 $Emin_u$ 从 $E_u$ 中删去，并且支持反悔，就将 $E_u$​ 内剩下边的权值减去我们选出来的边的权值就可以了。</p>
<p>合并和全部减一个树，还要找最小值，于是我们直接使用左偏树即可。</p>
<p><strong>特别的，如果 $u$ 与根节点（合并）在同一个集合，那么答案不能累加上 $Emin_u$，因为根节点是没有入边的。</strong></p>
<p><strong>注意：尽管链的方向是向内的，但是我们强制规定了根节点没有入边，其它节点都有入边，所以这棵树实际上是向外扩展的，如果我们真的要求内向树，那么把边反向即可。</strong></p>
<p>代码如下，以 <a href="https://www.luogu.com.cn/problem/P4716">P4716 【模板】最小树形图</a> 为例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 500005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 100000000000000ll</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;ll id,x,tag;&#125;p[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;ll cnt,x,tag;&#125;tr[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">vector&lt;ll&gt; op[N],w[N];</span><br><span class="line">ll n,m,q,sums,a[N],i,x,y,z,ls[N],rs[N],dist[N],root[N],tot,lis[N],top,aroot,fath[N],toped[N],dfn[N],nid[N],tot_dfn,vis[N],idd,sum[N],son[N],f[N];</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">gf</span><span class="params">(ll x)</span></span>&#123;<span class="keyword">return</span> x==f[x]?x:f[x]=<span class="built_in">gf</span>(f[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag_heap</span><span class="params">(ll id,ll c)</span></span>&#123;<span class="keyword">if</span>(id) p[id].x+=c,p[id].tag+=c;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown_heap</span><span class="params">(ll id)</span></span>&#123;<span class="built_in">pushtag_heap</span>(ls[id],p[id].tag),<span class="built_in">pushtag_heap</span>(rs[id],p[id].tag),p[id].tag=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">merge</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">	<span class="built_in">pushdown_heap</span>(x),<span class="built_in">pushdown_heap</span>(y);</span><br><span class="line">	<span class="keyword">if</span>(p[x].x&gt;p[y].x) <span class="built_in">swap</span>(x,y);</span><br><span class="line">	rs[x]=<span class="built_in">merge</span>(rs[x],y);</span><br><span class="line">	<span class="keyword">if</span>(dist[ls[x]]&lt;dist[rs[x]]||(dist[ls[x]]==dist[rs[x]]&amp;&amp;ls[x]&gt;rs[x])) <span class="built_in">swap</span>(ls[x],rs[x]);</span><br><span class="line">	dist[x]=dist[rs[x]]+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pop</span><span class="params">(ll p)</span></span>&#123;<span class="built_in">pushdown_heap</span>(root[p]),root[p] = <span class="built_in">merge</span>(ls[root[p]],rs[root[p]]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">	tr[p].cnt = <span class="built_in">min</span>(tr[<span class="number">2</span>*p].cnt,tr[<span class="number">2</span>*p+<span class="number">1</span>].cnt),tr[p].x = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(tr[<span class="number">2</span>*p].cnt==tr[p].cnt) tr[p].x+=tr[<span class="number">2</span>*p].x;</span><br><span class="line">	<span class="keyword">if</span>(tr[<span class="number">2</span>*p+<span class="number">1</span>].cnt==tr[p].cnt) tr[p].x+=tr[<span class="number">2</span>*p+<span class="number">1</span>].x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(ll p,ll c)</span></span>&#123;tr[p].cnt+=c,tr[p].tag+=c;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(ll p)</span></span>&#123;<span class="keyword">if</span>(tr[p].tag) <span class="built_in">pushtag</span>(<span class="number">2</span>*p,tr[p].tag),<span class="built_in">pushtag</span>(<span class="number">2</span>*p+<span class="number">1</span>,tr[p].tag),tr[p].tag=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(ll s,ll t,ll p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(s==t)&#123;</span><br><span class="line">		tr[p].x = a[nid[s]];</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">build</span>(s,(s+t)/<span class="number">2</span>,<span class="number">2</span>*p),<span class="built_in">build</span>((s+t)/<span class="number">2</span>+<span class="number">1</span>,t,<span class="number">2</span>*p+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">modify</span><span class="params">(ll l,ll r,ll c,ll s,ll t,ll p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=s&amp;&amp;t&lt;=r) <span class="keyword">return</span> <span class="built_in">pushtag</span>(p,c);</span><br><span class="line">	<span class="built_in">pushdown</span>(p);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>&lt;=(s+t)/<span class="number">2</span>) <span class="built_in">modify</span>(l,r,c,s,(s+t)/<span class="number">2</span>,<span class="number">2</span>*p);</span><br><span class="line">	<span class="keyword">if</span>(r&gt;(s+t)/<span class="number">2</span>) <span class="built_in">modify</span>(l,r,c,(s+t)/<span class="number">2</span>+<span class="number">1</span>,t,<span class="number">2</span>*p+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">pushup</span>(p);</span><br><span class="line"><span class="comment">//	cout&lt;&lt;tr[p].cnt&lt;&lt;&quot; &quot;&lt;&lt;tr[p].x&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">to_root</span><span class="params">(ll p,ll c)</span></span>&#123;<span class="keyword">while</span>(p) <span class="built_in">modify</span>(dfn[toped[p]],dfn[p],c,<span class="number">1</span>,tot_dfn,<span class="number">1</span>),p=fath[toped[p]];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs1</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	sum[x]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;op[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(op[x][i]==fath[x]) <span class="keyword">continue</span>;</span><br><span class="line">		fath[op[x][i]] = x;</span><br><span class="line">		<span class="built_in">dfs1</span>(op[x][i]);</span><br><span class="line">		sum[x] += sum[op[x][i]];</span><br><span class="line">		<span class="keyword">if</span>(sum[son[x]]&lt;sum[op[x][i]]) son[x]=op[x][i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs2</span><span class="params">(ll x,ll top)</span></span>&#123;</span><br><span class="line">	toped[x] = top,dfn[x] = ++tot_dfn,nid[tot_dfn] = x;</span><br><span class="line">	<span class="keyword">if</span>(son[x]) <span class="built_in">dfs2</span>(son[x],top);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;op[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(op[x][i]==fath[x]||op[x][i]==son[x]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs2</span>(op[x][i],op[x][i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//	freopen(&quot;1.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class="line">	idd=n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line"><span class="comment">//		swap(x,y);</span></span><br><span class="line">		p[++tot] = (node)&#123;x,z,<span class="number">0</span>&#125;;</span><br><span class="line">		root[y] = <span class="built_in">merge</span>(root[y],tot);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) p[++tot] = (node)&#123;i%n+<span class="number">1</span>,inf&#125;,root[i] = <span class="built_in">merge</span>(root[i],tot),f[i]=i;</span><br><span class="line">	lis[++top] = q,vis[q] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		ll u = lis[top];</span><br><span class="line">		<span class="keyword">while</span>(root[u]&amp;&amp;<span class="built_in">gf</span>(p[root[u]].id)==<span class="built_in">gf</span>(u)) <span class="built_in">pop</span>(u);</span><br><span class="line">		<span class="keyword">if</span>(!root[u]) <span class="keyword">break</span>;</span><br><span class="line">		ll pos = <span class="built_in">gf</span>(p[root[u]].id),val = p[root[u]].x;</span><br><span class="line">		<span class="keyword">if</span>(!vis[pos])&#123;</span><br><span class="line">			vis[pos]=<span class="number">1</span>,lis[++top]=pos;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		idd++,f[idd]=idd;</span><br><span class="line">		<span class="keyword">while</span>(lis[top+<span class="number">1</span>]!=pos)&#123;</span><br><span class="line">			ll now = lis[top--],val = p[root[now]].x,fro = p[root[now]].id;</span><br><span class="line">			vis[now]=<span class="number">0</span>,<span class="built_in">pushtag_heap</span>(root[now],-val),<span class="built_in">pop</span>(now);</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">gf</span>(now)!=<span class="built_in">gf</span>(q)) sums+=val;</span><br><span class="line">			root[idd]=<span class="built_in">merge</span>(root[idd],root[now]),f[now]=idd;</span><br><span class="line">		&#125;</span><br><span class="line">		vis[idd]=<span class="number">1</span>,lis[++top]=idd;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(sums&lt;<span class="number">1e9</span>) cout&lt;&lt;sums&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为用了左偏树合并，所以时间复杂度优化到了 $O(m+n \log n)$。</p>
<h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><p>接下来我们以 <a href="https://www.luogu.com.cn/problem/CF240E">CF240E Road Repairs</a> 来介绍一下如何利用 Tarjan 优化输出方案。（这道题是外向树，因此下面以外向树为例）</p>
<p>考虑朱刘算法的本质，就是先找到一个环，这个环上的边先放到待选集合内，当然，入点是根节点所在环除外，因为根节点不可能作为入点出现。</p>
<p>每次缩点的时候，如果我们在另外的图上将新建的点向环上的点连边，那么就形成了一棵“收缩树”，这棵树的形态如下所示，左边是原图，右边是建立出来的收缩树：</p>
<p><img src="/img/6.png"></p>
<p>因为加边是有顺序的，但是我们仍然不能使用并查集来判断，因为这是有向图，所以我们可以在过程中累加过答案的边加进去，然后从根开始遍历一棵合法的最小树形图就可以了。</p>
<p>这样做的正确性在于我们考虑一下收缩树，每次从根节点开始访问，根节点一定是最后一个合并的节点，它访问到的边就是最后合并的边，而根据反悔贪心的优先性，我们肯定是从最后合并的边开始选，然后不能加进答案就代表被反悔了。</p>
<p>但是这是深度优先搜索，也就是说也有可能在访问一棵子树的时候通过一条本来被反悔的边访问到另外的子树，想一下，这样是不可能的，因为如果有这样的边，那么这两棵子树所代表的环一定是合并了的，并不会影响答案。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 500005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 100000000000000ll</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;ll id,x,tag,idd,beg;&#125;p[N];</span><br><span class="line">vector&lt;pair&lt;ll,ll&gt; &gt; op[N];</span><br><span class="line">ll n,m,q,sums,a[N],i,x,y,z,ls[N],rs[N],dist[N],root[N],tot,lis[N],top,aroot,vis[N],idd,sum[N],son[N],f[N],chose[N];</span><br><span class="line">ll ex[N],ey[N],ez[N],toped,vall[N];</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">gf</span><span class="params">(ll x)</span></span>&#123;<span class="keyword">return</span> x==f[x]?x:f[x]=<span class="built_in">gf</span>(f[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag_heap</span><span class="params">(ll id,ll c)</span></span>&#123;<span class="keyword">if</span>(id) p[id].x+=c,p[id].tag+=c;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown_heap</span><span class="params">(ll id)</span></span>&#123;<span class="built_in">pushtag_heap</span>(ls[id],p[id].tag),<span class="built_in">pushtag_heap</span>(rs[id],p[id].tag),p[id].tag=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">merge</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">	<span class="built_in">pushdown_heap</span>(x),<span class="built_in">pushdown_heap</span>(y);</span><br><span class="line">	<span class="keyword">if</span>(p[x].x&gt;p[y].x) <span class="built_in">swap</span>(x,y);</span><br><span class="line">	rs[x]=<span class="built_in">merge</span>(rs[x],y);</span><br><span class="line">	<span class="keyword">if</span>(dist[ls[x]]&lt;dist[rs[x]]||(dist[ls[x]]==dist[rs[x]]&amp;&amp;ls[x]&gt;rs[x])) <span class="built_in">swap</span>(ls[x],rs[x]);</span><br><span class="line">	dist[x]=dist[rs[x]]+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pop</span><span class="params">(ll p)</span></span>&#123;<span class="built_in">pushdown_heap</span>(root[p]),root[p] = <span class="built_in">merge</span>(ls[root[p]],rs[root[p]]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line"><span class="comment">//	cout&lt;&lt;&quot;! &quot;&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line">	f[x]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;op[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(f[op[x][i].first]) <span class="keyword">continue</span>;</span><br><span class="line">		chose[op[x][i].second]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(op[x][i].first);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m,idd=n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		cin&gt;&gt;x&gt;&gt;y&gt;&gt;z,vall[i]=z;</span><br><span class="line">		p[++tot] = (node)&#123;x,z,<span class="number">0</span>,i,y&#125;;</span><br><span class="line">		root[y] = <span class="built_in">merge</span>(root[y],tot);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) p[++tot] = (node)&#123;i%n+<span class="number">1</span>,inf,<span class="number">0</span>,<span class="number">-1</span>,i&#125;,root[i] = <span class="built_in">merge</span>(root[i],tot),f[i]=i;</span><br><span class="line">	lis[++top] = <span class="number">1</span>,vis[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		ll u = lis[top];</span><br><span class="line">		<span class="keyword">while</span>(root[u]&amp;&amp;<span class="built_in">gf</span>(p[root[u]].id)==<span class="built_in">gf</span>(u)) <span class="built_in">pop</span>(u);</span><br><span class="line">		<span class="keyword">if</span>(!root[u]) <span class="keyword">break</span>;</span><br><span class="line">		ll pos = <span class="built_in">gf</span>(p[root[u]].id);</span><br><span class="line">		<span class="keyword">if</span>(!vis[pos])&#123;</span><br><span class="line">			vis[pos]=<span class="number">1</span>,lis[++top]=pos;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		idd++,f[idd]=idd;</span><br><span class="line">		<span class="keyword">while</span>(lis[top+<span class="number">1</span>]!=pos)&#123;</span><br><span class="line">			ll now = lis[top--],val = p[root[now]].x,fro = p[root[now]].id,to = p[root[now]].beg,zz = p[root[now]].idd;</span><br><span class="line">			vis[now]=<span class="number">0</span>,<span class="built_in">pushtag_heap</span>(root[now],-val),<span class="built_in">pop</span>(now);</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">gf</span>(now)!=<span class="built_in">gf</span>(<span class="number">1</span>)) sums+=val,toped++,ex[toped]=fro,ey[toped]=to,ez[toped]=zz;</span><br><span class="line">			root[idd]=<span class="built_in">merge</span>(root[idd],root[now]),f[now]=idd;</span><br><span class="line">		&#125;</span><br><span class="line">		vis[idd]=<span class="number">1</span>,lis[++top]=idd;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(sums&lt;<span class="number">1e9</span>)&#123;</span><br><span class="line">		cout&lt;&lt;sums&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) f[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=toped;i++) op[ex[i]].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(ey[i],ez[i]));</span><br><span class="line">		<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++) <span class="keyword">if</span>(chose[i]&amp;&amp;vall[i]) cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">		cout&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p><a href="https://codeforces.com/problemset/problem/1870/H">CF 1870H Standard Graph Problem</a></p>
<p>如果是无向图，那么答案一定是最小生成树的一个边集，这里感性证明一下就好。</p>
<p>如果是一棵内向树，那么如果 $i$ 被选中，那么 $i$ 往根的路径上的边都不需要选，直接用线段树的树链剖分和维护最小值的和即可。</p>
<p>如果不是内向树，通过上面的朱刘算法+Tarjan 优化转化成内向树就可以了，这个贪心也是感性证明一下就好。</p>
<p>代码如下，时间复杂度双 $\log$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 500005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 100000000000000ll</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;ll id,x,tag;&#125;p[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;ll cnt,x,tag;&#125;tr[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">vector&lt;ll&gt; op[N],w[N];</span><br><span class="line">ll n,m,q,sums,a[N],i,x,y,z,ls[N],rs[N],dist[N],root[N],tot,lis[N],top,aroot,fath[N],toped[N],dfn[N],nid[N],tot_dfn,vis[N],idd,sum[N],son[N],f[N];</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">gf</span><span class="params">(ll x)</span></span>&#123;<span class="keyword">return</span> x==f[x]?x:f[x]=<span class="built_in">gf</span>(f[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag_heap</span><span class="params">(ll id,ll c)</span></span>&#123;<span class="keyword">if</span>(id) p[id].x+=c,p[id].tag+=c;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown_heap</span><span class="params">(ll id)</span></span>&#123;<span class="built_in">pushtag_heap</span>(ls[id],p[id].tag),<span class="built_in">pushtag_heap</span>(rs[id],p[id].tag),p[id].tag=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">merge</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">	<span class="built_in">pushdown_heap</span>(x),<span class="built_in">pushdown_heap</span>(y);</span><br><span class="line">	<span class="keyword">if</span>(p[x].x&gt;p[y].x) <span class="built_in">swap</span>(x,y);</span><br><span class="line">	rs[x]=<span class="built_in">merge</span>(rs[x],y);</span><br><span class="line">	<span class="keyword">if</span>(dist[ls[x]]&lt;dist[rs[x]]||(dist[ls[x]]==dist[rs[x]]&amp;&amp;ls[x]&gt;rs[x])) <span class="built_in">swap</span>(ls[x],rs[x]);</span><br><span class="line">	dist[x]=dist[rs[x]]+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pop</span><span class="params">(ll p)</span></span>&#123;<span class="built_in">pushdown_heap</span>(root[p]),root[p] = <span class="built_in">merge</span>(ls[root[p]],rs[root[p]]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">	tr[p].cnt = <span class="built_in">min</span>(tr[<span class="number">2</span>*p].cnt,tr[<span class="number">2</span>*p+<span class="number">1</span>].cnt),tr[p].x = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(tr[<span class="number">2</span>*p].cnt==tr[p].cnt) tr[p].x+=tr[<span class="number">2</span>*p].x;</span><br><span class="line">	<span class="keyword">if</span>(tr[<span class="number">2</span>*p+<span class="number">1</span>].cnt==tr[p].cnt) tr[p].x+=tr[<span class="number">2</span>*p+<span class="number">1</span>].x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(ll p,ll c)</span></span>&#123;tr[p].cnt+=c,tr[p].tag+=c;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(ll p)</span></span>&#123;<span class="keyword">if</span>(tr[p].tag) <span class="built_in">pushtag</span>(<span class="number">2</span>*p,tr[p].tag),<span class="built_in">pushtag</span>(<span class="number">2</span>*p+<span class="number">1</span>,tr[p].tag),tr[p].tag=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(ll s,ll t,ll p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(s==t)&#123;</span><br><span class="line">		tr[p].x = a[nid[s]];</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">build</span>(s,(s+t)/<span class="number">2</span>,<span class="number">2</span>*p),<span class="built_in">build</span>((s+t)/<span class="number">2</span>+<span class="number">1</span>,t,<span class="number">2</span>*p+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">modify</span><span class="params">(ll l,ll r,ll c,ll s,ll t,ll p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=s&amp;&amp;t&lt;=r) <span class="keyword">return</span> <span class="built_in">pushtag</span>(p,c);</span><br><span class="line">	<span class="built_in">pushdown</span>(p);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>&lt;=(s+t)/<span class="number">2</span>) <span class="built_in">modify</span>(l,r,c,s,(s+t)/<span class="number">2</span>,<span class="number">2</span>*p);</span><br><span class="line">	<span class="keyword">if</span>(r&gt;(s+t)/<span class="number">2</span>) <span class="built_in">modify</span>(l,r,c,(s+t)/<span class="number">2</span>+<span class="number">1</span>,t,<span class="number">2</span>*p+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">pushup</span>(p);</span><br><span class="line"><span class="comment">//	cout&lt;&lt;tr[p].cnt&lt;&lt;&quot; &quot;&lt;&lt;tr[p].x&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">to_root</span><span class="params">(ll p,ll c)</span></span>&#123;<span class="keyword">while</span>(p) <span class="built_in">modify</span>(dfn[toped[p]],dfn[p],c,<span class="number">1</span>,tot_dfn,<span class="number">1</span>),p=fath[toped[p]];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs1</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	sum[x]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;op[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(op[x][i]==fath[x]) <span class="keyword">continue</span>;</span><br><span class="line">		fath[op[x][i]] = x;</span><br><span class="line">		<span class="built_in">dfs1</span>(op[x][i]);</span><br><span class="line">		sum[x] += sum[op[x][i]];</span><br><span class="line">		<span class="keyword">if</span>(sum[son[x]]&lt;sum[op[x][i]]) son[x]=op[x][i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs2</span><span class="params">(ll x,ll top)</span></span>&#123;</span><br><span class="line">	toped[x] = top,dfn[x] = ++tot_dfn,nid[tot_dfn] = x;</span><br><span class="line">	<span class="keyword">if</span>(son[x]) <span class="built_in">dfs2</span>(son[x],top);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;op[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(op[x][i]==fath[x]||op[x][i]==son[x]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs2</span>(op[x][i],op[x][i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//	freopen(&quot;1.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class="line">	idd=n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">		<span class="built_in">swap</span>(x,y);</span><br><span class="line">		p[++tot] = (node)&#123;x,z,<span class="number">0</span>&#125;;</span><br><span class="line">		root[y] = <span class="built_in">merge</span>(root[y],tot);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) p[++tot] = (node)&#123;i%n+<span class="number">1</span>,inf&#125;,root[i] = <span class="built_in">merge</span>(root[i],tot),f[i]=i;</span><br><span class="line">	lis[++top] = <span class="number">1</span>,vis[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		ll u = lis[top];</span><br><span class="line">		<span class="keyword">while</span>(root[u]&amp;&amp;<span class="built_in">gf</span>(p[root[u]].id)==<span class="built_in">gf</span>(u)) <span class="built_in">pop</span>(u);</span><br><span class="line">		<span class="keyword">if</span>(!root[u]) <span class="keyword">break</span>;</span><br><span class="line">		ll pos = <span class="built_in">gf</span>(p[root[u]].id),val = p[root[u]].x;</span><br><span class="line">		<span class="keyword">if</span>(!vis[pos])&#123;</span><br><span class="line">			vis[pos]=<span class="number">1</span>,lis[++top]=pos;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		idd++,f[idd]=idd;</span><br><span class="line">		<span class="keyword">while</span>(lis[top+<span class="number">1</span>]!=pos)&#123;</span><br><span class="line">			op[idd].<span class="built_in">push_back</span>(lis[top]),a[lis[top]]=p[root[lis[top]]].x;</span><br><span class="line">			ll now = lis[top--],val = p[root[now]].x,fro = p[root[now]].id;</span><br><span class="line">			vis[now]=<span class="number">0</span>,f[now]=idd,<span class="built_in">pushtag_heap</span>(root[now],-val),<span class="built_in">pop</span>(now);</span><br><span class="line">			root[idd]=<span class="built_in">merge</span>(root[idd],root[now]);</span><br><span class="line">		&#125;</span><br><span class="line">		vis[idd]=<span class="number">1</span>,lis[++top]=idd;</span><br><span class="line">	&#125;</span><br><span class="line">	aroot = lis[<span class="number">1</span>],a[aroot] = inf;</span><br><span class="line">	<span class="built_in">dfs1</span>(aroot),<span class="built_in">dfs2</span>(aroot,aroot),<span class="built_in">build</span>(<span class="number">1</span>,tot_dfn,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//	cout&lt;&lt;&quot;dfn &quot;&lt;&lt;tot_dfn&lt;&lt;endl;</span></span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		cin&gt;&gt;ch&gt;&gt;x;</span><br><span class="line">		<span class="keyword">if</span>(ch==<span class="string">&#x27;+&#x27;</span>) <span class="built_in">to_root</span>(x,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">to_root</span>(x,<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">if</span>(tr[<span class="number">1</span>].cnt!=<span class="number">0</span>) cout&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(tr[<span class="number">1</span>].x&gt;=inf) cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">else</span> cout&lt;&lt;tr[<span class="number">1</span>].x&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a><strong>最短路</strong></h1><p>本节主要介绍最短路的一些小技巧。</p>
<h2 id="1、虚点"><a href="#1、虚点" class="headerlink" title="1、虚点"></a><strong>1、虚点</strong></h2><p>例题：对于一棵有根树，两个点之间如果有边，则可以双向到达，如果没边但是深度之差等于 $k$，也可以双向到达。</p>
<p>问 $s$ 到 $t$ 的最短路是多少，边有边权，$1 \le k \le n \le 10^6$。</p>
<p>首先，对于任意两个深度满足差等于 $k$ 的点不能暴力连，因为时间空间都是 $O(n^2)$ 的。</p>
<p>但是我们可以对每个深度建一个虚拟节点，这个节点连向当前深度所有节点，然后满足深度之差等于 $k$ 的两个虚拟节点连边就可以了，这下子时间和空间都优化到了 $O(n)$ 级别，而且照样可以跑最短路。</p>
<h2 id="2、多维"><a href="#2、多维" class="headerlink" title="2、多维"></a><strong>2、多维</strong></h2><p>很多题目涉及到多维度的问题，例如上一条边的边权对于下一条经过的边的边权有影响，那么我们这时可以像 DP 一样多一个维度来记录。</p>
<p>例题：某图由 $n$ 点 $m$ 条单向边构成，每条边都有通行所需的费用 $w_i$ 。</p>
<p>其中某些边是特殊边，当经过特殊边从 $x_i$ 点到达 $y_i$ 点后，会触发神秘力量，可以选择使下一次的通行费用减少 $k$ ，或者直接 $0$ 费传送到某个由 $y_i$ 出发无法一步到达的点。</p>
<p>注意：经过一条费用减少 $k$ 后的特殊边，同样也能触发神秘力量。</p>
<p>计算从 $s$ 出发，到达每一个点所需的最少花费。</p>
<p>很显然，设 $dp_{i,0&#x2F;1}$ 表示到达 $i$ 号点后上一条边是特殊边还是普通边，转移（Dijkstra）同普通最短路。</p>
<p>但是还有 $0$ 费传送的情况，如何处理，这个参考数据结构板块的并查集合并区间的处理方式。</p>
<h2 id="3、期望"><a href="#3、期望" class="headerlink" title="3、期望"></a><strong>3、期望</strong></h2><p>对于 $dp_i &#x3D; \min{\dots}$ 的类型的题目，我们有两种解决方式，一是高斯消元 $O(n^3)$，如果决策不成环的话，我们可以用 dijkstra 来解决。</p>
<p>因为 dijkstra 有一个特性，就是每次出队的都是最小的元素，那么我们每次把已知的最小的期望 push 进堆里面，然后更新它能更新到的节点，类似于最短路，最后输出结果就行了，此处不再赘述。（详见后面的期望 DP）</p>
<h2 id="4、最短路径树-有向无环图"><a href="#4、最短路径树-有向无环图" class="headerlink" title="4、最短路径树&#x2F;有向无环图"></a><strong>4、最短路径树&#x2F;有向无环图</strong></h2><p>对于每一条可能在以 $s$ 开头的最短路上的边（边权为正），全部拿出来就成了最短路径树，如果不保证最短路只有一条的话，那么这棵树会变成有向无环图。</p>
<p>在这个有向无环图上，我们可以统计每个点被经过的次数，每条边在所有路径中被经过的次数，甚至可以处理动态询问修改一条边后的从 $s$ 到 $t$ 的最短路。</p>
<p>所有用法都来自于它的几条性质：</p>
<ul>
<li><p>每条边都出现在至少一条最短路中。</p>
</li>
<li><p>结果是树或有向无环图。</p>
</li>
</ul>
<hr>
<h1 id="欧拉路径"><a href="#欧拉路径" class="headerlink" title="欧拉路径"></a><strong>欧拉路径</strong></h1><p>这个知识点难就难在建模。</p>
<p>例1：对于一个 $n$ 个节点 $m$ 条边的无向图，找到最小的路径覆盖，使得每条边最多被覆盖 $1$ 次。（路径可以是环）</p>
<p>很显然，剖分成 $k$ 个欧拉路径就可以了。</p>
<p>如果图有 $k$ 个奇数度数的节点，答案为 $\frac{k}{2}$ （非整数则无解）条，否则如果图没有边答案为 $0$，有边答案为 $1$。</p>
<p>输出答案的方式也很巧妙，可以新建一个虚点，对于图中所有个连通块的奇数节点连边，若某个连通块的节点全是偶数节点，则选择一个连双向边就可以了。</p>
<p>最后由于整张图有一条欧拉通路，用 DFS 把欧拉通路求解出来，然后用新增的边把这些通路分成几段，段数就是答案，顺便还把方案求出来了。</p>
<p>例2：</p>
<p>有 $4 \times n$ 颗宝石，价值分别为 $1 \sim 4 \times n$。</p>
<p>宝石的颜色共有 $n$ 种，每种颜色恰好有 $4$ 颗宝石。</p>
<p>现在要将宝石装进两个箱子，满足以下两个条件：</p>
<ul>
<li>两个箱子的宝石总价值相等。</li>
<li>每个箱子每种颜色恰有 $2$ 颗宝石。</li>
</ul>
<p>请你设计一种划分方案，数据保证一定存在符合条件的划分方案。（$1 \le n \le 2\times 10^5$）</p>
<p>考虑构造，对于每组 $i+j&#x3D;4 \times n$ 的 $i,j$，将 $a_i$ 与 $a_j$ 连边，然后我们发现，每种颜色会连偶数条双向边（$2$ 或 $4$），就必然存在一条欧拉路径，把欧拉路径跑出来之后，因为每条边都代表两个宝藏，所以我们从这些边中选不相交的边（奇偶分类即可），输出方案。</p>
<p>还有一道神仙题，不说解法：<a href="https://www.luogu.com.cn/problem/AT_agc017_e">AT-agc017e Jigsaw</a>。</p>
<hr>
<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a><strong>其它</strong></h1><p>差分约束：方程列出来就很简单了。</p>
<p>拓扑排序：基础算法。</p>
<hr>
<p>PART-2</p>
<h1 id="有向图连通性"><a href="#有向图连通性" class="headerlink" title="有向图连通性"></a><strong>有向图连通性</strong></h1><p>主要算法是 Tarjan，解决一些与连通（每个点的点权不能重复计算）相关的题目。</p>
<p>主要步骤，任何有向图缩点后均变为有向无环图，我们这时便可以在 DAG 上 DP 出最长链等经典问题。</p>
<p>因此，此处不介绍经典问题，均介绍变种。</p>
<p>例1：<a href="https://www.luogu.com.cn/problem/P1407">P1407 [国家集训队] 稳定婚姻</a>。</p>
<p>很显然，像二分图一样，如果夫妻能够找到一个环，并且满足其余夫妻能够匹配成功。</p>
<p>所以边双的做法是错误的，我们要对于原夫妻关系从丈夫到妻子连边，其它情侣关系从女方向男方连边，判断也很简单，就判断原夫妻是否在一个强连通分量中即可。</p>
<p>例2：<a href="https://www.luogu.com.cn/problem/P2403">P2403 [SDOI2010] 所驼门王的宝藏</a>。</p>
<p>因为只有 $n$ 个藏宝宫室，所以考虑对这 $n$ 个节点建立有向边。</p>
<p>对于可以走 $8$ 个方向的宫室，暴力连边即可，$O(n)$。</p>
<p>但是有些宫室可以走到一行&#x2F;一列内任意宫室，我们这时可以用到最短路的技巧，对于每行&#x2F;每列建虚点，点权为 $0$ 就可以了，然后向对应的节点连入边&#x2F;出边即可。</p>
<p>最后 Tarjan 缩点后跑最长链。</p>
<p>例3：<a href="https://www.luogu.com.cn/problem/P4819">P4819 [中山市选] 杀人游戏</a>。</p>
<p>很显然，对于入度为 $0$ 的 scc，知道了一个就可以知道以它为开头的所有 scc 的身份。</p>
<p>但是有一种特殊情况，就是会存在一个入度为 $0$ 的 scc 使得它的大小为 $1$ 并且其它入度为 $0$ 的 scc 选了之后只剩下它一个，我们就可以直接推断出它是什么身份。</p>
<p>这种情况也很好判断，只需要知道它的儿子节点有没有除了它之外其它的入边就行了。</p>
<p>总时间复杂度 $O(n)$。</p>
<p>例4：<a href="https://www.luogu.com.cn/problem/P4700">P4700 [CEOI2011] Traffic</a>。</p>
<p>这道题有一个特殊限制，所有边在平面直角坐标系中都不相交，这样就有一个结论：</p>
<ul>
<li>排除开不能被左边节点到达的右边节点，那么每个节点能到达的右边节点都是在某一个 $[x,y]$ 范围内的所有节点。</li>
</ul>
<p>（以上节点均为 scc 缩点后有向无环图上的节点）</p>
<p>这个性质比较好证，画个图理解即可。</p>
<p>最后在有向图上 DP，暴力合并区间即可。</p>
<p>例5：<a href="https://www.luogu.com.cn/problem/P8328">P8328 [COCI2021-2022#5] Usmjeravanje</a>。</p>
<p>根据 scc 的传递性，我们可以知道当两条不同航线构成一个 X 形状的时候，X 的上下两部分会互相连通。</p>
<p>再根据一个贪心原则，有 X 形状的一定让它构成，证明不在赘述。</p>
<p>最后确定每条边的方向后，用并查集维护或者直接跑一遍 Tarjan 就可以了。</p>
<p>例6：<a href="https://www.luogu.com.cn/problem/P7737">P7737 [NOI2021] 庆典</a>。</p>
<p>还是缩点之后考虑图的形态，因为如果有 $x \to z,y \to z$，一定有 $z \to y$ 或 $y\to z$。</p>
<p>所以最后缩点之后的形态一定是一棵只有一个 $0$ 入度节点的叶向树。（从祖先连向儿子的边可以去掉，不影响连通）</p>
<p>然后对于 $k&#x3D;0,1,2$ 的情况分类讨论，对于每个可能到达的 scc，它的祖先一定有一个可以被起点到达，它的后代一定有一个可以到达终点。</p>
<p>我们就剖分成了几条链，最后用虚树做一下链合并就可以了，用树剖的话时间会多一个 $\log$。</p>
<p>综上，有向图连通性是有向图的一个大板块，而且经常和 DP 一起使用，难的题做起来比较麻烦且极具挑战性。</p>
<hr>
<h1 id="无向图关于点的连通性"><a href="#无向图关于点的连通性" class="headerlink" title="无向图关于点的连通性"></a><strong>无向图关于点的连通性</strong></h1><p>基本上和圆方树一起使用，可以 $O(n)$ 维护删掉每个点之后的连通块的一些信息。</p>
<p>例1：<a href="https://www.luogu.com.cn/problem/P5058">P5058 [ZJOI2004] 嗅探器</a>。</p>
<p>从 $s$ 开始跑 Tarjan，然后对于每个在 $s$ 之下 $t$ 之上的割点，都有可能成为答案。</p>
<p>例2：<a href="https://www.luogu.com.cn/problem/P4494">P4494 [HAOI2018] 反色游戏</a>。</p>
<p>首先对于每个连通块，如果它的 $1$ 的个数是偶数，那么答案为 $2^{m-n+1}$。</p>
<ul>
<li>证明：首先找到任意生成树，一定有且仅有一种情况满足要求，然后剩下 $m-n+1$ 条边随意选择 $0,1$，都可以满足条件。</li>
</ul>
<p>用圆方树维护删去每个节点的连通块的大小就可以了。</p>
<p>一些性质：</p>
<ul>
<li><p>如果一个点双内有一个奇环，那么这个点双内的所有点都存在于一个奇环内。</p>
</li>
<li><p>如果一个点双内的边数等于点数，则这个点双是环的形态。</p>
</li>
</ul>
<hr>
<h1 id="无向图关于边的连通性"><a href="#无向图关于边的连通性" class="headerlink" title="无向图关于边的连通性"></a><strong>无向图关于边的连通性</strong></h1><p>更少了。</p>
<p>所有题目大概就是缩完点之后在树上跑一个 DP 就可以了，感兴趣的可以做一下 <a href="https://www.luogu.com.cn/problem/P8867">P8867 [NOIP2022] 建造军营</a>。</p>
<p>以上就是第一部分图论学习笔记，下一部分预计：二分图，网络流，费用流等。</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>图论</tag>
        <tag>最小生成树</tag>
        <tag>最短路</tag>
        <tag>欧拉路径</tag>
        <tag>连通性相关</tag>
        <tag>最小树形图</tag>
      </tags>
  </entry>
  <entry>
    <title>图论学习笔记3</title>
    <url>/2024/01/07/%E5%9B%BE%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</url>
    <content><![CDATA[<h1 id="Prufer-序列"><a href="#Prufer-序列" class="headerlink" title="Prüfer 序列"></a>Prüfer 序列</h1><p>Prüfer 序列 (Prüfer code)，这是一种将带标号的树用一个唯一的整数序列表示的方法。</p>
<p>注意：我们不考虑含有 $1$ 个结点的树。</p>
<h2 id="构建方式"><a href="#构建方式" class="headerlink" title="构建方式"></a>构建方式</h2><p>找到一个编号最小的叶子节点，从树上删除，然后把它唯一指向的节点添加到一个序列 $a$ 中，直到树上只剩 $2$ 个节点。</p>
<p>堆的构造过程很简单，此处介绍线性构造过程：</p>
<blockquote>
<p>首先找到当前最小的叶子，删去添加进序列后，如果他唯一指向的节点这时也变成了一个叶子且这个节点的编号小于当前编号，那就递归下去。</p>
</blockquote>
<blockquote>
<p>否则编号自增继续检查。</p>
</blockquote>
<p>一共执行 $n-2$ 次，刚好删去了 $n-2$ 个叶子结点。</p>
<h2 id="反构建"><a href="#反构建" class="headerlink" title="反构建"></a>反构建</h2><p>给出 Prüfer 序列，然后让你构造出一棵树满足这个序列。</p>
<p>堆的做法很简单，此处不讲。</p>
<p>那么我们肯定取出来不在这个序列里的最小的数，然后连向第一个点，然后把第一个点删掉，然后持续这个过程即可。</p>
<p>那么我们还是尝试指针的算法解决。</p>
<blockquote>
<p>首先找到当前最小的节点，连边之后如果它连的那个边的端点也没有在后面的序列出现过且节点编号小于当前节点编号，那么递归下去。</p>
</blockquote>
<blockquote>
<p>否则编号自增继续检查。</p>
</blockquote>
<p>一共执行 $n-2$ 次，最后一条边手动连即可，刚好 $n-1$ 条边。</p>
<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>每个序列的元素都可以随便取，且一定能够构成一棵树，那么一张完全图的生成树个数就有 $n^{n-2}$ 种。</p>
<p>可以通过这个性质解决很多关于树的计数问题。</p>
<h1 id="同余最短路"><a href="#同余最短路" class="headerlink" title="同余最短路"></a>同余最短路</h1><p>设 $f_{i}(0 \le i &lt;x)$，表示状态，状态大多数定义为 $y \bmod x&#x3D;i$ 下每个 $y$ 的某个附带参数的最小值。</p>
<p>那么我们可以根据类似于动态规划之间的相互转移来构建出一幅图，根据图的边权决定最短路的时候是用 $\texttt{SPFA}$ 还是 $\texttt{dijkstra}$。</p>
<p>用一道例题就可以解决这个知识点：</p>
<blockquote>
<p>求一个 $y \bmod x &#x3D; 0(y&gt;0)$ 使得 $y$ 的各个位数之和（10 进制）最小。（$1 \le x \le 10^5$）</p>
</blockquote>
<p>很明显，我们用 $f_i$ 表示模 $x$ 为 $i$ 的所有 $y$ 位数之和最小是多少。</p>
<p>那么每个 $i$ 都可以转移到 $(10i+k) \bmod x(0 \le k \le 9)$，然后边权是 $k$。</p>
<p>最后跑最短路就可以了，答案是 $f_0$，初值需要注意一下，不能把 $0$ 弄进去，所以最开始 $\texttt{push}$ 进 $1 \sim 9$ 即可，需要 $\bmod \  x$。</p>
<p>大概这种思想就是同余最短路，旨在去掉相同和无用的状态，促进题目的解决。</p>
<h1 id="Kruskal-重构树"><a href="#Kruskal-重构树" class="headerlink" title="Kruskal 重构树"></a>Kruskal 重构树</h1><p>主要是把从 $x$ 到 $y$ 路径上最大值的最小值或者最小值的最大值转化为点权，最后构成一棵 $2n-1$ 个节点的树。</p>
<p>在执行 kruskal 的过程中，如果需要连接 $x$ 和 $y$ 的边，然后新建一个节点 $p$，$p$ 的权值为这条边的权值，然后 $ls_p \gets x,rs_p \gets y$。</p>
<p>我们最后发现这样子构建出来的树也是一棵二叉树，然后就可以执行最大值的最小值或者最小值的最大值的一些 dp 问题。</p>
<p>或者是一棵树上的边权最小值或者最大值之类的题目。</p>
<h1 id="无向图耳分解"><a href="#无向图耳分解" class="headerlink" title="无向图耳分解"></a>无向图耳分解</h1><p>定义无向图的一个”耳”为其任意一条简单路径或者一个简单环，例如下图红色边和黄色边连接形成的就是无向图的一些耳的形态：</p>
<p><img src="/img/ear1.png"></p>
<p>其中简单路径称为开耳，即上图中的黄色部分。</p>
<p>称一个“耳”可删除，当且仅当如果这个耳是开耳，删掉除端点外的所有点及其相连的边之后这个图仍然连通；如果不是开耳，那么保留这个简单环的一个端点，删掉除这个端点外的所有点及其相连的边之后这个图仍然连通。</p>
<p>例如上图中，$6-5-2-3$ 就不可以被删除，因为删除之后 $4$ 号节点会单出来；$2-3-4-5$ 可以删除，但是必须保留 $2$ 或者 $5$ 号节点，否则不连通。</p>
<p>如果这个图可以一直删除耳直到只剩一个节点，那么称这个过程是“耳分解”，如果除了最后一次剩下的删除的耳都是开耳，那么这个过程就是“开耳分解”。</p>
<p>最后，图是边双连通图和这个图具有“耳分解”等价，因为割边不可能出现在任何一个可删除的耳中，并且边双连通图可以按照下面的方式构造耳分解。</p>
<p>也就是用 Tarjan 得到若干返祖边，然后这些返祖边按照上端点的深度排序之后按照下图方式构建耳分解即可，但是分解的时候需要把顺序倒过来，并且可以证明每次加入的都是一个耳：</p>
<p><img src="/img/ear2.png"></p>
<p>还有，图是点双连通图和这个图具有“开耳分解”等价，这个可以通过上述证明得到，即所有耳一定都是形如 $6$ 号耳的形态，不会形成一个环。</p>
<h2 id="双极定向"><a href="#双极定向" class="headerlink" title="双极定向"></a>双极定向</h2><p>给定一个无向图和 $s,t$ 试给每条边定向，满足这是一个有向无环图，并且 $s$ 可以到达所有点，$t$ 可以被所有点到达。</p>
<p>如果添加一条 $s-t$ 的边，那么这个无向图如果存在定向方法，它一定是一个点双连通分量，证明根据定义，删掉任何一个点之后无向图都是连通的。</p>
<p>如果它添加之后是点双连通，那么我们接下来考虑构造一种定向方法：</p>
<p>首先以 $s$ 为根，加入 $s-t$ 边，然后用 Tarjan 得到一棵 DFS 树，之后我们可以直接让 $s \to t$ 路径上的所有边往下定向，并且 $s-t$ 边也往下定向，接下来我们考虑对这幅图进行一个耳分解。（当然要去掉 $s-t$ 这一条返祖边）</p>
<p>首先把所有返祖边按照最浅的那个点的深度排序，然后设当前加入的返祖边为 $u \to v$，我们考虑 DFS 树上 $u$ 到 $v$ 这一条路径，因为按照了深度排序，所以从 $u$ 往下的那一条边一定是定向了的，如果这条边是父亲向儿子，那么这个耳就定向为 $u \to v$，并且从 $v$ 开始在 DFS 树上跳父亲，每次经过一条没有被定向的树边都定向为儿子向父亲，直到有一条被定向了的树边，那么直接 <code>break</code> 即可，因为这条边上方的所有边一定都被定向了。</p>
<p>如果 $u$ 往下的那条边是儿子到父亲，那么这个耳被定向为 $v \to u$，并且依然跳父亲，不过所有树边都定向为父亲向儿子。</p>
<p>总的来说，时间复杂度是 $O(n)$ 的，如果用倍增找 $u$ 往下的那条边就是一个 $\log$，构建过程如下图所示：</p>
<p><img src="/img/ear3.png"></p>
<p>代码如下，细节比较多：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 600005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;ll x,y,id;&#125;p[N];</span><br><span class="line">vector&lt;pair&lt;ll,ll&gt; &gt; op[N];</span><br><span class="line">ll n,m,i,temp,dcc,dfn[N],low[N],tot,sta[N],top,dep[N],ttt,x[N],y[N],fath[N],vis[N],st[N][<span class="number">21</span>],tofa[N],ans[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(dep[a.x]==dep[b.x]) <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">	<span class="keyword">return</span> dep[a.x]&lt;dep[b.x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">tarjan</span><span class="params">(ll x,ll fa)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++) st[x][i]=st[st[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">	dfn[x] = low[x] = ++tot,sta[++top] = x;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;op[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!dfn[op[x][i].first])&#123;</span><br><span class="line">			st[op[x][i].first][<span class="number">0</span>] = x,dep[op[x][i].first] = dep[x]+<span class="number">1</span>,fath[op[x][i].first] = x,<span class="built_in">tarjan</span>(op[x][i].first,x);</span><br><span class="line">			low[x] = <span class="built_in">min</span>(low[x],low[op[x][i].first]);</span><br><span class="line">			<span class="keyword">if</span>(low[op[x][i].first]&gt;=dfn[x])&#123;</span><br><span class="line">				dcc++;</span><br><span class="line">				<span class="keyword">while</span>(sta[top+<span class="number">1</span>]!=op[x][i].first) sta[top--];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(fa!=op[x][i].first)&#123;</span><br><span class="line">			low[x] = <span class="built_in">min</span>(low[x],dfn[op[x][i].first]);</span><br><span class="line">			p[++ttt] = (node)&#123;op[x][i].first,x,op[x][i].second&#125;;</span><br><span class="line">			<span class="keyword">if</span>(dep[p[ttt].x]&gt;dep[p[ttt].y]) <span class="built_in">swap</span>(p[ttt].x,p[ttt].y);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(ll x,ll y,ll &amp;z)</span></span>&#123;</span><br><span class="line">	top = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//	cout&lt;&lt;&quot;! &quot;&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;endl;</span></span><br><span class="line">	<span class="keyword">for</span>(ll i=y;i;i=fath[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(vis[i]) <span class="keyword">break</span>;</span><br><span class="line">		vis[i]=<span class="number">1</span>,sta[++top]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	ll depth = dep[y]-dep[x]<span class="number">-1</span>,pos = y;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--) <span class="keyword">if</span>((depth&gt;&gt;i)&amp;<span class="number">1</span>) pos = st[pos][i];</span><br><span class="line">	ll temp = tofa[pos];</span><br><span class="line">	<span class="keyword">if</span>(temp==<span class="number">1</span>)&#123;</span><br><span class="line">		z=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=top;i++) tofa[sta[i]]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		z=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=top;i++) tofa[sta[i]]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		cin&gt;&gt;x[i]&gt;&gt;y[i];</span><br><span class="line">		<span class="keyword">if</span>(!((x[i]==<span class="number">1</span>&amp;&amp;y[i]==n)||(x[i]==n&amp;&amp;y[i]==<span class="number">1</span>)))&#123;</span><br><span class="line">			op[x[i]].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(y[i],i));</span><br><span class="line">			op[y[i]].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(x[i],i));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	op[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(n,<span class="number">0</span>)),op[n].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(<span class="number">1</span>,<span class="number">0</span>)),dep[<span class="number">1</span>]=<span class="number">1</span>,<span class="built_in">tarjan</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span>(dcc!=<span class="number">1</span>)&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(p+<span class="number">1</span>,p+ttt+<span class="number">1</span>,cmp);</span><br><span class="line">	<span class="keyword">for</span>(i=n;i;i=fath[i]) tofa[i]=<span class="number">1</span>,vis[i]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=ttt;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p[i].x==<span class="number">1</span>&amp;&amp;p[i].y==n) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span>(p[i].x==p[i<span class="number">-1</span>].x&amp;&amp;p[i].y==p[i<span class="number">-1</span>].y) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve</span>(p[i].x,p[i].y,ans[p[i].id]);</span><br><span class="line">		<span class="keyword">if</span>(x[p[i].id]==p[i].x) ans[p[i].id]^=<span class="number">1</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(x[i]==<span class="number">1</span>&amp;&amp;y[i]==n) cout&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(x[i]==n&amp;&amp;y[i]==<span class="number">1</span>) cout&lt;&lt;<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(fath[y[i]]==x[i]) cout&lt;&lt;(!tofa[y[i]])&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(fath[x[i]]==y[i]) cout&lt;&lt;tofa[x[i]]&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">else</span> cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>采用数学归纳法，设每次确定的树边的连通块为 $S$，并且 $S$ 中的每个元素都可以被 $s$ 所到达，并且都可以到达 $t$，容易发现一开始的 $s \to t$ 路径定向是满足这个条件的，每次加入一个耳，即简单路径，这个路径的定向也是满足这个条件的，因此，算法得证。</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>Prüfer 序列</tag>
        <tag>同余最短路</tag>
        <tag>Kruskal</tag>
        <tag>耳分解</tag>
      </tags>
  </entry>
  <entry>
    <title>图论学习笔记5</title>
    <url>/2024/01/07/%E5%9B%BE%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>平面图的定义是一张无向图如果能够画在一个平面上，使得其任意两条边不在交点处相交，那么这个无向图就是一个平面图。</p>
<p>并且这个无向图需要连通。</p>
<p>$K_{3,3}$ 和 $K_{5}$ 不是平面图。</p>
<blockquote>
<p>$K_{3,3}$ 是二分图，左部右部均有 $3$ 个点，任意两个不在同一边的点都有连边。</p>
</blockquote>
<blockquote>
<p>$K_{5}$ 是具有 $5$ 个顶点的完全图。</p>
</blockquote>
<h3 id="对偶图"><a href="#对偶图" class="headerlink" title="对偶图"></a>对偶图</h3><p>每一个平面图都有相应的对偶图，平面图的对偶图的对偶图就是它自己。</p>
<p>对偶图是将某个平面图的所有面看做点，然后若某两个面中有边隔开，那么这两个面在对偶图中所对应的点就有连边。</p>
<p>容易证明，平面图的对偶图也是平面图。</p>
<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>设这个平面图具有 $n$ 个点，$m$ 条边，$r$ 个面（包括最外面的那个面），那么有欧拉公式：$n+r&#x3D;m-2$。</p>
<p>证明可以用对偶图的形式来证明，即均找一棵最小生成树，然后就可以显然得证了。</p>
<p>并且如果某个含有 $n$ 个节点的平面图，边数最大是 $3m-6$，这个在缩小数据范围规模的时候很有效果。</p>
<h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><p>若两个图 $G_1$ 与 $G_2$ 同构，或通过反复插入或消去 2 度顶点后是同构的，则称二者是同胚的。</p>
<p>库拉图斯基定理：</p>
<ul>
<li>图 $G$ 是平面图当且仅当 $G$ 不含与 K_5 或 K_{3,3} 同胚的子图。</li>
</ul>
<p>此处不做详解。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>如果平面图的每条边都有边权，并且有源点和汇点，那么我们可以将最大流（最小割）转化为最短路进行求解。</p>
<p>具体例子如下，如下图（左）是一个平面图，但是有源点和汇点，每条边还有不同方向的边权：</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/81x4op5r.png"></p>
<p>设原图的源点为 $1$，汇点为 $6$，那么我们先连接 $1$ 和 $6$，方便处理，然后对于新的平面图构建对偶图，图的边权是隔开两个面的边权，然后 $S$ 就是 $1 \sim 6$ 围出来的平面所代表的点，$T$ 就是最外层一个大平面。</p>
<p>我们可以清楚地看到，任何一条从 $S$ 到 $T$ 的路径都对应了原图的一组最小割的方案，于是我们直接从 $S$ 到 $T$ 跑最短路即可。</p>
<p>下面的代码把 $1$ 到 $6$ 新加的边是翻到了上面的，$S$ 也在上面，所以可能会有所不同。</p>
<p>特别地，如果是有向图，我们需要像网络流那样建立两条边，每条边的权值不一样，而题目中的图通常是网格图的形式，我们可以以 <a href="https://www.luogu.com.cn/problem/P2046">P2046 [NOI2010] 海拔</a> 为例，考虑建边，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 2000005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> K 1005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	ll id,x;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node&amp; a)<span class="type">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a.x&lt;x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">ll n,m,i,j,id[K][K],id2[K][K],s,t=<span class="number">1</span>,x,la[N],ne[N],to[N],val[N],tot,dis[N],a[K][K],b[K][K],c[K][K],d[K][K];</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(ll x,ll y,ll z,ll z2)</span></span>&#123;</span><br><span class="line">	tot++,ne[tot] = la[x],la[x] = tot,to[tot] = y,val[tot] = z;</span><br><span class="line">	tot++,ne[tot] = la[y],la[y] = tot,to[tot] = x,val[tot] = z2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=s;i&lt;=t;i++) dis[i]=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">	dis[s]=<span class="number">0</span>;</span><br><span class="line">	q.<span class="built_in">push</span>((node)&#123;s,<span class="number">0</span>&#125;);</span><br><span class="line">	<span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">		node tmp = q.<span class="built_in">top</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">if</span>(dis[tmp.id]!=tmp.x) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">for</span>(ll i=la[tmp.id];i;i=ne[i])&#123;</span><br><span class="line">			<span class="keyword">if</span>(dis[to[i]]&gt;tmp.x+val[i])&#123;</span><br><span class="line">				dis[to[i]] = tmp.x+val[i];</span><br><span class="line">				q.<span class="built_in">push</span>((node)&#123;to[i],dis[to[i]]&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;dis[t]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	n++,m=n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++) <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;m;j++) id[i][j]=t++;</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++) <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;m;i++) cin&gt;&gt;a[j][i];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++) <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++) cin&gt;&gt;b[i][j];</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++) <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;m;i++) cin&gt;&gt;c[j][i];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++) <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++) cin&gt;&gt;d[i][j];</span><br><span class="line">   <span class="comment">//注意，从 s 连出去的边边权都是顺着的（ab数组），连向 s 的边边权都是 0；t 亦是如此。</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">//但是从上连向下的边边权就是 a，反过来边权就是 c，可以理解为不变。（ac 是从左到右，从右到左的数组）</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">//但是从左连向右的边边权就是 d，反过来边权就是 b，可以理解为反向。（bd 是从上到下，从下到上的数组）</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;m;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i==<span class="number">0</span>) <span class="built_in">merge</span>(s,id[i+<span class="number">1</span>][j],a[i][j],<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(i==n<span class="number">-1</span>) <span class="built_in">merge</span>(id[i][j],t,a[i][j],<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">merge</span>(id[i][j],id[i+<span class="number">1</span>][j],a[i][j],c[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(j==<span class="number">0</span>) <span class="built_in">merge</span>(id[i][j+<span class="number">1</span>],t,b[i][j],<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(j==m<span class="number">-1</span>) <span class="built_in">merge</span>(s,id[i][j],b[i][j],<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">merge</span>(id[i][j],id[i][j+<span class="number">1</span>],d[i][j],b[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dijkstra</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Input:</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">10 6 7 2 1 6</span></span><br><span class="line"><span class="comment">8 9 4 5 10 7</span></span><br><span class="line"><span class="comment">1 6 1 8 6 4</span></span><br><span class="line"><span class="comment">3 1 9 9 2 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>特别地，如果是一般的平面图需要让我们找到对偶图的话，我们可能需要用到最小左转法，这个知识点的内容太过高深，不在我们的讨论范围内。</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>图论</tag>
        <tag>平面图</tag>
      </tags>
  </entry>
  <entry>
    <title>图论学习笔记2</title>
    <url>/2024/01/07/%E5%9B%BE%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<h1 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a><strong>二分图</strong></h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h2><p>二分图，又称二部图，英文名叫 Bipartite graph。</p>
<p>二分图是什么？节点由两个集合组成，且两个集合内部没有边的图。</p>
<p>换言之，存在一种方案，将节点划分成满足以上性质的两个集合。</p>
<h2 id="性质-判定"><a href="#性质-判定" class="headerlink" title="性质&amp;判定"></a><strong>性质&amp;判定</strong></h2><p>如果两个集合的各个节点分别表示不同的颜色，那么每条边都连接不同颜色的节点。</p>
<p>且没有奇环的无向图一定是二分图。</p>
<p>判定二分图可以遵循以上的过程对每条边的两个端点染不同的颜色，如果发现无法满足上述条件即不是二分图。</p>
<h2 id="二分图最大匹配"><a href="#二分图最大匹配" class="headerlink" title="二分图最大匹配"></a><strong>二分图最大匹配</strong></h2><ul>
<li><p>匹配的定义：选出一些边，使这些边两两之间不具备相同的端点。</p>
</li>
<li><p>最大匹配：在上述限制下使选出的边的数量尽可能大。</p>
</li>
</ul>
<h3 id="增广路算法-Augmenting-Path-Algorithm"><a href="#增广路算法-Augmenting-Path-Algorithm" class="headerlink" title="增广路算法 Augmenting Path Algorithm"></a><strong>增广路算法 Augmenting Path Algorithm</strong></h3><p>也叫匈牙利算法。</p>
<p>对于二分图左部未匹配到的点，如果存在一条增广路，那么匹配数量就增加 $1$，最后没有增广路了那么就是最大匹配。（增广路定理）</p>
<p>*增广路：以非匹配边开始，以非匹配边结束的一条<strong>路径</strong>，使得路径上的边是非匹配边，匹配边交错出现。</p>
<p>那么代码就很容易写出来了，注意此处可以在更新右部匹配的时候顺便更新左部匹配，这样的话更好处理以后的内容。</p>
<p>（以下是时间戳优化的版本）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(ll x,ll r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;op[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(vis[op[x][i]]==r) <span class="keyword">continue</span>;</span><br><span class="line">		vis[op[x][i]] = r;</span><br><span class="line">		<span class="keyword">if</span>(!link[op[x][i]]||<span class="built_in">dfs</span>(link[op[x][i]],r))&#123;</span><br><span class="line">			link[op[x][i]] = x;</span><br><span class="line">			link2[x] = op[x][i];</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同理，可以转化为 Dinic 求网络流，此处不展开讨论。</p>
<h2 id="二分图最小点覆盖（Konig-定理）"><a href="#二分图最小点覆盖（Konig-定理）" class="headerlink" title="二分图最小点覆盖（König 定理）"></a><strong>二分图最小点覆盖（König 定理）</strong></h2><ul>
<li>最小点覆盖：选最少的点，满足每条边至少有一个端点被选。</li>
</ul>
<p>二分图中，最小点覆盖 $&#x3D;$ 最大匹配。</p>
<p>首先最小点覆盖一定 $\ge$ 最大匹配，因为最大匹配的每条边至少选一个端点。</p>
<p>考虑构造性算法：</p>
<blockquote>
<p>假设我们求出了一组最大匹配，然后对于左部未被匹配到的点执行 dfs，但是规定从左部到右部的边只能经过非匹配边，从右部到左部的边只能经过匹配边。那么最后左部未被访问到的点和右部访问到的点构成一组最小点覆盖。</p>
</blockquote>
<p>证明：</p>
<blockquote>
<p>首先这个方法的大小肯定是等于最大匹配的，一个匹配边要么两个端点都没有访问到，要么都访问到了，并且最小点覆盖肯定不包含不在最大匹配上的点。</p>
</blockquote>
<blockquote>
<p>其次一定可以满足在上述 dfs 中所经过的所有边都有一个点是右部访问到的点（非增广路以非匹配边开始一定以匹配边结束），然后剩下的就是左部未访问到的点，恰好能够满足覆盖所有边。</p>
</blockquote>
<h2 id="二分图最大独立集"><a href="#二分图最大独立集" class="headerlink" title="二分图最大独立集"></a><strong>二分图最大独立集</strong></h2><ul>
<li>最大独立集：选最多的点，满足这些点两两无边连接。</li>
</ul>
<p>引理：最小点覆盖 $+$ 最大独立集 $&#x3D;$ 总点数。</p>
<p>证明很显然，把最小点覆盖中的点及其连接的边删去，图中就没有边了，剩下的点构成最大独立集。</p>
<p>因为，二分图最大独立集 $&#x3D;$ 总点数 $-$ 最大匹配数。</p>
<h2 id="有向无环图最小路径划分-覆盖"><a href="#有向无环图最小路径划分-覆盖" class="headerlink" title="有向无环图最小路径划分&#x2F;覆盖"></a><strong>有向无环图最小路径划分&#x2F;覆盖</strong></h2><ul>
<li>路径划分：选出若干条不相交的路径，使得每个点恰好被经过 $1$ 次。</li>
<li>路径覆盖：选出若干条路径，使得每个点被经过至少 $1$ 次。</li>
</ul>
<h3 id="划分"><a href="#划分" class="headerlink" title="划分"></a><strong>划分</strong></h3><p>将每个点拆成入点和出点，那么对于每一条 $u \to v$ 的边，连接 $u_{out}\to v_{in}$，形成一个二分图，那么这个有向无环图最小路径划分就是 $n-$ 二分图最大匹配数。</p>
<p>证明：</p>
<blockquote>
<p>我们可以将这个有向图最开始看做 $n$ 条路径，然后二分图最大匹配中的每一条边就可以看做将末尾是 $a$ 的路径和开头是 $b$ 的路径连接，总路径就会减少一条，并且因为每个 $u$ 结尾的路径最多连接一条以 $v$ 结尾的路径，每个 $v$ 开头的路径最多连接一条 $u$ 结尾的路径，故最大匹配是正确的。</p>
</blockquote>
<h3 id="覆盖"><a href="#覆盖" class="headerlink" title="覆盖"></a><strong>覆盖</strong></h3><p>对原图跑一个传递闭包，然后对 $w_{i,j}&#x3D;1$ 的 $i,j$ 连接一条 $i \to j$ 的边，容易发现，新图也是一个有向无环图在新图上再跑上面的最小路径划分就行了。</p>
<p>正确性证明：</p>
<blockquote>
<p>其实就是将有相交的路径中的相交的地方保留了一处，其它路径直接越过这个地方，就转化为了最小路径划分。</p>
</blockquote>
<p>注：如果是有向图就会出现环的情况会被判作 $0$ 条链（匹配数是 $n$，节点数是 $n$，剩下 $n-n&#x3D;0$），但实际上需要至少 $1$ 条链。</p>
<h2 id="有向图环覆盖"><a href="#有向图环覆盖" class="headerlink" title="有向图环覆盖"></a><strong>有向图环覆盖</strong></h2><p>类似于上面的情况，还是对每个点拆成入点和出点，连边后跑二分图匹配判断是否有完美匹配即可。证明同上，只不过在最后一次合并的时候一定会合并成至少一个环，恰好满足要求。</p>
<p>以上三种有向图上的问题均可以输出方案，只需要存储经过了哪些边即可。（二分图匹配上的边）</p>
<h2 id="有向无环图最大反链"><a href="#有向无环图最大反链" class="headerlink" title="有向无环图最大反链"></a><strong>有向无环图最大反链</strong></h2><p>根据 Dilworth 定理，有向无环图最大反链 $&#x3D;$ 有向无环图最小路径划分。</p>
<p>此处主要讲述输出方案：</p>
<blockquote>
<p>首先像最小路径划分一样求出二分图的最大独立集的方案（点集 $-$ 最小点覆盖）。<br>若 $x_{in}$ 和 $x_{out}$ 都在二分图的最大独立集里，那么 $x$ 就存在于当前二分图最大匹配所对应的有向无环图最大反链。</p>
</blockquote>
<p>证明同最小点覆盖，用作复习。</p>
<p>如果要求出每个点是否可能存在于一种最大反链，那么可以把这个点以及与其含有偏序关系的点去掉，然后再跑出来最大反链，如果此时最大反链的大小只减少了 $1$，那么就可以存在于一种最大反链之中。</p>
<h2 id="二分图博弈"><a href="#二分图博弈" class="headerlink" title="二分图博弈"></a><strong>二分图博弈</strong></h2><p>两个人操控二分图上的一颗棋子，每个人移动这个棋子到另一个未被移动到过的点，若不能移动则失败。</p>
<p>定理：对于某个节点若先手必胜当且仅当这个节点一定存在于这个二分图的最大匹配中。</p>
<p>证明：</p>
<ul>
<li><p>如果这个节点存在于二分图的最大匹配中，那么先手移动的一定是沿着匹配边走，后手一定移动到一个匹配点。如果走到了非匹配点，那么设当前的路径是 $s \to p_1 \to p_2 \to \dots \to p_k$，那么把当前的匹配边 $(S,p_1),(p_2,p_3),\dots,(p_{k-2},p_{k-1})$ 右移一位变为 $(p_1,p_2),(p_3,p_4),\dots,(p_{k-1},p_k)$，后面的点不变，那么与 $S$ 一定在最大匹配上矛盾。</p>
</li>
<li><p>反之，如果不在二分图的最大匹配上，那么先手一走，一定走到匹配点上，后手就必胜了。</p>
</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a><strong>后记</strong></h2><p>二分图有很多技巧：求一个点是否一定在最大匹配中，一条边是否一定在最大匹配中等等。</p>
<p>这些问题通常通过修改匈牙利算法的顺序或者重复执行查找增广路的过程得出。</p>
<p>并且还可以通过二分得到二分图最大匹配的前提下最大的边权最小是多少。</p>
<p>需要灵活运用匈牙利算法。</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>图论</tag>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title>基科班学习总结</title>
    <url>/2024/01/07/%E5%9F%BA%E7%A7%91%E7%8F%AD%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="第一阶段（2023-07）"><a href="#第一阶段（2023-07）" class="headerlink" title="第一阶段（2023-07）"></a>第一阶段（2023-07）</h1><p>首先是笔记：<a href="https://acoipp.github.io/2024/01/07/%E5%9B%BE%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/">图论学习笔记1（NOTE-2）</a></p>
<p>下面是正文：</p>
<p>对于考试来说：</p>
<ul>
<li>第一场离线考试</li>
</ul>
<p>没有达到预期，有很多暴力没有打满，我们在能够打暴力的情况下一定先把暴力弄出来。除非是我们已经知道正解是什么了。</p>
<p>A题较简单，B题数据较水，但是换成 dijkstra 被卡常了，C题是一道DP，不知道为什么考场上没想出来。考场上推到把 <code>000</code> 合并成 <code>0</code> 就推不下去了。。。D题也是想了一个错误的贪心。</p>
<p><strong>贪心一定要证明其正确性</strong></p>
<ul>
<li>第二场离线考试</li>
</ul>
<p>完全出乎意料，考场上状态不佳（昨天没睡好），然后导致能做的题都没做出来：</p>
<p>A题口胡了一个结论也没去打个暴搜，粗心。</p>
<p>B题想到了奇环，但是被之前的连通性干扰了，一直在想点双，根本就没考虑二分图。。。</p>
<p>C题之前做过，考场上一直没尝试过换思路，导致错误的思路一直走下去浪费了大量时间。</p>
<p>D题神仙题，数学练少了，本来就不会。</p>
<ul>
<li>第一场 ACM</li>
</ul>
<p>表现不怎么好，死磕第三题，没见过相似的套路，就是看到 $\dfrac{1}{2}$ 应该往随机化算法想想。</p>
<p>第四题神仙题，二分图搞定，构造性思维不够强。</p>
<ul>
<li>第二场 ACM</li>
</ul>
<p>表现比较好，不过有一道题因为没学点双的原因所以没往那方面想。</p>
<hr>
<p>其他还好。</p>
<ul>
<li>周中测试</li>
</ul>
<p>一般，知识面窄了，不知道长链剖分这个神奇玩意。</p>
<p>E 题没有想到去暴力枚举出现过的长度，其他都是没问题的。</p>
<p>综上：</p>
<ul>
<li><p>数学&#x2F;构造思维需要加强。</p>
</li>
<li><p>知识面需要拓宽。</p>
</li>
<li><p>一定要沉下气应战，能打的暴力就要打了，而且不要把题目想得太复杂。</p>
</li>
</ul>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>学期总结</tag>
      </tags>
  </entry>
  <entry>
    <title>图论学习笔记4</title>
    <url>/2024/01/07/%E5%9B%BE%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</url>
    <content><![CDATA[<h1 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h1><p>概念：</p>
<ul>
<li>一个边有两个权值且带有汇点与源点的无向图 $G(V,E)$，其中每条边为 $x,y,c,w$ 四个参数组成，$x,y$ 表示起始点和结束点，$c$ 表示最大容量，$w$ 表示单位时间通过容量。</li>
</ul>
<p>性质：</p>
<ul>
<li>对于任意一条边 $x,y,c,w$，满足 $w \le c$。  </li>
<li>对于任意一条边 $x,y,c,w$，满足存在另一条边 $y,x,0,-w$。    <ul>
<li>后面这条边可能题目没有给出，需要自己加上去。</li>
</ul>
</li>
<li>设 $in_x &#x3D; \sum_{y \to x}w$，$out_x &#x3D; \sum_{x \to y}w$，若 $x$ 不为汇点和源点，那么 $in_x&#x3D;out_x$。  </li>
<li>设源点为 $s$，汇点为 $t$，则 $out_s&#x3D;in_t$。</li>
</ul>
<p>上面的性质分别称作：容量限制，斜对称性和流守恒性。</p>
<h2 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h2><p>构造一个网络，使得 $out_s&#x3D;in_t$ 最大，这个最大的值称作这个网络图的最大流。</p>
<p>显然，开始时这个图的最大流是 $0$，每条边的流量均为 $0$。</p>
<p>考虑找到一条从 $s \sim t$ 的路径，这条路径上的 $c-w$ 的最小值 $&gt;0$，那么我们可以使全局的最大流加上这个最小值。</p>
<p>证明显然，只需要对应的边减一下，然后斜对称的边加一下就行了，因为有斜对称这个性质，所以相当于给了程序一个“反悔”的机会，可以把之前给各个边的流量减少一部分以扩充全局的流量。</p>
<p>只到最后图中不存在这条增广路即可。</p>
<h3 id="EK-算法"><a href="#EK-算法" class="headerlink" title="EK 算法"></a>EK 算法</h3><p>每次暴力枚举可能的增广路，最多增广 $O(nm)$ 次，则时间复杂度为 $O(nm^2)$。</p>
<p>记得使用广度优先搜索。</p>
<h3 id="Dinic"><a href="#Dinic" class="headerlink" title="Dinic"></a>Dinic</h3><p>找增广路的过程中把所有 $c-w$ 非 $0$ 的边拿出来 01 BFS 一下，那么每个节点只去寻找 $dis_y&#x3D;dis_x+1$ 的节点更新增广路，那么时间复杂度为 $O(n^2m)$。</p>
<p>注意 $dis_x$ 表示 $x$ 在 01 BFS 的图上与 $s$ 的最短路的长度，这样做一定是正确的，因为总是可以找到一条合法的路径。</p>
<h3 id="ISAP"><a href="#ISAP" class="headerlink" title="ISAP"></a>ISAP</h3><p>优化 Dinic 的过程，把 $dis_x$ 的定义换为在 01 BFS 的图上与 $t$ 的最短路的长度。</p>
<p>然后如果没有某个 $dis_x&#x3D;i(1 \le i \le n-1)$，那么图出现了断层，此时返回即可。</p>
<p>而且我们可以一边找增广路一边更新 $dis$ 数组，不用每次 BFS 一遍，常数也比较小，代码如下所示：</p>
<p>（这里使用了当前弧优化，对于每一次更新我们经过的边就不会再选了，用链式前向星或者 <code>vector</code> 都可以）</p>
<p><strong>通常没有 Dinic 快，请谨慎使用。</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 500005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,m,s,t,i,x,y,z,ans,temp;</span><br><span class="line">ll la[N],ne[N],to[N],val[N],dis[N],cur[N],tot=<span class="number">1</span>,sum[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(ll x,ll y,ll z)</span></span>&#123;tot++,ne[tot] = la[x],la[x] = tot,to[tot] = y,val[tot] = z;&#125;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(ll x,ll step)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==t) <span class="keyword">return</span> step;</span><br><span class="line">	ll used = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=cur[x];i;i=ne[i])&#123;</span><br><span class="line">		cur[x] = i;</span><br><span class="line">		<span class="keyword">if</span>(dis[to[i]]+<span class="number">1</span>==dis[x]&amp;&amp;val[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			ll temp = <span class="built_in">dfs</span>(to[i],<span class="built_in">min</span>(val[i],step-used));</span><br><span class="line">			val[i] -= temp,val[i^<span class="number">1</span>] += temp,used += temp;</span><br><span class="line">			<span class="keyword">if</span>(used==step) <span class="keyword">return</span> used;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(--sum[dis[x]]==<span class="number">0</span>) dis[s] = n+<span class="number">1</span>;</span><br><span class="line">	sum[++dis[x]]++;</span><br><span class="line">	<span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line">	sum[<span class="number">0</span>] = n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">		<span class="built_in">merge</span>(x,y,z),<span class="built_in">merge</span>(y,x,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(dis[s]&lt;n) <span class="built_in">memcpy</span>(cur,la,<span class="built_in">sizeof</span>(la)),ans+=<span class="built_in">dfs</span>(s,<span class="number">1e18</span>);</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="最小割"><a href="#最小割" class="headerlink" title="最小割"></a>最小割</h2><p>有一个定理，最大流 $&#x3D;$ 最小割，详见算法导论。</p>
<p>最小割用于处理下列内容的最优解：</p>
<blockquote>
<p>对于一张图，把图的两个点 $s,t$ 变得不连通，至少需要割掉边权总和为多少的边。</p>
</blockquote>
<blockquote>
<p>对于一些关系，如果 $a_i$ 号点划分到 $1$ 集合有 $c_i$ 的贡献，划分到 $2$ 集合有 $d_i$ 的贡献，并且有 $q$ 对关系，表示若 $u_i$ 和 $v_i$ 不在一个集合内，有 $-w_i$ 的贡献，最大化贡献。（数据都是非负整数）那么可以以此建立网络流模型。</p>
</blockquote>
<p>大概处理的多数情况是第一种，第一种运用也很广泛，我们可以看一下下面这道例题：</p>
<blockquote>
<p>有 $n \times m$ 的矩阵，每个格子可以选择 A、B 两类，如果一个格子选择 A 类，它的贡献是 $a_{i,j}$，否则贡献是 $b_{i,j}$。并且如果有 $k$ 个格子与它相邻并且类型不一样，获得 $k \times c_{i,j}$ 的收益，问收益最大是多少。</p>
</blockquote>
<p>数据保证点数为 $n \times m$ 的 ISAP 能过。</p>
<p>显然的，这个矩阵是一个二分图，为了转化为最小割模型，考虑下面的操作。</p>
<ol>
<li><p>$ans \gets \sum a_{i,j}+\sum b_{i,j}+\sum c_{i,j} \times ([i&gt;1]+[j&gt;1]+[i&lt;n]+[j&lt;m])$</p>
<p> 注解：这是所有的权值总和。</p>
</li>
<li><p>连边 $s \to (i,j),w&#x3D;b_{i,j}$，$(i,j) \to t,w&#x3D;a_{i,j}$，这是二分图左部的点；连边 $s \to (i,j),w&#x3D;a_{i,j}$，$(i,j) \to t,w&#x3D;b_{i,j}$，这是二分图右部的点；然后若两个点相邻，设左部点为 $u$，右部点为 $v$，则连接 $u \to v,w&#x3D;c_{u}+c_{v}$ 和 $v \to u,w&#x3D;c_v+c_u$</p>
<p> 注解：如果把二分图左部的点划分到 $s$ 集合，那么 $(i,j) \to t$ 的边就会切断，减去 $a_{i,j}$，其余情况同理。如果左右部的点都划分到 A 类，那么左部的点就会划分到 $t$ 集合，右部的点就会划分到 $s$ 集合，如果它们其中有连边，那么这条边根据最小割的定义必须断开，然后就会减去之前加上的多余的 $sum$。</p>
</li>
<li><p>输出之前的 $sum$ 减去最小割即可，满足答案最大。</p>
</li>
</ol>
<p>注意：此处连双向边（$u \to v$ 和 $v \to u$）是因为每个点都与 $s$ 和 $t$ 有连边，根据题目也是如此，有些情况是只连单向边，需要特别注意一下。</p>
<p>还有一种题目：</p>
<blockquote>
<p>对于一个有向图，找到点权总和最大的子图，使得这个子图中的点的所有出点都在这个子图中，点权可能为负。（最大闭合子图）</p>
</blockquote>
<p>源点向点权为正的点连边，边权即为点权；图上如果有 $u \to v$ 的边，那么连接 $u \to v$，边权为 $\text{inf}$；点权为负的点向汇点连边，边权为点权的绝对值，跑最大流等于最小割即可。（点权为 $0$ 的其实不影响，可以算到点权为正的点集里面）</p>
<p>答案要减去最小割，然后加上点权为正的点的点权之和。</p>
<p>如果割掉源点到某个点的边，那么代表不选这个点，答案减去点权；如果割掉某个点到汇点的边，那么代表选这个点，答案减去点权的绝对值等于答案加上点权。</p>
<p>这样做显然是正确的，可以思考一下。</p>
<h3 id="常见建图"><a href="#常见建图" class="headerlink" title="常见建图"></a>常见建图</h3><p>这个，靠积累了，网络流 24 题和 Atcoder 的题目都可以积累。</p>
<h3 id="最小割树"><a href="#最小割树" class="headerlink" title="最小割树"></a>最小割树</h3><p><a href="https://www.luogu.com.cn/blog/674469/solution-p4897">【模板】最小割树（Gomory-Hu Tree） 题解</a></p>
<h2 id="费用流"><a href="#费用流" class="headerlink" title="费用流"></a>费用流</h2><p>我们对于每条边，如果流经它的流量为 $x$，那么答案增加 $cx$，$c$ 为这条边的边权。</p>
<p>然后前提要求是最大流。</p>
<h3 id="最小费用最大流"><a href="#最小费用最大流" class="headerlink" title="最小费用最大流"></a>最小费用最大流</h3><p>把寻找增广路的过程用 spfa 找最小费用的某条增广路就可以了。</p>
<p>最后一定是最大流并且费用是最小的。</p>
<p>优化：每次增广的时候找最小费用的值，然后找增广路的时候多路增广即可，详见代码。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;inf;i++) dis[i]=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">	q.<span class="built_in">push</span>(s);</span><br><span class="line">	dis[s]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">		ll tmp = q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		vis[tmp] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(ll i=la[tmp];i;i=ne[i])&#123;</span><br><span class="line">			<span class="keyword">if</span>(val[i]&gt;<span class="number">0</span>&amp;&amp;dis[to[i]]&gt;dis[tmp]+w[i])&#123;</span><br><span class="line">				dis[to[i]] = dis[tmp]+w[i];</span><br><span class="line">				<span class="keyword">if</span>(!vis[to[i]]) vis[to[i]]=<span class="number">1</span>,q.<span class="built_in">push</span>(to[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dis[t]&lt;=<span class="number">1e18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(ll x,ll step)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==t) <span class="keyword">return</span> step;</span><br><span class="line">	viss[x] = <span class="number">1</span>;</span><br><span class="line">	ll used = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(dis[x]+w[i]==dis[to[i]]&amp;&amp;val[i]&gt;<span class="number">0</span>&amp;&amp;!viss[to[i]])&#123;</span><br><span class="line">			ll temp = <span class="built_in">dfs</span>(to[i],<span class="built_in">min</span>(val[i],step-used));</span><br><span class="line">			val[i] -= temp,val[i^<span class="number">1</span>] += temp,used += temp;</span><br><span class="line">			<span class="keyword">if</span>(used==step) <span class="keyword">return</span> used;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="最大费用最大流"><a href="#最大费用最大流" class="headerlink" title="最大费用最大流"></a>最大费用最大流</h3><p>用 spfa 找最大费用的一条路就可以了，其余同上。</p>
<p><strong>注：若初始的时候有未满流的边构成的正&#x2F;负环，那么后面就可能会出现环，否则一定不会出现 spfa 死循环的情况，如果出现，请检查板子是否敲错！</strong></p>
<h3 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h3><p>精简为一句话：往往是通过最大流来限制题目中要求的个数，然后用费用来表示在达到这个个数的时候费用最小&#x2F;最大。</p>
<p>或者是最大流越大费用就会越小&#x2F;越大，那么这个时候费用的作用就是用来保证个数一定恒为多少（赋值一个很大&#x2F;小的数就可以了），然后还能顺便得知最小&#x2F;最大费用。</p>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>每次增广出来的路径权值总和一定是单调的，即 $dis_t$​ 单调递增或者递减。</p>
<h3 id="Dijkstra-版本费用流"><a href="#Dijkstra-版本费用流" class="headerlink" title="Dijkstra 版本费用流"></a>Dijkstra 版本费用流</h3><p>我们知道，费用流的使用依赖于 SPFA，对于一些特殊的图（最大流很小）则需要用复杂度更加稳定的 Dijkstra 解决。</p>
<p>首先如果我们在每次跑 SPFA 之前得到了从源点到各个点的最短路长 $dis_i$，那么把边权设为 $dis_i+w_{i,j}-dis_j$ 继续跑单源最短路之后，最短路和原图的最短路是相同的，这样的话因为 $dis_i+w_{i,j} \ge dis_j$，所以边权非负，直接用 Dijkstra 即可。</p>
<p>但是费用流的过程可能需要跑多次 SPFA，每次跑的时候我们都得知道 $dis$，才能使用 Dijkstra 解决，知道 $dis$ 又必须 SPFA，我们考虑去掉新跑 SPFA 的环节，只在最开始跑费用流之前就跑 SPFA 一遍知道 $dis$。</p>
<p>假设原来的 $dis$ 是 $h$，那么跑了一遍费用流之后，有一些边会被从图中删除，一些边会添加进图中，被删除的边一定满足 $dis_i+(h_i+w_{i,j}-h_j)&#x3D;dis_j$，移项得 $w_{j,i}+(h_j+dis_j)-(h_i+dis_i)&#x3D;0$，（反向边会被添加进去）边权为 $0$。</p>
<p>原本就在图上的边则 $dis_i+(h_i+w_{i,j}-h_j)\ge dis_j$，移项得 $w_{i,j}+(h_i+dis_i)-(h_j+dis_j)\ge 0$，边权大于 $0$，所以这个时候，如果令边权为 $w_{i,j}+(h_i+dis_i)-(h_j+dis_j)$，满足边权大于等于 $0$，可以直接用 Dijkstra 做，设跑出来的最短路为 $dis2$，那么 $h_i \gets h_i+dis2_i$ 即可。（之前 $h_i \gets h_i+dis_i$）</p>
<p>于是算法流程就是：</p>
<ul>
<li>最开始跑 SPFA 最短路，得到最短路数组 $h$。</li>
<li>每次费用流之前令 $nw_{i,j}&#x3D;w_{i,j}+h_i-h_j$，然后让 $nw$ 数组去跑 Dijkstra 最短路，设最短路数组为 $dis$，那么 $h_i \gets h_i+dis_i$。</li>
<li>然后 dfs 增广的时候用 $nw$ 和 $dis$ 数组判断两个点在不在同一层即可。</li>
<li>最后用 $h$ 数组更新最大&#x2F;小费用。</li>
</ul>
<p>考虑这么做的正确性，似乎只需要证明每次 $h$ 都是真实的最短路就可以了，这个还算比较显然，因为每次跑完增广路之后有一些边会被删除，设新的 $h$ 为 $h2$，那么 $dis_i$ 就是 $h2_i-h_i$，$dis$ 数组就是 $h$ 数组的增量，跑最短路的时候每一条边的增量都是 $w_{i,j}+h_i-h_j$，意味着换了一条最短路，所以答案是对的。</p>
<p>综上，一次最短路时间复杂度就被优化成了严格 $O(\log)$，但是其实大部分时间没有 SPFA 快。</p>
<h2 id="上下界网络流"><a href="#上下界网络流" class="headerlink" title="上下界网络流"></a>上下界网络流</h2><h3 id="无源汇上下界网络可行流"><a href="#无源汇上下界网络可行流" class="headerlink" title="无源汇上下界网络可行流"></a>无源汇上下界网络可行流</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>有一个 $n$ 个点 $m$ 条边的无向图，没有源点和汇点。</p>
<p>对于每一条边都设置一个流量 $c$ 使得 $l \le c \le r$ 且对于每个点都要满足流量守恒。（$l$ 和 $r$ 是这条边的上下界）</p>
<p>这样的一组方案称为<strong>无源汇上下界网络可行流</strong>。</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>注意到有至少流 $l$ 个单位的限制，我们考虑去掉这个限制，首先一条边可以拆分成 $u \to v$ 容量为 $l$ 的边和 $u \to v$ 容量为 $r-l$ 的边。</p>
<p>其中容量为 $l$ 的边必须满流，容量为 $r-l$ 的边不能超流。</p>
<p>我们就可以考虑新建一个源点和汇点 $S$ 和 $T$，那么让 $S$ 向 $v$ 连接一条容量为 $l$ 的边，$u$ 向 $T$ 连接一条容量为 $l$ 的边，最后判断是否满流即可。（原图上的边只考虑 $r-l$ 的边，其余容量为 $l$ 的边不管就可以了）</p>
<p>考虑这个方法的正确性：</p>
<blockquote>
<p>如果整张图满流，我们可以将从 $S$ 到 $v$ 的边和 $u$ 到 $T$ 的边删去，然后因为 $v$ 到 $u$ 有多出来的 $l$ 的流量，我们就可以让 $u$ 流到 $v$ 点 $l$ 的流量，并且满足流量守恒，可以证明这是充要条件。（如果这 $l$ 的流量用了其它边 $l’$ 的流量，那么因为其它边也像这样连接了源点和汇点，所以可以相互转移）</p>
</blockquote>
<p>于是这道题就做完了，输出方案就是遍历每条边，检查当前消耗的流量数量加上 $l$ 即可。</p>
<p>代码如下，网络流使用 ISAP 实现。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 500005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,m,s,t,inf,i,j,x,y,l,r,z,ans,temp;</span><br><span class="line">ll la[N],ne[N],to[N],val[N],dis[N],cur[N],id[N],tot=<span class="number">1</span>,sum[N],anss[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(ll x,ll y,ll z,ll ID)</span></span>&#123;</span><br><span class="line">	tot++,ne[tot] = la[x],la[x] = tot,to[tot] = y,val[tot] = z,id[tot] = ID;</span><br><span class="line">	tot++,ne[tot] = la[y],la[y] = tot,to[tot] = x,val[tot] = <span class="number">0</span>,id[tot] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(ll x,ll step)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==t) <span class="keyword">return</span> step;</span><br><span class="line">	ll used = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=cur[x];i;i=ne[i])&#123;</span><br><span class="line">		cur[x] = i;</span><br><span class="line">		<span class="keyword">if</span>(dis[to[i]]+<span class="number">1</span>==dis[x]&amp;&amp;val[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			ll temp = <span class="built_in">dfs</span>(to[i],<span class="built_in">min</span>(val[i],step-used));</span><br><span class="line">			val[i] -= temp,val[i^<span class="number">1</span>] += temp,used += temp;</span><br><span class="line">			<span class="keyword">if</span>(used==step||dis[s]&gt;=inf) <span class="keyword">return</span> used;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(--sum[dis[x]]==<span class="number">0</span>) dis[s] = inf;</span><br><span class="line">	sum[++dis[x]]++;</span><br><span class="line">	<span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	s=<span class="number">0</span>,t=n+<span class="number">1</span>; </span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		cin&gt;&gt;x&gt;&gt;y&gt;&gt;l&gt;&gt;r;</span><br><span class="line">		anss[i]=r,<span class="built_in">merge</span>(x,y,r-l,i),<span class="built_in">merge</span>(s,y,l,<span class="number">-1</span>),<span class="built_in">merge</span>(x,t,l,<span class="number">-1</span>),ans+=l;</span><br><span class="line">	&#125;</span><br><span class="line">	inf = t-s+<span class="number">1</span>;</span><br><span class="line">	sum[<span class="number">0</span>] = inf;</span><br><span class="line">	<span class="keyword">while</span>(dis[s]&lt;inf)&#123;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;inf;i++) cur[i]=la[i];</span><br><span class="line">		ans-=<span class="built_in">dfs</span>(s,<span class="number">1e18</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(ans) cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(j=la[i];j;j=ne[j])&#123;</span><br><span class="line">				<span class="keyword">if</span>(id[j]!=<span class="number">-1</span>) anss[id[j]]-=val[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++) cout&lt;&lt;anss[i]&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Input:</span></span><br><span class="line"><span class="comment">4 6</span></span><br><span class="line"><span class="comment">1 2 1 2</span></span><br><span class="line"><span class="comment">2 3 1 2</span></span><br><span class="line"><span class="comment">3 4 1 2</span></span><br><span class="line"><span class="comment">4 1 1 2</span></span><br><span class="line"><span class="comment">1 3 1 2</span></span><br><span class="line"><span class="comment">4 2 1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">NO</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="有源汇上下界网络可行流"><a href="#有源汇上下界网络可行流" class="headerlink" title="有源汇上下界网络可行流"></a>有源汇上下界网络可行流</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>有一个 $n$ 个点 $m$ 条边的无向图，有源点和汇点。</p>
<p>对于每一条边都设置一个流量 $c$ 使得 $l \le c \le r$ 且对于每个点（除了源点和汇点）都要满足流量守恒。（$l$ 和 $r$ 是这条边的上下界）</p>
<p>这样的一组方案称为<strong>有源汇上下界网络可行流</strong>。</p>
<h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h4><p>考虑转化为<strong>无源汇上下界网络可行流</strong>，考虑连接 $t$ 到 $s$，边权无穷大，那么所有流量最后都会通过这条边回到 $s$ 点，那么对于 $s,t$ 两个点都满足了流量守恒性质。</p>
<p>然后按照无源汇上下界网络可行流计算方法计算即可，构造方案同理，但是此时可行流的大小是 $t$ 到 $s$ 那条边的流量。（不难想到）</p>
<p>代码就不放了，就是多了两个点和一条边。</p>
<h3 id="有源汇上下界网络最大-小流"><a href="#有源汇上下界网络最大-小流" class="headerlink" title="有源汇上下界网络最大&#x2F;小流"></a>有源汇上下界网络最大&#x2F;小流</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p>有一个 $n$ 个点 $m$ 条边的无向图，有源点和汇点。</p>
<p>对于每一条边都设置一个流量 $c$ 使得 $l \le c \le r$ 且对于每个点（除了源点和汇点）都要满足流量守恒。（$l$ 和 $r$ 是这条边的上下界）</p>
<p>这样的一组使得流量最大&#x2F;小的方案称为<strong>有源汇上下界网络最大&#x2F;小流</strong>。</p>
<h4 id="解决（最大流）"><a href="#解决（最大流）" class="headerlink" title="解决（最大流）"></a>解决（最大流）</h4><p>考虑先得到一组有源汇上下界网络可行流的答案。</p>
<p>那么有源汇上下界网络最大流就是在残量网络上继续跑最大流就可以了，证明不难。</p>
<p>跑最大流的时候一定要注意删去 $S$ 和 $T$ 的所有边并且删掉 $t$ 到 $s$ 的流量为无穷大的边，然后从原来的源点到汇点跑，并不是我们新建的源点和汇点。</p>
<p>代码中的 $S,T,s,t$ 变量稍有不同。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 2000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,m,s,t,inf,i,j,x[N],y[N],z[N],l[N],r[N],ans,temp,S,T,id[N],viss[N],summ;</span><br><span class="line">ll la[N],ne[N],to[N],val[N],dis[N],cur[N],tot=<span class="number">1</span>,sum[N],base;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(ll x,ll y,ll z,ll idd)</span></span>&#123;</span><br><span class="line">	tot++,ne[tot] = la[x],la[x] = tot,to[tot] = y,val[tot] = z,id[tot] = idd;</span><br><span class="line">	tot++,ne[tot] = la[y],la[y] = tot,to[tot] = x,val[tot] = <span class="number">0</span>,id[tot] = idd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(ll x,ll s,ll t,ll step)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==t) <span class="keyword">return</span> step;</span><br><span class="line">	ll used = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=cur[x];i;i=ne[i])&#123;</span><br><span class="line">		cur[x] = i;</span><br><span class="line">		<span class="keyword">if</span>(viss[to[i]]||id[i]&lt;base) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span>(dis[to[i]]+<span class="number">1</span>==dis[x]&amp;&amp;val[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			ll temp = <span class="built_in">dfs</span>(to[i],s,t,<span class="built_in">min</span>(val[i],step-used));</span><br><span class="line">			val[i] -= temp,val[i^<span class="number">1</span>] += temp,used += temp;</span><br><span class="line">			<span class="keyword">if</span>(used==step||dis[s]&gt;=inf) <span class="keyword">return</span> used;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(--sum[dis[x]]==<span class="number">0</span>) dis[s] = inf;</span><br><span class="line">	sum[++dis[x]]++;</span><br><span class="line">	<span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m,S=<span class="number">1</span>,T=n;</span><br><span class="line">	s=<span class="number">0</span>,t=n+<span class="number">1</span>,<span class="built_in">merge</span>(T,S,<span class="number">1e9</span>,<span class="number">-2</span>),base=<span class="number">-3</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		cin&gt;&gt;x[i]&gt;&gt;y[i]&gt;&gt;l[i]&gt;&gt;r[i];</span><br><span class="line">		<span class="built_in">merge</span>(x[i],y[i],r[i]-l[i],i),<span class="built_in">merge</span>(s,y[i],l[i],<span class="number">-1</span>),<span class="built_in">merge</span>(x[i],t,l[i],<span class="number">-1</span>),summ+=l[i];</span><br><span class="line">	&#125;</span><br><span class="line">	inf = t-s+<span class="number">1</span>;</span><br><span class="line">	sum[<span class="number">0</span>] = inf;</span><br><span class="line">	<span class="keyword">while</span>(dis[s]&lt;inf)&#123;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;inf;i++) cur[i]=la[i];</span><br><span class="line">		summ -= <span class="built_in">dfs</span>(s,s,t,<span class="number">1e9</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(summ!=<span class="number">0</span>)&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;please go home to sleep\n&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=la[T];i;i=ne[i]) <span class="keyword">if</span>(to[i]==S&amp;&amp;id[i]==<span class="number">-2</span>) ans+=(<span class="number">1000000000</span>-val[i]);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n+<span class="number">2</span>;i++) dis[i]=<span class="number">0</span>,sum[i]=<span class="number">0</span>;</span><br><span class="line">	inf = n,sum[<span class="number">0</span>] = inf,viss[s] = viss[t] = <span class="number">1</span>,base = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(dis[S]&lt;inf)&#123;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=inf;i++) cur[i]=la[i];</span><br><span class="line">		ans += <span class="built_in">dfs</span>(S,S,T,<span class="number">1e9</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Input:</span></span><br><span class="line"><span class="comment">4 6</span></span><br><span class="line"><span class="comment">1 2 1 2</span></span><br><span class="line"><span class="comment">2 3 1 2</span></span><br><span class="line"><span class="comment">3 4 1 2</span></span><br><span class="line"><span class="comment">4 1 1 2</span></span><br><span class="line"><span class="comment">1 3 1 2</span></span><br><span class="line"><span class="comment">4 2 1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">NO</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="解决（最小流）"><a href="#解决（最小流）" class="headerlink" title="解决（最小流）"></a>解决（最小流）</h4><p>根据斜对称性，我们可以从 $t$ 跑到 $s$ 的最大流，用可行流的流量减去这个最大流的流量就是最小流的流量了。（可能为负）</p>
<p>代码就不放了，就改了几个变量。</p>
<h3 id="上下界费用流"><a href="#上下界费用流" class="headerlink" title="上下界费用流"></a>上下界费用流</h3><p>求满足上下界的网络流同时花费的费用最小&#x2F;大。</p>
<p>很简单，不管是有源汇&#x2F;无源汇建图都一样，但是要加上 $l \times cost$（底线要求）。</p>
<p>并且我们新连接的边边权都是 $0$，对应的跑最小&#x2F;大费用最大流就可以了，并且因为没有流量的限制，甚至可以不用删边再跑一遍最大&#x2F;小流。</p>
<p>代码以 <a href="https://www.luogu.com.cn/problem/P4043">4043 [AHOI2014&#x2F;JSOI2014] 支线剧情</a> 为例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,m,i,j,s,t,inf,x,y,z,ans,temp,deg[N],summ;</span><br><span class="line">ll la[N],ne[N],to[N],val[N],dis[N],w[N],viss[N],vis[N],tot=<span class="number">1</span>,q[N],he,ta;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">mergea</span><span class="params">(ll x,ll y,ll z,ll wal)</span></span>&#123;</span><br><span class="line">	tot++,ne[tot] = la[x],la[x] = tot,to[tot] = y,val[tot] = z,w[tot] = wal;</span><br><span class="line">	tot++,ne[tot] = la[y],la[y] = tot,to[tot] = x,val[tot] = <span class="number">0</span>,w[tot] = -wal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=n+<span class="number">2</span>;i++) dis[i]=<span class="number">2e9</span>;</span><br><span class="line">	q[he=ta=<span class="number">1</span>]=s;</span><br><span class="line">	dis[s]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(he&lt;=ta)&#123;</span><br><span class="line">		ll tmp = q[he++];</span><br><span class="line">		vis[tmp] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(ll i=la[tmp];i;i=ne[i])&#123;</span><br><span class="line">			<span class="keyword">if</span>(val[i]&gt;<span class="number">0</span>&amp;&amp;dis[to[i]]&gt;dis[tmp]+w[i])&#123;</span><br><span class="line">				dis[to[i]] = dis[tmp]+w[i];</span><br><span class="line">				<span class="keyword">if</span>(!vis[to[i]]) vis[to[i]]=<span class="number">1</span>,q[++ta]=to[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dis[t]&lt;=<span class="number">1e9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(ll x,ll step)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==t) <span class="keyword">return</span> step;</span><br><span class="line">	viss[x] = <span class="number">1</span>;</span><br><span class="line">	ll used = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(viss[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span>(dis[to[i]]==dis[x]+w[i]&amp;&amp;val[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			ll temp = <span class="built_in">dfs</span>(to[i],<span class="built_in">min</span>(val[i],step-used));</span><br><span class="line">			val[i] -= temp,val[i^<span class="number">1</span>] += temp,used += temp;</span><br><span class="line">			<span class="keyword">if</span>(used==step) <span class="keyword">return</span> used;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll S,ll T,ll INF)</span></span>&#123;</span><br><span class="line">	s = S,t = T,inf = INF;</span><br><span class="line">	ll ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">spfa</span>())&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=n+<span class="number">2</span>;i++) viss[i]=<span class="number">0</span>;</span><br><span class="line">		ans += <span class="built_in">dfs</span>(s,<span class="number">1e9</span>)*dis[t];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;x;</span><br><span class="line">		<span class="keyword">while</span>(x--) cin&gt;&gt;y&gt;&gt;z,deg[i]--,deg[y]++,ans+=z,<span class="built_in">mergea</span>(i,y,<span class="number">1e9</span>,z);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++) <span class="built_in">mergea</span>(i,n+<span class="number">1</span>,<span class="number">1e9</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(deg[i]&lt;<span class="number">0</span>) <span class="built_in">mergea</span>(i,n+<span class="number">2</span>,-deg[i],<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span>(deg[i]&gt;<span class="number">0</span>) <span class="built_in">mergea</span>(<span class="number">0</span>,i,deg[i],<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">mergea</span>(n+<span class="number">1</span>,<span class="number">1</span>,<span class="number">1e9</span>,<span class="number">0</span>);</span><br><span class="line">	ans += <span class="built_in">solve</span>(<span class="number">0</span>,n+<span class="number">2</span>,n+<span class="number">3</span>);</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Input:</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">2 2 1 3 2</span></span><br><span class="line"><span class="comment">2 4 3 5 4</span></span><br><span class="line"><span class="comment">2 5 5 6 6</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">24</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="模拟网络流"><a href="#模拟网络流" class="headerlink" title="模拟网络流"></a>模拟网络流</h2><h3 id="模拟最大流"><a href="#模拟最大流" class="headerlink" title="模拟最大流"></a>模拟最大流</h3><p>我们一般不直接模拟最大流（有的题目亦是如此），而是把它转化为最小割进行计算。</p>
<p>模拟最大流，就是利用各种手段（一般是 dp，或者其他的方式）来模拟网络流增加流的过程，但是如果是模拟最小割的话就是模拟割边的过程。</p>
<p>比如一道例题：</p>
<blockquote>
<p>小明升任了 CF 国的大总管，他管辖的 $n$ 个城市，编号为 $1 \dots n$ 。每个城市生产了 $p_i$ 个货物，限制最多可以卖掉 $s_i$ 个货物。对于每两个城市 $i,j$，如果 $i&lt;j$，则可以最多从 $i$ 运送 $c$ 个货物到 $j$ 。注意不能反向运送，却可以在多个城市之间送来送去。现在小明想知道，经过运输后，最多能卖掉多少个货物。</p>
</blockquote>
<p>我们可以建出来图，图就是源点向所有点都连接了一条边权为 $p_i$ 的边，所有点都向汇点连接了一条边权为 $s_i$ 的边，然后每个 $i&lt;j$ 都连接了 $c$ 的边。</p>
<p>图是十分规范的，我们可以用 dp 求解。</p>
<p>设 $dp_{i,j}$ 表示前 $i$ 个点，有 $j$ 个点到 $S$ 的边没有被割掉的最小花费，那么转移就是要么保留这个点到 $S$ 的边，要么保留这个点到 $T$ 的边就可以了，方程很好列出来：</p>
<p>$$<br>f_{i,j}&#x3D;\min(f_{i-1,j}+p_i+c \times j,f_{i-1,j-1}+s_i)<br>$$</p>
<p>最后 $O(n^2)$ 就解决了，需要滚动数组优化，当然还有贪心的做法，此处就不强调了。</p>
<h3 id="模拟费用流"><a href="#模拟费用流" class="headerlink" title="模拟费用流"></a>模拟费用流</h3><p>这才是重点，模拟最大流的题很少，但是模拟费用流的题目却很多。</p>
<p>模拟费用流也是通过贪心等手段维护每次增广的流量以及反悔边的选择，一般需要用到优先队列，线段树等可删除结构，视具体的题目而定。</p>
<p>解决这种题可以从两个方面入手：</p>
<ul>
<li><p>直接贪心。</p>
</li>
<li><p>建出来费用流的图，然后再根据反悔边判断，但是必须要保证增广次数乘上每次增广的代价可以忍受。</p>
</li>
</ul>
<p>这种题需要多练习，可以参考一下 <a href="https://www.luogu.com.cn/problem/solution/P5470">P5470 [NOI2019] 序列 题解</a> 或者 <a href="https://www.luogu.com.cn/blog/674469/solution-p4217">P4217 [CTSC2010] 产品销售 题解</a>，这两道题目一个是用了优先队列维护退流，一个是用了线段树维护流量，都是好的例子。</p>
<p>并且它们都是先建图，然后考虑各种反悔边，值得一提的是这些图一般都很有规律（忽略边权），便于维护。</p>
<p>还可以直接用贪心来做的题目，但是这个不是重点就跳过了。</p>
<p>那么，网络流就到此结束了。</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>图论</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串学习笔记</title>
    <url>/2024/01/07/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="KMP-及其相关"><a href="#KMP-及其相关" class="headerlink" title="KMP 及其相关"></a>KMP 及其相关</h2><p>见广义 KMP 以及其扩展（Broad Sense Kmp）。</p>
<h2 id="trie-及其相关"><a href="#trie-及其相关" class="headerlink" title="trie 及其相关"></a>trie 及其相关</h2><h3 id="普通-trie"><a href="#普通-trie" class="headerlink" title="普通 trie"></a>普通 trie</h3><p>这里不再赘述，主要就是插入一个字符串（一个数字），然后进行树上 dp 的一个过程。</p>
<h3 id="可持久化-trie"><a href="#可持久化-trie" class="headerlink" title="可持久化 trie"></a>可持久化 trie</h3><p>类似于可持久化线段树的建树过程，复制每个节点，然后对于相应的子节点进行递归处理（线段树是二叉，trie 是 $|C|$ 叉，$C$ 是字符集）</p>
<p>所以建树的过程大概是 $O(\sum |S| \times |C|)$，一般把 $C$ 看做一个常数。（序列除外）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string s,ll s1,ll s2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">		cnt[s1] = cnt[s2];</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++) trie[s1][j]=trie[s2][j];</span><br><span class="line">		cnt[s1]++;</span><br><span class="line">		trie[s1][(ll)(s[i]-<span class="string">&#x27;a&#x27;</span>)] = ++tot;</span><br><span class="line">		s1 = trie[s1][s[i]-<span class="string">&#x27;a&#x27;</span>],s2 = trie[s2][s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	cnt[s1] = cnt[s2];</span><br><span class="line">	<span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++) trie[s1][j]=trie[s2][j];</span><br><span class="line">	cnt[s1]++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>$cnt$ 是子树元素个数，然后 $trie_{i,j}$ 就是从 $i$ 经过字符为 $j$ 的边到达的节点，我们就可以愉快地树上 统计&#x2F;dp 了。</p>
<p>具体操作同线段树，也是处理一个前缀的序列问题（字符串的前后缀，异或的结果等）。</p>
<p>可持久化 trie 大概就是这些。</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>OI</tag>
        <tag>KMP</tag>
        <tag>trie</tag>
      </tags>
  </entry>
  <entry>
    <title>小技巧</title>
    <url>/2024/01/07/%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="随机染色"><a href="#随机染色" class="headerlink" title="随机染色"></a>随机染色</h1><p>有若干组线段，每组线段没有交集，然后求出每组线段至少选一个，求最后这些线段最大的交集。</p>
<p>我们尝试对不同线段集合的覆盖区分开来，比较显然的就是每个不同的线段分配一个权值 $a_i$，然后取一下覆盖当前小段的线段权值和，排序区分即可。</p>
<p>但是这样的正确性可能会有所问题，我们可以考虑将加法换成异或，这样子的话，如果 $0 \le a_i \le 2^{63}-1$ 的话，出问题的可能性就近乎为 $0$ 了。</p>
<p>如果需要离散化的话，一样的，把点转化为开区间的形式就可以了。</p>
<p>模板代码：<br>（每个集合只有两个线段）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">solve1</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=X;i++) lenth[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="comment">//随机赋值</span></span><br><span class="line">		ll temp;</span><br><span class="line">		temp = <span class="built_in">rnd</span>();</span><br><span class="line">		lenth[tx1[i]] ^= temp;</span><br><span class="line">		lenth[tx2[i]+<span class="number">1</span>] ^= temp;</span><br><span class="line">		temp = <span class="built_in">rnd</span>();</span><br><span class="line">		lenth[<span class="number">1</span>] ^= temp;</span><br><span class="line">		lenth[tx1[i]] ^= temp;</span><br><span class="line">		lenth[tx2[i]+<span class="number">1</span>] ^= temp;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//差分排序找相同</span></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">2</span>;i&lt;=X;i++) lenth[i]^=lenth[i<span class="number">-1</span>];</span><br><span class="line">	<span class="built_in">sort</span>(lenth+<span class="number">1</span>,lenth+X+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>,j=<span class="number">1</span>;i&lt;=X;i=j)&#123;</span><br><span class="line">		<span class="keyword">while</span>(j&lt;=X)&#123;</span><br><span class="line">			<span class="keyword">if</span>(lenth[j]!=lenth[i]) <span class="keyword">break</span>;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//取最大就可以了</span></span><br><span class="line">		ans = <span class="built_in">max</span>(ans,j-i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="光速乘法"><a href="#光速乘法" class="headerlink" title="光速乘法"></a>光速乘法</h1><p>如果我们对于两个数相乘要模上一个数，那么我们可以写成下面这个样子：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mul</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x*y-(ll)((__float128)x/mod*y)*mod+mod)%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用于 $x$ 和 $y$ 相乘大于 <code>__int128</code> 的时候。</p>
<p>常数偏大，谨慎使用。</p>
<h1 id="快读快写"><a href="#快读快写" class="headerlink" title="快读快写"></a>快读快写</h1><p>用于快速读入和输出一些数据，在 <code>.in</code> 和 <code>.out</code> 文件较大的时候加速明显。</p>
<h2 id="快速读入"><a href="#快速读入" class="headerlink" title="快速读入"></a>快速读入</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">char</span> buf[<span class="number">1000000</span>],*p=buf,*q=buf;</span><br><span class="line">	<span class="keyword">return</span> p==q&amp;&amp;(q=(p=buf)+<span class="built_in">fread</span>(buf,<span class="number">1</span>,<span class="number">1000000</span>,stdin),p==q)?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)res=res*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这份快速读入没有判断负数的情况，运用的时候应当小心。</p>
<h2 id="快速输出"><a href="#快速输出" class="headerlink" title="快速输出"></a>快速输出</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> obuf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p3=obuf; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span>&#123; </span><br><span class="line">	p3-obuf&lt;=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)?(*p3++=c):(<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout),p3=obuf,*p3++=c); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(ll x)</span></span>&#123; </span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">pc</span>(<span class="string">&#x27;-&#x27;</span>),x=-x; </span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">write</span>(x/<span class="number">10</span>); </span><br><span class="line">	<span class="built_in">pc</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用快速输出的时候程序<strong>结尾</strong>一定要使用这句话：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout);</span><br></pre></td></tr></table></figure>

<p>否则会没有输出。</p>
<h1 id="保序回归"><a href="#保序回归" class="headerlink" title="保序回归"></a>保序回归</h1><p>给定若干组限制条件，这些限制条件构成了一个 DAG，形如：$a_x \ge a_y$。</p>
<p>需要求出一组 $a$ 满足 $\sum_{i&#x3D;1}^n |a_i-c_i|$ 最小。</p>
<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>如果我们强制所有 $a$ 在一个区间 $[l,r]$，那么 $a’$（新求出的答案）与 $a$（不限制取值区间的答案）有下面的关系：</p>
<p>$$<br>a’_i &#x3D; \begin{cases}<br>l &amp; a_i &lt;l \\<br>r &amp; a_i &gt; r\\<br>a_i &amp; l \le a_i \le r<br>\end{cases}<br>$$</p>
<p>因此我们可以使用整体二分法解决，即是每次选取区间 $[mid,mid+1]$，然后用特定的算法判断点的取值在 $[1,mid]$ 还是在 $[mid+1,\text{inf}]$，最后递归下去即可，时间复杂度为 $O(V \log n )$。</p>
<p>当然，大部分的时候 $c$ 中的值在 $a$ 中都有出现，于是离散化即可，时间复杂度就是 $O(n \log n)$。</p>
<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><p>直径的一些性质，需要积累一下：</p>
<ul>
<li>一个点所在树中最远的节点一定是这棵树的直径的两个端点之一。</li>
<li>如果两棵树合并成了一棵新的树，那么设旧树的直径是 $(a,b),(c,d)$，那么新树的直径的端点一定在 $a,b,c,d$ 中，因此，直径具有可合并性。</li>
</ul>
<h1 id="图上随机游走"><a href="#图上随机游走" class="headerlink" title="图上随机游走"></a>图上随机游走</h1><p>此处主要介绍网格图的随机游走问题，此问题可以简化为下面的版本：</p>
<blockquote>
<p>有一个长 $n$ 宽 $m$ 的网格图，如果身处节点 $(i,j)$ 那么走到 $(i-1,j)$ 的概率是 $p_{i,j,1}$，走到 $(i,j-1)$ 的概率是 $p_{i,j,2}$，走到 $(i+1,j)$ 的概率是 $p_{i,j,3}$，走到 $(i,j+1)$ 的概率是 $p_{i,j,4}$，问每个节点走到 $(n,m)$ 的期望步数是多少，对 $10^9+7$ 取模。</p>
</blockquote>
<h2 id="方法-1-高斯消元"><a href="#方法-1-高斯消元" class="headerlink" title="方法 1 高斯消元"></a>方法 1 高斯消元</h2><p>对于每个节点都可以建立一个方程，设 $f_{i,j}$ 表示 $(i,j)$ 到 $(n,m)$ 的期望步数，那么有：<br>$$<br>f_{i,j} &#x3D;<br>\begin{cases}</p>
<p>0 &amp; i&#x3D;n,j&#x3D;m \\<br>p_{i,j,1}f_{i-1,j}+p_{i,j,2}f_{i,j-1}+p_{i,j,3}f_{i+1,j}+p_{i,j,4}f_{i,j+1} &amp; \text{Otherwise}</p>
<p>\end{cases}<br>$$<br>然后对 $nm$ 个方程暴力消元即可，时间复杂度 $O(n^6)$。</p>
<h2 id="方法-2-高斯消元—优化"><a href="#方法-2-高斯消元—优化" class="headerlink" title="方法 2 高斯消元—优化"></a>方法 2 高斯消元—优化</h2><p>注意到高斯消元的时候有很多地方的值都是 $0$，重复计算它们并不优，于是我们考虑跳过这些不必计算的元素。</p>
<p>假如当前在对位置 $(i,j)$ 的方程消元（消去其他方程中 $(i,j)$ 项的系数），此处的消元指的是消成阶梯型矩阵，然后最后再 $O(n^4)$ 反过来带入求值，令下图中绿色节点为位置 $(i,j)$：</p>
<p><img src="/img/gauss1.png"></p>
<p>那么位置 $(i,j)$ 这个方程仅有橙色、绿色位置是有值的，并且位置 $(i,j)$ 有值的方程也只有橙色、绿色位置的方程，因此我们单次消元的时间复杂度就是 $O(n^2)$，一共 $O(n^2)$ 次消元，最后带入即可，总的时间复杂度为 $O(n^4)$。</p>
<h2 id="方法-3-主元法"><a href="#方法-3-主元法" class="headerlink" title="方法 3 主元法"></a>方法 3 主元法</h2><p>我们发现，如果设第一行的未知数为 $x_1,x_2,\dots,x_n$，那么剩下 $n-1$ 行每个 $f$ 都可以唯一的用 $x_1,x_2,\dots,x_n$ 表示出来，最后再根据最后一行 $n$ 个方程 $n$ 个未知数来得到 $x_1,x_2,\dots,x_n$，最后对每个位置带入求值即可。</p>
<p>因为：<br>$$<br>f_{i,j} &#x3D;<br>\begin{cases}</p>
<p>0 &amp; i&#x3D;n,j&#x3D;m \\<br>p_{i,j,1}f_{i-1,j}+p_{i,j,2}f_{i,j-1}+p_{i,j,3}f_{i+1,j}+p_{i,j,4}f_{i,j+1} &amp; \text{Otherwise}</p>
<p>\end{cases}<br>$$<br>所以有：$-p_{i,j,3}f_{i+1,j}&#x3D;p_{i,j,1}f_{i-1,j}+p_{i,j,2}f_{i,j-1}+p_{i,j,4}f_{i,j+1}-f_{i,j}$，然后直接根据一行计算出下一行的值，再用边界为 $0$ 的情况解 $n$ 个未知数的方程即可，时间复杂度 $O(n^3)$。</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>随机染色</tag>
        <tag>技巧</tag>
        <tag>光速乘</tag>
        <tag>快速读写</tag>
        <tag>高斯消元</tag>
        <tag>保序回归</tag>
        <tag>树的直径</tag>
        <tag>随机游走</tag>
      </tags>
  </entry>
  <entry>
    <title>广义 KMP 以及其扩展（Broad Sense Kmp）</title>
    <url>/2024/01/07/%E5%B9%BF%E4%B9%89-KMP-%E4%BB%A5%E5%8F%8A%E5%85%B6%E6%89%A9%E5%B1%95%EF%BC%88Broad-Sense-Kmp%EF%BC%89/</url>
    <content><![CDATA[<p>写在前面：这篇文章不介绍普通的 KMP 算法，主要介绍这个算法的一些扩展。</p>
<blockquote>
<p>Update：其实是针对于一些字符串算法的扩展并且对字符串和普通数字序列的一些性质的挖掘和分析、解决。</p>
</blockquote>
<h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><p>众所周知，我们认为下面这份代码是 KMP 算法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,k=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">	<span class="keyword">while</span>(k&amp;&amp;s[i]!=s[k+<span class="number">1</span>]) k=ne[k];</span><br><span class="line">	<span class="keyword">if</span>(s[i]==s[k+<span class="number">1</span>]) k++;</span><br><span class="line">	ne[i] = k;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>实际上它是 MP 算法，Knuth 则在 MP 算法的基础上提出了优化，同时改变了 $\text{next}$ 数组的含义。</p>
<p>但是如果判断一个串是不是包含另外一个串，则还是判断是否有 $\text{next}_i &#x3D; m$（$m$ 为另一个串的长度）。</p>
<p>如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,k=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">	<span class="keyword">while</span>(k&amp;&amp;s[i]!=s[k]) k=ne[k];</span><br><span class="line">	i++,k++;</span><br><span class="line">	<span class="keyword">if</span>(s[i]==s[k]) ne[i]=ne[k];</span><br><span class="line">	<span class="keyword">else</span> ne[i]=k;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>前面那份代码可以求出来最小循环节，但是后面那份代码就不可以，而且前面那份代码如果在字符串末尾增减字符，再次跑 <code>while</code> 循环的时候时间会爆，即不满足单次复杂度严格低于 $O(n)$。</p>
<p>后面这份代码不可以求最小循环节，但是增减字符后，再跑 <code>while</code> 循环的时候时间就爆不了（至少目前卡不掉）。</p>
<p>但是这并不是文章的重点。</p>
<h1 id="广义-KMP"><a href="#广义-KMP" class="headerlink" title="广义 KMP"></a>广义 KMP</h1><p>众所周知，KMP 是跑子串匹配的算法。</p>
<p>普通的 (K)MP 算法，是指找到 $S$ 的一个前缀等于后缀的字符串的最大长度，这个字符串的长度必须小于 $S$ 的长度。</p>
<p>我们则可以尝试找到字符串的一些性质：</p>
<ul>
<li>字符串的等于判断具有传递性，即如果 $a&#x3D;b,b&#x3D;c$ 那么 $a&#x3D;c$。</li>
<li>如果 $a&#x3D;b$ 那么对于任意 $a_{l \sim r} &#x3D; b_{l \sim r}$ 。</li>
<li>字符串的每个元素一定只有 $26$ 种。</li>
</ul>
<p>我们需要发挥想象力，不妨把字母换成数字，再重新定义任意两个序列相同的条件，满足上面两条性质，我们就可以根据 (K)MP 来找 $b$ 这个序列在 $a$ 中出现的次数以及位置，特别的，如果不要求最长的前后缀长度，我们甚至可以运用 KMP 算法来支持末尾添加数字删除数字的操作。</p>
<h2 id="例-1"><a href="#例-1" class="headerlink" title="例 1"></a>例 1</h2><p>比如这道题：</p>
<blockquote>
<p>序列 $a$ 和序列 $b$ 相同，当且仅当对于所有 $a_i &#x3D; a_j$，$b_i &#x3D; b_j$；否则 $b_i \ne b_j$（$j&lt;i$），求 $b$ 在 $a$ 中出现了多少次。</p>
</blockquote>
<p>我们可以发现这个规定满足上面两条性质，那么可以修改一下 KMP 的代码，使得时间复杂度在 $O(n \log n)$ 以内。</p>
<p>比较好的做法是对于每个 $a_i$ 找出前面第一个与它相同的数字，记录一下他们之间的距离为 $a’_i$，$b$ 数组同理，如果 $a’&#x3D;b’$ 那么 $a&#x3D;b$。（如果找不到，那么距离为 $-1$ 即可，只需要不与可能出现的距离相同就可以）</p>
<p>于是我们直接判断即可，在 (K)MP 的算法执行过程当中：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,k=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">	<span class="keyword">while</span>(k&amp;&amp;s[i]!=s[k+<span class="number">1</span>]) k=ne[k];</span><br><span class="line">	<span class="keyword">if</span>(s[i]==s[k+<span class="number">1</span>]) k++;</span><br><span class="line">	ne[i]=k;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>如果 $s_i&#x3D;s_{k+1}$ ，那么有一个隐含的条件就是 $s_{1 \sim k}&#x3D;s_{i-k \sim i-1}$。</p>
<p>相当于我们在跑 (K)MP 的时候，只需要判断新加进去的数与之前加进去的数的关系就可以了。</p>
<p>对于这道题来说，如果 $a_{1 \sim k}&#x3D;a_{i-k \sim i-1}$，那么我们需要判断 $a_{k+1}$ 加到前面一个子串末尾和 $a_i$ 加到后面的子串末尾相不相同就可以了。</p>
<p>把他们分别距离之前在这个串里面与他们的值相等的数找出来，计算距离就可以了。</p>
<p>那么模式串和文本串匹配也是这样的一个道理。</p>
<p>所以算法的时间复杂度为 $O(n \times \text{check 的时间复杂度})$，在这里总时间复杂度为 $O(n)$，因为不需要更多的信息，同时可以扩展到在末尾添加删除的操作。</p>
<h1 id="广义-KMP-及其扩展"><a href="#广义-KMP-及其扩展" class="headerlink" title="广义 KMP 及其扩展"></a>广义 KMP 及其扩展</h1><p>我们发现，运用了广义 KMP，那么就可以解决一些比较难以解决的问题。</p>
<p>类似于上面两个例子，如果没有这个广义 KMP 几乎上无法做出来，甚至可以加上求最长的前缀等于后缀的问题，然而我们还有更多的东西可以扩展：</p>
<blockquote>
<p><a href="https://oi.wiki/string/ac-automaton/">AC 自动机</a>，<a href="https://oi.wiki/string/z-func/">Z 函数</a> 等与 KMP 有关的算法。</p>
</blockquote>
<p>对于 Z 函数的构建，我们依然可以采用这种方法；但是 AC 自动机仅接受 $26$ 的字符，还不如直接用暴力。</p>
<p>因此，最直接的地方是用在 Z 函数上。</p>
<p>Z 函数的运用和 KMP 的运用差不多，此处就不再赘述了，大概也是运用到了字符串的一些性质。</p>
<h2 id="例-2"><a href="#例-2" class="headerlink" title="例 2"></a>例 2</h2><blockquote>
<p>承袭例 1 中 $a&#x3D;b$ 的条件，对于给定的序列 $c$ 的每个 $1 \le i \le n$，找到最大的一个 $k$，使得 $i+k-1 \le n$ 且 $c_{1 \sim k}&#x3D;c_{i \sim i+k-1}$。</p>
</blockquote>
<p>很显然，把 Z 函数构建过程中移动左右端点的判断条件改成之前的条件就可以了。</p>
<p>时间复杂度依然为这个算法时间复杂度乘上 $\text{check}$ 的时间复杂度。</p>
<p>最后输出 Z 函数的值即可。</p>
<h1 id="其它字符串相关扩展"><a href="#其它字符串相关扩展" class="headerlink" title="其它字符串相关扩展"></a>其它字符串相关扩展</h1><p>这里则主要介绍另外一种字符串相关的算法 manacher。</p>
<p>manacher 也是用于求解回文串的问题，我们依然可以把这个方法加到 manacher 的移动左右端点上面。</p>
<h2 id="例-3"><a href="#例-3" class="headerlink" title="例 3"></a>例 3</h2><blockquote>
<p>承袭例 1 中 $a&#x3D;b$ 的条件，对于给定的序列 $c$ 的每个 $1 \le i \le n$，找到最大的一个 $k$，使得 $i+k-1 \le n,i \ge k$ 且 $c_{i-k+1 \sim i}&#x3D;c_{i+k-1 \sim i}$。（后一个字符串是倒过来的）</p>
</blockquote>
<p>这就是一个模板的 manacher 题目，那么我们依然加上 $\text{check}$ 函数就可以了。</p>
<p>时间复杂度依然为这个算法时间复杂度乘上 $\text{check}$ 的时间复杂度。</p>
<p>甚至可以在现有 manacher 题目上做出进一步修改，此处的例题仅为注重展示此算法，而不是为了难住读者。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们此处就是把一个字符串改变成了一个序列，并且重载了字符串的 $&#x3D;$ 运算符，使得序列满足了上述算法的一些性质来解决较为困难的问题。</p>
<p>然后与上述算法相关的自动机们和所有靠移动指针判断是否相等（一次常数以内）的算法，都可以适用到这个方法。（AC 自动机则在条件允许的情况下可以用这个方法，回文自动机同理）</p>
<p>但是我们的后缀相关数据结构就不能使用这种方法，因为它们主要解决的是字典序排名的问题，与字符串匹配没有太大关系，因此不行。</p>
<p>对于这篇文章，旨在对 KMP 的一些相关习题进行总结，比如很多题目都可用这个方法解决，而我们也可以用这种方法出一些质量较高的题目。</p>
<blockquote>
<p>比如：<a href="https://www.luogu.com.cn/problem/P8085">[COCI2011-2012#4] KRIPTOGRAM</a>。</p>
</blockquote>
<p>即使很多题目都可以用奇奇怪怪的 hash AC，但是这种方法也不失于一种正确性稳定的算法。</p>
<p>综上，这是我在学习 KMP 时候的一些想法，如有不足请大家多多指出，笔者也好修改这篇文章，以免误导更多的读者。</p>
<p>—The End—</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>OI</tag>
        <tag>KMP</tag>
      </tags>
  </entry>
  <entry>
    <title>插入类型 dp</title>
    <url>/2024/01/07/%E6%8F%92%E5%85%A5%E7%B1%BB%E5%9E%8B-DP-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="插入类型-DP"><a href="#插入类型-DP" class="headerlink" title="插入类型 DP"></a><strong>插入类型 DP</strong></h1><h2 id="形式"><a href="#形式" class="headerlink" title="形式"></a><strong>形式</strong></h2><ul>
<li><p>多为 $n$ 个元素无法重复使用，需要给定一个排列，满足一定条件或是求有多少个排列满足一定条件。</p>
</li>
<li><p>$n$ 一般在 $100 \sim 5 \times 10^3$ 左右。</p>
</li>
<li><p>满足一些函数图像，类似于波浪函数，且答案与每个波浪和波浪的顶点有关（函数的 $x$ 坐标为下标，$y$ 坐标为下标上数的值）。</p>
</li>
</ul>
<p>满足以上三个条件的 DP 大部分是插入类型的 DP。</p>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a><strong>引入</strong></h2><p>先来看一道例题：</p>
<ul>
<li>对于一个正整数序列 $a$，长度为 $n(n \ge 3)$，如果对于所有的 $2 \le i \le n-1$，都有 $a_{i-1}+a_{i+1}\ge 2a_i$，就称这个序列是“美丽的”。现在给你另一个正整数序列 $b$，问你有多少种排列这个序列的方式使得这个序列是美丽的。（$n \le 100$）</li>
</ul>
<p>这道例题看似无从下手，但是我们把式子变换一下可以发现：<br>$$<br>a_{i-1}+a_{i+1} \ge 2a_i \to a_{i-1}-a_i \ge a_i-a_{i+1}<br>$$</p>
<p>即差分递增，差分递增有什么好处呢？把所有满足条件的 $a$ 序列列举出来，就会发现它其实是先是一段递减，然后中间可能会有平的一段（差分为 $0$），最后一段递增。事实上就是一个有平台的单谷函数。</p>
<p>有了这个性质，我们按 $a$ 从小到大排序，然后依次插入进这个函数，每个数可以插入到函数的左边，或者右边。（因为已经排好序了）</p>
<p>于是设 $dp_{i,j,k,l}$ 表示左边为 $i,j$ 且 右边为 $k,l$ 的方案数总和。</p>
<p>注意观察：这个 DP 没有后效性，且能够顺利转移，满足子问题包含的性质。</p>
<p>综上，可以 $O(n^4)$ 解决。</p>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a><strong>实践</strong></h2><p>容易看出，引子是一个水题，因为我们还没有牵扯到其它的限制，只是规定元素不能重复选，接下来我们看一下这道题：</p>
<p><a href="https://www.luogu.com.cn/problem/P5999">CEOI2016-kangaroo</a></p>
<p>这道题就满足了上面三条形式：  </p>
<ul>
<li><p>$n$ 个元素无法重复使用，求有多少个排序满足一定条件。</p>
</li>
<li><p>$2 \le n \le 2\times 10^3$</p>
</li>
<li><p>波浪函数，每个波浪的长度为 $1$</p>
</li>
</ul>
<p>这个时候，考虑怎么转换已经没有用了，因为它并不满足类似于差分递增这种规律，使得有一个单调性在里面，所以我们按照这三条形式的最后一条，即波浪进行入手。</p>
<p>先看下面一幅图：</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/zxe1whnd.png"><br>（如图，这是$n&#x3D;6,s&#x3D;4,t&#x3D;5$ 时候的一种情况。其中 $y$ 轴代表点的编号，$x$ 轴代表访问的顺序，即从 $1$ 访问到 $n$）</p>
<p>那么我们观察到这个函数图像有 $5$ 段（因为每段必须长度为 $1$）。段长不好设计 DP，那我们考虑用段的个数来设计 DP。</p>
<p>这种类型的 DP，有几个要素：</p>
<ul>
<li>确定元素添加顺序</li>
<li>确定状态的转移</li>
<li>确定对于 $s,t$ 的特判</li>
</ul>
<p>我们一个问题一个问题解决。</p>
<h3 id="确定元素添加顺序"><a href="#确定元素添加顺序" class="headerlink" title="确定元素添加顺序"></a><strong>确定元素添加顺序</strong></h3><p>没什么好说的，既然是排列，那就要从 $1\sim n$ 挨个添加。</p>
<h3 id="确定状态转移"><a href="#确定状态转移" class="headerlink" title="确定状态转移"></a><strong>确定状态转移</strong></h3><p>因为必须在 $O(n^2)$ 时间内通过此题，所以设 $dp_{i,j}$ 表示从 $1 \sim i$ 中，分成了 $j$ 段的方案数，容易得知，最后的答案是 $dp_{n,1}$。</p>
<p>什么叫段数，请看这幅图：</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/g8xedh1w.png"></p>
<p>这里，就是把 $1 \sim 5$ 分成了两段：$A \sim D,F \sim F$。</p>
<p>因为我们的 $s$ 需要特判，所以把它归在 $B \sim D$ 这个段里，准确的说，每个段应该是类似于 $M$ 形的（可以有很多拐弯，但是第一个是上升，最后一个下降）。为了准确计算，$s$ 和 $t$ 都并到相邻的段里面。</p>
<p>考虑转移，因为我们选择了 $1\sim n$ 这种顺序，那么我们每个 $i$ 都是在选了比它更小的数之后决策，再加上每个段是 $M$ 形状，所以 $i$ 可以把两个段合并成一个，或者自己新开一个段。</p>
<p>综上，DP 方程就可以出来了：<br>$$dp_{i,j} &#x3D; \begin{cases} dp_{i-1,j}+dp_{i-1,j-1} &amp; i&#x3D;s \text{ or } i&#x3D;t\ jdp_{i-1,j+1}+(j-[i&gt;s]-[i&gt;t])dp_{i-1,j-1} &amp; \text{other wise} \end{cases}$$</p>
<p>总述一下，这种类型的题其实大部分都是对段进行 DP，然后考虑转移和特判，之后就可以过了。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>此类 DP 被称为 “插入DP” 或者是 “连续段DP”，主要都是依据段数来转移状态。</p>
<p>模型：$1 \sim n$ 的元素不能重复使用，按照某个顺序排列 $i,j$ 能够使得 $i,j$ 的贡献成为定值。</p>
<p><strong>不同之处：有些题目固定了左右两端点，有些题目没有固定左右两端点。</strong></p>
<p>依据题目的不同要求，大部分题目中的段是可以 $A,W,V,M$ 等形状的，但少部分题目（例题）则限制了形状，但归根结底转移都是一样的套路。</p>
<p>设计转移时通常 <strong>按照一定顺序插入，且知道了这个顺序就知道了题目中要求的函数的值（函数的值是根据数的一定顺序决定的）</strong> 且 <strong>每个元素只有合并两段、接续一段、新开一段等操作</strong>，这样才能更好的帮助我们维护 DP 数组。（有些时候元素插入在一段的左&#x2F;右边的结果不一样，需要再开一维）</p>
<p>推这种 DP 式子的时候，我们会发现有些情况可能会缠在一起，让人分不清楚。这里要着重说一下：<strong>每个状态其实都是在为后面的状态作准备</strong>。</p>
<p>比如：</p>
<p>明明可以写为接在一个段的后面，DP 方程中偏要写为新开一个段。这就是因为新开一个段能够保证这个元素的左右两边都是比它大的数，如果是接续一个段，那么只能保证一端比它大，一端比它小。</p>
<p>所以，我们对于新开一个段和接续一个段的状态会不会重复的问题，只需要考虑它们最后形成的状态会不会重复就行了，而并不需要考虑当前的形态相不相同。例如：$1,3,2,4$ 中如果 $4$ 是接续的 $2$ 后面，那最后就有可能是 $1,3,2,4,\cdots$，即 $2,4$ 中间不会有任何元素；如果 $4$ 是新开了一个段，那么最后就可能是 $1,3,2,\cdots,4,\cdots$。那有些人就会有问题：如果 $2$ 后面的省略号的内容为空的话，那不就相同了吗？不会，因为这样的话，因为 $4,2$ 不在一个段，所以这里至少有两段，而我们最终统计答案的时候是只统计 $1$ 段的，意思是中间至少有一个元素把这两段合并起来，就与最开始的假设矛盾了，故状态不会重复。</p>
<p>最后，<strong>特别要注意整个序列两个端点需要特别判断</strong>，处理这种类型的方法有两种：</p>
<ul>
<li>在转移过程中就把贡献去掉&#x2F;加上。（多为题目固定了左右两端点）</li>
<li>多开两维数组记录两个端点的贡献或一些信息。（多为题目没有固定左右两端点）</li>
</ul>
<h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><ul>
<li><a href="https://www.luogu.com.cn/problem/P5999">CEOI2016-kangaroo</a>（例题）</li>
<li><a href="https://www.luogu.com.cn/problem/AT_abc209_f">AT_abc209_f-Deforestation</a></li>
<li><a href="https://www.luogu.com.cn/problem/AT_dp_t">AT_dp_t-permutation</a></li>
<li><a href="https://www.luogu.com.cn/problem/P7967">[COCI2021-2022#2] Magneti</a></li>
<li><a href="https://www.luogu.com.cn/problem/CF1515E">CF1515E-Phoenix and Computers</a></li>
<li><a href="https://www.luogu.com.cn/problem/CF704B">CF704B-Ant Man</a></li>
<li><a href="https://www.luogu.com.cn/problem/P9197">[JOI Open 2016] 摩天大楼</a></li>
<li><a href="https://www.luogu.com.cn/problem/P2612">[ZJOI2012]波浪</a></li>
</ul>
<hr>
<h2 id="部分习题讲评"><a href="#部分习题讲评" class="headerlink" title="部分习题讲评"></a><strong>部分习题讲评</strong></h2><h3 id="CF704B-Ant-Man"><a href="#CF704B-Ant-Man" class="headerlink" title="CF704B-Ant Man"></a><a href="https://www.luogu.com.cn/problem/CF704B"><strong>CF704B-Ant Man</strong></a></h3><h4 id="初探题面"><a href="#初探题面" class="headerlink" title="初探题面"></a><strong>初探题面</strong></h4><p>这道题我们可以先转换一下题意：</p>
<p>让 $a_i \gets a-i+x_i,b_i \gets b_i-x_i,c_i \gets c_i+x_i,d_i \gets d_i-x_i$。</p>
<p>那么就可以将 $f(i,j)$ 写为：<br>$$<br>f(i,j) &#x3D; \begin{cases} d_i+a_j &amp; i&lt;j\ c_i+b_j &amp; i&gt;j \end{cases}<br>$$</p>
<p>由这个公式看出：权值与下标的大小相关，只要确定了下标的大小，那么这个权值基本上就确定了。</p>
<p>所以，<strong>按照 $1\sim n$ 的顺序插入 DP</strong>。</p>
<h4 id="状态设计"><a href="#状态设计" class="headerlink" title="状态设计"></a><strong>状态设计</strong></h4><p>还是像例题一样，设 $dp_{i,j}$ 为 $1 \sim i$ 中分成 $j$ 段最小的代价是多少。</p>
<p>但是与例题不同的是，这里的每一段可以是 $V,M,W,A$ 形状的，就是起始位置没有硬性要求。（对于起始位置的要求视题意而设计状态）</p>
<p>那么我们就可以开始 dp 了。</p>
<p>首先考虑一般情况（$i \ne s \text{ and } i\ne t$）：</p>
<p>（以下状态设计均考虑费用提前计算技巧）</p>
<ul>
<li>$i$ 能够把之前的两段拼起来，那么 $i$ 对于全局权值的贡献就是 $a_i+c_i$。</li>
<li>$i$ 能够在一段的末尾与那一段拼起来，那么 $i$ 对于全局权值的贡献是 $a_i+d_i$。</li>
<li>$i$ 能够在一段的前面与那一段拼起来，那么 $i$ 对于全局权值的贡献是 $b_i+c_i$。</li>
<li>$i$ 独立成为一段，则贡献是 $b_i+d_i$。</li>
</ul>
<p>所以对于 $i \ne s \text{ and } i \ne t$，转移有四种：<br>$$<br>dp_{i,j} &#x3D; \min\begin{cases} dp_{i-1,j+1} +a_i+c_i \ dp_{i-1,j}+a_i+d_i \ dp_{i-1,j} + b_i+c_i \ dp_{i-1,j-1}+b_i+d_i \end{cases}<br>$$</p>
<p>注意，这些式子是怎么推导出来的！</p>
<ul>
<li>因为贡献只与两个数的大小有关</li>
<li>两个数的大小这么来判断：比 $i$ 先填的数一定比 $i$ 小，比 $i$ 后填的数一定比 $i$ 大。</li>
</ul>
<p>根据这两点，权值和方程就能很轻松写出来了。</p>
<p>至于 $i&#x3D;s \text{ or } i&#x3D;t$ 的情况，一个是只能加在某一段的后面，一个是只能加在某一段的前面，两个都可以自己成为一段，<strong>等待后面的元素把两段拼在一起！</strong></p>
<h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a><strong>细节</strong></h4><p>1、对于以 $s$ 开头的一段，<strong>不允许</strong>有任何元素拼在前面；对于以 $t$ 结尾的一段，<strong>不允许</strong>有任何元素拼在后面。  </p>
<p>2、对于以 $s$ 开头的一段和以 $t$ 开头的一段，一定到最后才能拼起来，<strong>不能在前面就合成了一个段</strong>。  </p>
<p>3、为什么我们合并两个段不需要额外记录是不是 $s$ 和 $t$ 所在的段？因为不管是合并哪两个段事实上是一样的，只要有一个段没有 $s$ 和 $t$，那么这个合并就可以进行。  </p>
<p>4、为什么考虑加在某个段的前面的时候不需要判断 $s$，$t$ 也不需要判断？因为我们加到任意一段前面&#x2F;后面的代价是一样的。（都是费用提前计算）</p>
<p>5、做这类题目时，一定要<strong>把 $i$ 和 $j$ 的关系分开（常用方法：费用提前计算），不然无法记录状态！</strong></p>
<p>综上，这道题目就做完了，为了避免一些特殊情况，代码采用从前往后的方式 DP。（从后往前也可以）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 5005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,i,j,x[N],a[N],b[N],c[N],d[N],s,t,dp[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;s&gt;&gt;t;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;x[i];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i],a[i]+=x[i];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;b[i],b[i]-=x[i];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;c[i],c[i]+=x[i];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;d[i],d[i]-=x[i];</span><br><span class="line">	<span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">	dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i==s)&#123;</span><br><span class="line">				<span class="keyword">if</span>(j&gt;=(i&gt;t))&#123;</span><br><span class="line">					<span class="keyword">if</span>(j) dp[i][j] = <span class="built_in">min</span>(dp[i][j],dp[i<span class="number">-1</span>][j]+c[i]);</span><br><span class="line">					dp[i][j+<span class="number">1</span>] = <span class="built_in">min</span>(dp[i][j+<span class="number">1</span>],dp[i<span class="number">-1</span>][j]+d[i]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(i==t)&#123;</span><br><span class="line">				<span class="keyword">if</span>(j&gt;=(i&gt;s))&#123;</span><br><span class="line">					<span class="keyword">if</span>(j) dp[i][j] = <span class="built_in">min</span>(dp[i][j],dp[i<span class="number">-1</span>][j]+a[i]);</span><br><span class="line">					dp[i][j+<span class="number">1</span>] = <span class="built_in">min</span>(dp[i][j+<span class="number">1</span>],dp[i<span class="number">-1</span>][j]+b[i]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(j&lt;((i&gt;t)+(i&gt;s))) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">if</span>(j&gt;=<span class="number">2</span>) dp[i][j<span class="number">-1</span>] = <span class="built_in">min</span>(dp[i][j<span class="number">-1</span>],dp[i<span class="number">-1</span>][j]+a[i]+c[i]);</span><br><span class="line">				dp[i][j+<span class="number">1</span>] = <span class="built_in">min</span>(dp[i][j+<span class="number">1</span>],dp[i<span class="number">-1</span>][j]+b[i]+d[i]);</span><br><span class="line">				<span class="keyword">if</span>(j&gt;(i&gt;t)) dp[i][j] = <span class="built_in">min</span>(dp[i][j],dp[i<span class="number">-1</span>][j]+a[i]+d[i]);</span><br><span class="line">				<span class="keyword">if</span>(j&gt;(i&gt;s)) dp[i][j] = <span class="built_in">min</span>(dp[i][j],dp[i<span class="number">-1</span>][j]+b[i]+c[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;dp[n][<span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JOI-Open-2016-摩天大楼"><a href="#JOI-Open-2016-摩天大楼" class="headerlink" title="[JOI Open 2016] 摩天大楼"></a><a href="https://www.luogu.com.cn/problem/P9197"><strong>[JOI Open 2016] 摩天大楼</strong></a></h3><h4 id="初探题面-1"><a href="#初探题面-1" class="headerlink" title="初探题面"></a><strong>初探题面</strong></h4><p>首先，看到绝对值想到分类讨论，即为：<br>$$<br>g(i,i+1) &#x3D; \begin{cases} f_i-f_{i+1} &amp; f_i \ge f_{i+1} \ f_{i+1}-f_i &amp; f_i &lt; f_{i+1} \end{cases}<br>$$</p>
<p>那么又是根据大小关系来决定权值大小了，所以考虑插入 DP。  </p>
<p><strong>第一种方法</strong></p>
<h4 id="状态推导"><a href="#状态推导" class="headerlink" title="状态推导"></a><strong>状态推导</strong></h4><p>像上一道题一样，这里的状态因为没有段长的硬性要求，所以 $W,V,A,M$ 形状的段都是可以的，因此也减少了初始和结尾字符的特判（尽管题目也不需要特判）。</p>
<p>设 $dp_{i,j,k}$ 表示 $1\sim i$ 这些数所代表的数值插入进去之后有 $j$ 段当前权值总和为 $k$ 的情况总数。</p>
<p>注意到最开始是不用 $f_1-f_0$ 或者 $f_0-f_1$，结尾同理，所以依旧需要特判。</p>
<p>再发现，如果我们不记录开始和结尾数值的话，很难维护，所以我们要 <strong>用尽可能小的空间传递更多的信息</strong>。</p>
<ul>
<li>如果我们能够确定第一个位置是否已经被填了，那么就不存在其它特判情况了，即在填的时候特判一下就可以了。（结尾同理）</li>
</ul>
<p>根据上面那一条发现的性质，我们对 DP 状态进行修改，设 $dp_{i,j,k,0&#x2F;1,0&#x2F;1}$ 表示 $1\sim i$ 这些数所代表的数值插入进去之后有 $j$ 段当前权值总和为 $k$ 且开头结尾有没有被确定的情况总数。</p>
<p>这个转移方程一确定，那么事情就简单多了。</p>
<h4 id="转移方程"><a href="#转移方程" class="headerlink" title="转移方程"></a><strong>转移方程</strong></h4><p>首先，明确一下状态的后效性如何去除（因为 $g(i,i+1)$ 与两个元素有关）。</p>
<p>看下面这幅图：<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/4t9nejw4.png"></p>
<p>（其中横轴为元素的位置，纵轴为元素的值）</p>
<p>容易看出这样的总的权值和是：$|5-1|+|1-6|+|6-4|+|4-3|+|3-2|+|2-7|+|7-8|$ 的。</p>
<p>在我们按照大小顺序插入的前提下考虑分开：$5-1+6-1+6-4+4-3+3-2+7-2+8-7$，消项得：$5-1+6-1+6-2+8-2$。</p>
<p>这样我们就可以得知，每个<strong>极小值</strong>会被减去两次（但是如果是在序列开头或末尾只会被减一次），每个<strong>极大值</strong>会被加两次（但是如果是在序列开头或末尾只会被加一次）。</p>
<p>即遇到极大值看它是不是在开头或者末尾，如果在，贡献就会一份，否则为两份，极小值同理。</p>
<p>综上，我们就把 $i,i+1$ 的贡献分开了，而且也利用到了我们知晓元素之间大小关系的性质，DP 转移就可以开始执行了。</p>
<p><strong>以下状态设计均为从大往小插入考虑</strong></p>
<p>然后，熟悉的分类讨论：</p>
<ul>
<li>对于 $i$，它合并了两个段，段数少 $1$</li>
</ul>
<p>因为 $i$ 合并两个段，所以它不能在最左边或者最右边，而且它两端都是比它小的数，那么它便是这个区间的极小值，对全局的贡献是负的两倍。即：<br>$$<br>dp_{i,j,k,p,l} &#x3D; jdp_{i-1,j+1,k+2a_i,p,l}<br>$$</p>
<p>（为什么是加 $2a_i$，是因为，它插入之后贡献为 $k$，插入之前肯定就是加上）</p>
<ul>
<li>对于 $i$，它新开了一个段，段数多 $1$</li>
</ul>
<p>因为 $i$ 新开了一个段，之后合并它和其它段的数一定比它小，所以它是区间极大值，对全局的贡献是正两倍，注意，它如果是在最左边，它的贡献就只有一倍，在最右边同理。特别注意，如果左右两边已经确定了，那么它能够新开段的位置会少 $1\sim 2$ 个。即：</p>
<p>$$<br>\begin{aligned}<br>dp_{i,j,k,0,0} &amp;&#x3D; jdp_{i-1,j-1,k-2a_i,0,0} \<br>dp_{i,j,k,0,1} &amp;&#x3D; (j-1)dp_{i-1,j-1,k-2a_i,0,1}+dp_{i-1,j-1,k-a_i,0,0} \<br>dp_{i,j,k,1,0} &amp;&#x3D; (j-1)dp_{i-1,j-1,k-2a_i,1,0}+dp_{i-1,j-1,k-a_i,0,0} \<br>dp_{i,j,k,1,1} &amp;&#x3D; (j-2)dp_{i-1,j-1,k-2a_i,1,1}+dp_{i-1,j-1,k-a_i,1,0}+dp_{i-1,j-1,k-a_i,0,1}<br>\end{aligned}<br>$$</p>
<ul>
<li>对于 $i$，它延续了某个段，并接在该段的左&#x2F;右边，段数不变</li>
</ul>
<p>我们以左边为例，因为 $i$ 在普通情况下一边会有比它小的，一边会有比它大的，所以 $i$ 对总的值没有贡献，但是当 $i$ 在左边或者右边时，它是区间极小值，贡献是负一倍。即：</p>
<p>$$<br>\begin{aligned}<br>dp_{i,j,k,0,0} &amp;&#x3D; jdp_{i-1,j,k,0,0} \<br>dp_{i,j,k,0,1} &amp;&#x3D; jdp_{i-1,j,k,0,1} \<br>dp_{i,j,k,1,0} &amp;&#x3D; (j-1)dp_{i-1,j,k,1,0}+dp_{i-1,j,k+a_i,0,0} \<br>dp_{i,j,k,1,1} &amp;&#x3D; (j-1)dp_{i-1,j,k,1,1}+dp_{i-1,j,k+a_i,0,1}<br>\end{aligned}<br>$$</p>
<p>加在右边同理，由此我们推导完了整个 DP，但是实现过程中还要注意一下转移时的细节：左右端点固定后权值是多少？有多少个段可以插入等。</p>
<p>这种方法常数很大，同时不利于优化，但是个人认为思维跟 kangaroo 差不多，而且更好想一些。</p>
<p><strong>第二种方法</strong></p>
<p>此处不再赘述，详见：<a href="https://www.luogu.com.cn/blog/AFewSuns/post-ti-xie-p9197-joi-open-2016-ma-tian-tai-lou">Afewsuns 的博客-[JOI Open 2016]摩天大楼题解</a>。</p>
<p>注：[ZJOI2012] 波浪 和此题十分相像，主要是处理精度问题和小数的“快速输出”，那道题可能会卡常，推荐使用第二种方法。</p>
<p>此处给出第一种方法的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,i,j,k,l,a[<span class="number">105</span>],dp[<span class="number">2</span>][<span class="number">105</span>][<span class="number">8005</span>][<span class="number">2</span>][<span class="number">2</span>],ans;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(ll a,ll b)</span></span>&#123;<span class="keyword">return</span> a&gt;b;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(ll &amp;a,ll b)</span></span>&#123;</span><br><span class="line">	a += b;</span><br><span class="line">	a %= mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;l;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">		cout&lt;&lt;<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);</span><br><span class="line">	dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=i;j++) <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;=<span class="number">6000</span>;k++) dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">0</span>]=dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">0</span>]=dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">1</span>]=dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;=<span class="number">6000</span>;k++)&#123;</span><br><span class="line">				<span class="comment">//MERGE</span></span><br><span class="line">				<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">0</span>],j*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j+<span class="number">1</span>][k+<span class="number">2</span>*a[i]][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">				<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">1</span>],j*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j+<span class="number">1</span>][k+<span class="number">2</span>*a[i]][<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">				<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">0</span>],j*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j+<span class="number">1</span>][k+<span class="number">2</span>*a[i]][<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">				<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">1</span>],j*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j+<span class="number">1</span>][k+<span class="number">2</span>*a[i]][<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">				<span class="keyword">if</span>(k&gt;=<span class="number">2</span>*a[i])&#123;</span><br><span class="line">					<span class="comment">//NEW</span></span><br><span class="line">					<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">0</span>],j*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j<span class="number">-1</span>][k<span class="number">-2</span>*a[i]][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">					<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">0</span>],(j<span class="number">-1</span>)*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j<span class="number">-1</span>][k<span class="number">-2</span>*a[i]][<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">					<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">1</span>],(j<span class="number">-1</span>)*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j<span class="number">-1</span>][k<span class="number">-2</span>*a[i]][<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">					<span class="keyword">if</span>(j<span class="number">-1</span>&gt;<span class="number">1</span>) <span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">1</span>],(j<span class="number">-2</span>)*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j<span class="number">-1</span>][k<span class="number">-2</span>*a[i]][<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(k&gt;=a[i])&#123;</span><br><span class="line">					<span class="comment">//NEW</span></span><br><span class="line">					<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">0</span>],dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j<span class="number">-1</span>][k-a[i]][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">					<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">1</span>],dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j<span class="number">-1</span>][k-a[i]][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">					<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">1</span>],dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j<span class="number">-1</span>][k-a[i]][<span class="number">0</span>][<span class="number">1</span>]+dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j<span class="number">-1</span>][k-a[i]][<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//LEFT</span></span><br><span class="line">				<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">0</span>],j*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">				<span class="keyword">if</span>(j&gt;<span class="number">1</span>) <span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">0</span>],(j<span class="number">-1</span>)*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">				<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">0</span>],dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k+a[i]][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">				<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">1</span>],j*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">				<span class="keyword">if</span>(j&gt;<span class="number">1</span>) <span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">1</span>],(j<span class="number">-1</span>)*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">1</span>]+dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k+a[i]][<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">1</span>],dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k+a[i]][<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">				<span class="comment">//RIGHT</span></span><br><span class="line">				<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">0</span>],j*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">				<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">0</span>],j*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">				<span class="keyword">if</span>(j&gt;<span class="number">1</span>) <span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">1</span>],(j<span class="number">-1</span>)*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">				<span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">0</span>][<span class="number">1</span>],dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k+a[i]][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">				<span class="keyword">if</span>(j&gt;<span class="number">1</span>) <span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">1</span>],(j<span class="number">-1</span>)*dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">1</span>]+dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k+a[i]][<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">add</span>(dp[i&amp;<span class="number">1</span>][j][k][<span class="number">1</span>][<span class="number">1</span>],dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k+a[i]][<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=l;i++) ans=(ans+dp[n&amp;<span class="number">1</span>][<span class="number">1</span>][i][<span class="number">1</span>][<span class="number">1</span>])%mod;</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ABC209F-Deforestation"><a href="#ABC209F-Deforestation" class="headerlink" title="[ABC209F] Deforestation"></a><a href="https://www.luogu.com.cn/problem/AT_abc209_f"><strong>[ABC209F] Deforestation</strong></a></h3><h4 id="初探题面-2"><a href="#初探题面-2" class="headerlink" title="初探题面"></a><strong>初探题面</strong></h4><p>这道题有点类似于前面提到的“凸”这道例题，但是它没有叫你计算最小的花费是多少，而是计算有多少种方案能够达到最小的花费。</p>
<p>遇到这种类型的题目，首先要明确<strong>在什么条件下能够达到最小的花费</strong>。</p>
<p>因为任意一个 $i$ 产生的权值与 $i-1,i,i+1$ 有关，说人话就是相邻的元素选择的顺序会影响到它的权值，所以我们考虑对于 $i,i+1$，哪个先选比较好。</p>
<ul>
<li>如果先选 $i$，权值为：$a_{i-1}+a_i+a_{i+1}+a_{i+1}+a_{i+2}$。</li>
<li>如果先选 $i+1$，权值为：$a_i+a_{i+1}+a_{i+2}+a_i+a_{i-1}$。</li>
</ul>
<p>用第一个式子减去第二个式子得：$2a_{i+1}-2a_i$。</p>
<p>所以当 $a_{i+1} &gt; a_i$ 时，先选 $i+1$ 更好；当 $a_i &gt; a_{i+1}$ 时，先选 $i$ 更好；如果两者相等，那么我们可以任意抉择。</p>
<p>很明显的，对于每组 $i,i+1$ 我们都可以这么抉择并且至少有一种方案满足这种选择，所以这种局部最优性可以扩展到全局，因此，我们只要求出满足这种顺序的方案数就行了。</p>
<h4 id="状态设计-1"><a href="#状态设计-1" class="headerlink" title="状态设计"></a><strong>状态设计</strong></h4><p>我们发现如果按照这个关系减出来的图其实是一个 TAG，不好维护插入顺序。因此我们只能考虑从 $1 \sim n$ 考虑插入。</p>
<p>因为 $i$ 可以插入的方案数仅与 $i-1$ 所插入的位置有关系，而且题目允许 $O(n^2)$ 的空间和时间，因此我们设计两维 DP 数组：$dp_{i,j}$ 表示第 $i$ 个数插入到了第 $j$ 个位置满足条件的方案。</p>
<p><strong>说明一下，这里的第 $j$ 个位置并不是最终操作序列上的位置，而是操作序列只保留 $1\sim i$ 的子序列的相对位置。</strong></p>
<p>对于 $a_i &gt; a_{i-1}$ 先选 $i$，所以 $i$ 的相对位置一定在 $i-1$ 的相对位置的前面，故 $dp_{i,j} &#x3D; \sum_{k&#x3D;j}^i dp_{i-1,k}$。</p>
<p>对于 $a_i &lt; a_{i-1}$ 先选 $i-1$，所以 $i$ 的相对位置一定在 $i-1$ 的相对位置的后面，故 $dp_{i,j} &#x3D; \sum_{k&#x3D;1}^{j-1} dp_{i-1,k}$。</p>
<p>对于 $a_i &#x3D; a_{i-1}$ 都可以先选，所以全部情况都可以转移，故 $dp_{i,j} &#x3D; \sum_{k&#x3D;1}^{j-1} dp_{i-1,k}$。</p>
<p>注：</p>
<ul>
<li>第一个转移方程从 $j$ 开始循环到 $i$ 是因为如果 $i-1$ 在 $1 \sim i-1$ 的第 $j$ 个位置，那么 $i$ 就可以插入到第 $j$ 个位置的前面使得 $i$ 在 $i-1$ 的前面并且相对位置也是 $j$。</li>
<li>第二个转移方程循环到 $j-1$ 的道理同上。</li>
<li>这种方法为什么能不重不漏，是因为两个不同的最终操作序列一定有一个 $i$ 在 $1\sim i$ 中的相对位置不同；两个相同的最终操作序列一定满足每一个 $i$ 在 $1\sim i$ 中的相对位置相同。</li>
<li>初始化 DP 的时候需要注意 $1$ 在 $1\sim 1$ 中的相对位置只有 $1$ 这一个。</li>
</ul>
<p>综上，代码就可以写出来了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,a[<span class="number">4005</span>],dp[<span class="number">4005</span>][<span class="number">4005</span>],m[<span class="number">4005</span>][<span class="number">4005</span>],i,j;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">	dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) m[<span class="number">1</span>][i]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]==a[i<span class="number">-1</span>]) dp[i][j]=m[i<span class="number">-1</span>][i<span class="number">-1</span>];</span><br><span class="line">			<span class="keyword">if</span>(a[i]&gt;a[i<span class="number">-1</span>]) dp[i][j]=((m[i<span class="number">-1</span>][i<span class="number">-1</span>]-m[i<span class="number">-1</span>][j<span class="number">-1</span>])%mod+mod)%mod;</span><br><span class="line">			<span class="keyword">if</span>(a[i]&lt;a[i<span class="number">-1</span>]) dp[i][j]=m[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++) m[i][j]=(m[i][j<span class="number">-1</span>]+dp[i][j])%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;m[n][n]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CF1515E-Phoenix-and-Computers"><a href="#CF1515E-Phoenix-and-Computers" class="headerlink" title="CF1515E-Phoenix and Computers"></a><strong><a href="https://www.luogu.com.cn/problem/CF1515E">CF1515E-Phoenix and Computers</a></strong></h3><h4 id="初探题面-3"><a href="#初探题面-3" class="headerlink" title="初探题面"></a><strong>初探题面</strong></h4><p>一看就知道是插入 DP，但是如何设计状态令人十分难为。</p>
<p>还是想用 $dp_{i,j}$ 表示开了 $i$ 台，构成了 $j$ 个连续段。</p>
<p>根据上面的总结，我们知道，只要这个状态所产生的的最终的所有的状态不会与另外一个不同的状态（同一阶段）所产生的不同的所有的状态相重合，那么这种做法就会做到不重不漏。</p>
<p>而且题目要求如果 $i-1$，$i+1$  两台电脑都有开启的话，$i$ 号电脑也自动开启，这就说明题目限制了如果两个段的之间的长度 $\le 1$ 的话，就会自动合并成一段，这便启发了我们状态的设计：相邻两个段之间的长度为 $\ge 2$ 的<strong>未知数</strong>。</p>
<p>注意：这里的未知数指的是中间一定有超过一个电脑，相当于中间有 $2$ 个电脑和中间有 $3$ 个电脑的状态是等价的。</p>
<p>考虑这种方法会不会导致状态有重叠，答案是不会。</p>
<p>因为考虑最终的操作序列，肯定最后合并成了一段，合并成了一段就不存在某两段之间至少有 $2$ 台电脑这个说法了，并且因为中间有 $2$ 个电脑和中间有 $3$ 个电脑的状态是等价的，故考虑转移的时候也不会重复。</p>
<p>既然都推到这里了，那么 DP 方程就出来了。</p>
<p>首先，单独形成一段，$dp_{i,j}&#x3D;j \times dp_{i-1,j-1}$。</p>
<p>然后加在某段的两边（这里的左右边是一样的，故不分开讨论）：$dp_{i,j} &#x3D; j \times 2 \times dp_{i-1,j}$。</p>
<p>最后连接连段，如果两段中间的未知数等于 $2$，那可以开 $2$ 台中的任意一台；如果未知数等于 $3$，那只能开中间那台；如果未知数是 $4$ 或更多，开的电脑就不止一台，并且都是上述 $2$ 种情况的延伸。$dp_{i,j}&#x3D;j \times dp_{i-3,j+1}+j \times 2 \times dp_{i-2,j+1}$。注意这里 $i$ 为什么要 $-2$ 或者 $-3$，因为它会自动开启 $2,3$ 台电脑。</p>
<p>最后注意一下，这次枚举的顺序就是开机的顺序了，并不是电脑编号的顺序，因为题目的自动与手动是按照开机的顺序以及位置决定的，与电脑编号没有关系。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,mod,i,j,dp[<span class="number">405</span>][<span class="number">405</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;mod;</span><br><span class="line">	dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">			dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = (dp[i+<span class="number">1</span>][j+<span class="number">1</span>]+dp[i][j]*(j+<span class="number">1</span>))%mod;</span><br><span class="line">			dp[i+<span class="number">1</span>][j] = (dp[i+<span class="number">1</span>][j]+dp[i][j]*<span class="number">2</span>*j)%mod;</span><br><span class="line">			dp[i+<span class="number">2</span>][j] = (dp[i+<span class="number">2</span>][j]+dp[i][j]*<span class="number">2</span>*j)%mod;</span><br><span class="line">			<span class="keyword">if</span>(j&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">				dp[i+<span class="number">2</span>][j<span class="number">-1</span>] = (dp[i+<span class="number">2</span>][j<span class="number">-1</span>]+dp[i][j]*(j<span class="number">-1</span>)*<span class="number">2</span>)%mod;</span><br><span class="line">				dp[i+<span class="number">3</span>][j<span class="number">-1</span>] = (dp[i+<span class="number">3</span>][j<span class="number">-1</span>]+dp[i][j]*(j<span class="number">-1</span>))%mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;dp[n][<span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>总结其实都写在例题和习题讲评里面了，复制粘贴一遍其实没有用，重要的是去理解，并且收获自己的感受，这样才能让做题的思路更加敏捷精确。这就是插入 DP，一个非常巧妙但是很难理解的 DP 类型。</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>动态规划</tag>
        <tag>插入dp</tag>
      </tags>
  </entry>
  <entry>
    <title>数学学习笔记1</title>
    <url>/2024/01/07/%E6%95%B0%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<h1 id="矩阵的初等变换"><a href="#矩阵的初等变换" class="headerlink" title="矩阵的初等变换"></a>矩阵的初等变换</h1><p>以下的矩阵大小都是 $n \times n$ 的，即为方阵。</p>
<h2 id="初等行变换"><a href="#初等行变换" class="headerlink" title="初等行变换"></a>初等行变换</h2><p>作用：交换第 $i,j$ 行的所有元素，即构造矩阵 $T$ 使得 $TA$ 交换了 $A$ 矩阵的第 $i,j$ 行。（$i&lt;j$）</p>
<p>构造方式：</p>
<p>$$<br>T&#x3D;\begin{bmatrix}<br>I_{i-1} &amp; &amp; &amp; &amp;  \\<br>&amp; 0 &amp;  &amp;1 \\<br>&amp; &amp; I_{j-i-1} &amp;\\<br>&amp; 1 &amp;  &amp;0 \\<br> &amp; &amp; &amp; &amp; I_{n-j} \\<br>\end{bmatrix}<br>$$</p>
<p>空的地方都是 $0$。</p>
<h2 id="倍法变换"><a href="#倍法变换" class="headerlink" title="倍法变换"></a>倍法变换</h2><p>作用：让第 $i$ 行的元素都乘上系数 $k$。</p>
<p>构造方式：</p>
<p>$$<br>T&#x3D;\begin{bmatrix}<br>I_{i-1} &amp; &amp;  \\<br>&amp; k &amp;   \\<br> &amp; &amp; I_{n-i} \\<br>\end{bmatrix}<br>$$</p>
<p>空的地方都是 $0$。</p>
<h2 id="消法变换"><a href="#消法变换" class="headerlink" title="消法变换"></a>消法变换</h2><p>作用：让第 $i$ 行的元素都乘上系数 $k$ 并且加到第 $j$ 行上。（$i&lt;j$）</p>
<p>构造方式：</p>
<p>$$<br>T&#x3D;\begin{bmatrix}<br>I_{i-1} &amp; &amp; &amp; &amp;  \\<br>&amp; 1 &amp;  &amp;0 \\<br>&amp; &amp; I_{j-i-1} &amp;\\<br>&amp; k &amp;  &amp;1 \\<br> &amp; &amp; &amp; &amp; I_{n-j} \\<br>\end{bmatrix}<br>$$</p>
<p>空的地方都是 $0$。</p>
<p>这样我们就证明了高斯消元中的所有初等变换都可以写成矩阵 $A$ 左乘某个矩阵 $T$ 的方式，即 $A \gets TA$。</p>
<h1 id="高斯（约当）消元"><a href="#高斯（约当）消元" class="headerlink" title="高斯（约当）消元"></a>高斯（约当）消元</h1><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><p>给定一组 $n$ 元一次方程，试求出这个方程的解。</p>
<p>一般情况下可以视作给定矩阵 $A&#x3D;m \times n,B &#x3D; 1 \times m$，求出一个 $X&#x3D;n \times 1$，使得 $AX&#x3D;B$。</p>
<p>很显然，根据初中数学学到的知识，对于第 $i$ 个方程，如果它第 $i$ 项的系数不为 $0$，则可以把其他方程第 $i$ 项的系数都消掉而且不影响其他项的非 $0$ 性。</p>
<p>如果第 $i$ 项的系数为 $0$，那就交换一行上来，如果任意方程第 $i$ 项的系数都为 $0$，就是下面要说的一种情况。</p>
<p>然后在理想情况下得到的方程最后是这个样子的：</p>
<p>$$<br>\begin{bmatrix}{}<br>a_{1,1} &amp; 0 &amp; 0&amp; 0 &amp;\cdots &amp;0  \\<br>0 &amp; a_{2,2} &amp; 0 &amp; 0&amp;\cdots &amp;0 \\<br>\vdots &amp; \vdots &amp; \vdots &amp;\vdots &amp; \ddots  &amp; \vdots \\<br>0 &amp; 0 &amp; 0 &amp; 0&amp;\cdots &amp;a_{n,n} \\<br>\end{bmatrix}<br>$$</p>
<p>那么这个时候直接用右边的值除以这个矩阵的系数就可以了。</p>
<p>但是可能会有下列特例：</p>
<p>$$<br>\begin{bmatrix}{}<br>a_{1,1} &amp; 0 &amp; 0&amp; 0 &amp;\cdots &amp;0  \\<br>0 &amp; a_{2,2} &amp; 0 &amp; 0&amp;\cdots &amp;0 \\<br>\vdots &amp; \vdots &amp; \vdots &amp;\vdots &amp; \ddots  &amp; \vdots \\<br>0 &amp; 0 &amp; 0 &amp; 0&amp;\cdots &amp;a_{n-3,n-3} \\<br>0 &amp; 0 &amp; 0 &amp; 0&amp;\cdots &amp;0 \\<br>0 &amp; 0 &amp; 0 &amp; 0&amp;\cdots &amp;0 \\<br>0 &amp; 0 &amp; 0 &amp; 0&amp;\cdots &amp;0 \\<br>\end{bmatrix}<br>$$</p>
<p>即 $n-2,n-1,n$ 没有值的限制，那么这个时候我们把这些元素称作自由元，值得注意的是：自由元互相不影响，即如果每个数字有 $P$ 种取值的话，整个方程解得个数就是 $P^\text{自由元的数量}$。</p>
<p>如果我们要给出方程的一组解，那就需要先确定自由元的值，然后因为其它值可能不确定，就需要代入自由元的取值，从矩阵的第 $n$ 行倒推回去，这样子做肯定是对的，我们可以考虑消元的顺序。</p>
<p>还有一种情况，就是无解，无解表现和自由元非常相似，只是后面系数都为 $0$ 的行，常数却不为 $0$，这样子方程就产生了冲突，即无解。</p>
<p>时间复杂度：$O(N^3)$，空间复杂度：$O(N^2)$。</p>
<h2 id="减少数量"><a href="#减少数量" class="headerlink" title="减少数量"></a>减少数量</h2><p>如果我们可以用一组变量 $a_1 \times a_n$，表示所有其它的数，且满足其它的数的方程的话，我们就可以将方程和未知数的数量缩减到 $O(n)$，而并非原来的 $O(n^2)$ 及更多。</p>
<h2 id="应用场合"><a href="#应用场合" class="headerlink" title="应用场合"></a>应用场合</h2><p>通常只需要把方程列出来，然后减少数量之后求解。</p>
<p>注意到消元的过程中只有加减乘除运算，故对于某个数取模意义下的方程也是同样的操作。</p>
<p>特别是对于 $2$ 取模（bool 变量的方程），因为位运算中，单个位的加减法都是异或，乘除法都是与运算，我们可以使用 bitset 优化至 $O(\dfrac{N^3}{64})$ 的时间复杂度。</p>
<p>或者是解一些期望概率的题。</p>
<p>这里顺带提一下：</p>
<p>图上随机游走类问题，如果要求点的期望，那么方程可以很轻松的列出来，即：</p>
<p>$$<br>dp_u &#x3D; \begin{cases}\sum_{v \to u} \dfrac{dp_v}{d_v}+1 &amp; u&#x3D;1 \\ \sum_{v \to u} \dfrac{dp_v}{d_v} &amp; u \ne 1\end{cases}<br>$$</p>
<p>特别的，如果限制了终点，特判即可，因为到了终点就停止了，所以到终点的概率就是它的期望。</p>
<p>这是最重要的结论之一。</p>
<h1 id="矩阵的逆"><a href="#矩阵的逆" class="headerlink" title="矩阵的逆"></a>矩阵的逆</h1><p>如果一个矩阵 $A &#x3D; n \times n$ 存在另外一个 $B &#x3D; n \times n$ 的矩阵使得 $A \times B &#x3D; I$，则 $B$ 称作 $A$ 的逆。</p>
<p>那么有一个定理，将一个矩阵 $[AI]$ 通过初等行变换成一个阶梯形最简矩阵，那么如果这个矩阵的左边是单位矩阵 $I$，代表 $A$ 这个矩阵有逆，逆就是右边的矩阵，即化简后变成 $[IA^{-1}]$ 的形式。</p>
<h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><p>我们可以知道任意一种初等行变换都可以表示成矩阵 $A \gets TA$ 的形式，那么高斯消元实际上就是乘了很多个不同的 $T$，并且这些矩阵是有结合律的。</p>
<p>最后高斯（约当）消元是需要每行除以一个系数，变成：</p>
<p>$$<br>\begin{bmatrix}<br>1 &amp; 0 &amp; 0  &amp; \cdots &amp;0&amp; | &amp; x_1 \\<br>0 &amp; 1 &amp; 0  &amp; \cdots &amp;0&amp; | &amp; x_2 \\<br>0 &amp; 0 &amp; 1  &amp; \cdots &amp;0&amp; | &amp; x_3 \\<br>0 &amp; 0 &amp; 0  &amp; \ddots &amp;0&amp; | &amp; x_k \\<br>0 &amp; 0 &amp; 0  &amp; \ddots &amp;1&amp; | &amp; x_n \\<br> \end{bmatrix}<br>$$</p>
<p>右边的通过竖线分开的是增广矩阵，可以省略，然后左边就是单位矩阵了，这个时候我们相当于对原来的矩阵乘了一些 $T$，那么怎么找出这个 $T$ 呢？</p>
<p>于是我们在 $A$ 的右边添加一个矩阵 $I$，变换的时候顺便在 $I$ 上记录了乘上的矩阵 $T$，最后输出就可以了。</p>
<p>证毕。</p>
<p>如果高斯（约当）消元中碰到了无解的情况，即有一个数字被消完了，并且其每一个系数都为 $0$，则 $A$ 没有逆矩阵。</p>
<p>那么代码就很好写了，最后记得除以每一行的系数，总时间复杂度为 $O(n^3)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 805</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span>&#123;ll a[N][N],n1,n2;&#125;maps,inv;</span><br><span class="line">ll n,m1,m2,i,j,k,x,K,temp,ans=LLONG_MAX,pos;</span><br><span class="line"><span class="function">ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>%p,t=a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++) cin&gt;&gt;inv.a[i][j];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) inv.a[i][i+n]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		pos = i;</span><br><span class="line">		<span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=n;j++) <span class="keyword">if</span>(inv.a[j][i]&gt;inv.a[i][i]) pos=j;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">2</span>*n;j++) <span class="built_in">swap</span>(inv.a[i][j],inv.a[pos][j]);</span><br><span class="line">		<span class="keyword">if</span>(inv.a[i][i]==<span class="number">0</span>)&#123;</span><br><span class="line">			cout&lt;&lt;<span class="string">&quot;No Solution\n&quot;</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i==j) <span class="keyword">continue</span>;</span><br><span class="line">			temp = inv.a[j][i]*<span class="built_in">qmi</span>(inv.a[i][i],mod<span class="number">-2</span>,mod)%mod;</span><br><span class="line">			<span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=<span class="number">2</span>*n;k++) inv.a[j][k]-=(inv.a[i][k]*temp)%mod,inv.a[j][k]=(inv.a[j][k]%mod+mod)%mod;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		ll temp = <span class="built_in">qmi</span>(inv.a[i][i],mod<span class="number">-2</span>,mod);</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">2</span>*n;j++) inv.a[i][j] = inv.a[i][j]*temp%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			cout&lt;&lt;inv.a[i][j+n]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Input:</span></span><br><span class="line"><span class="comment">4 2 2</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">1 1 1 1</span></span><br><span class="line"><span class="comment">0 0 0 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h1 id="线性相关"><a href="#线性相关" class="headerlink" title="线性相关"></a>线性相关</h1><p>如果设 $a$ 是一个长度为 $m$ 的向量，设其为 $a_1,a_2,\dots,a_m$，那么设 $ka&#x3D;{ka_1,ka_2,\dots,ka_m}$，如果若干个向量满足存在实数集 $S$ 满足：</p>
<p>$$<br>S_1a_1+S_2a_2+S_3a_3+\dots+s_na_n&#x3D;0<br>$$</p>
<p>则称这 $n$ 个向量线性相关，特别的我们称一个向量空间（即一个满足运算封闭性的向量集合）的线性基，为选出最多的向量空间中的向量，满足这些向量线性无关。</p>
<p>可以证明这些向量可以表出这个向量空间内的所有数，不能表出任意一个向量空间外的数。</p>
<blockquote>
<p>表出代表只使用加法和乘法对于向量和实数进行操作得到另外的向量。</p>
</blockquote>
<h2 id="矩阵的秩"><a href="#矩阵的秩" class="headerlink" title="矩阵的秩"></a>矩阵的秩</h2><p>矩阵有两种秩：行秩和列秩。行秩就是把矩阵的每一个行看成向量，然后它所属的向量空间的线性基的大小；列秩就是把矩阵的每一个列看成向量，然后它所属的向量空间的线性基的大小。</p>
<p>可以证明出来行秩等于列秩。</p>
<p>证明：</p>
<blockquote>
<p>初等行变换不影响矩阵的行秩，最后行秩等于 $n$ 减去自由变元的数量。</p>
</blockquote>
<blockquote>
<p>初等行变换也不影响矩阵的列秩。</p>
</blockquote>
<blockquote>
<blockquote>
<p>交换两行不影响矩阵的列秩，因为相当于交换了两个未知数。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一行同时乘上一个数不影响矩阵的列秩，因为相当于某个未知数扩大了 $k$ 倍。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>一行乘上一个数加到另一行上也不影响矩阵的列秩，因为相当于一个方程 $ax+b$，并且通过前两者结合也可以证明。</p>
</blockquote>
</blockquote>
<p>证毕。</p>
<p>所以任意矩阵的秩可以记作 $\operatorname{rank}(A)$ 或者 $r(A)$，它既可以表示列秩，也可以表示行秩。</p>
<p>如果一个 $n \times n$ 的方阵 $A$，如果 $r(A)&#x3D;n$，则称它满秩。</p>
<p>如果一个 $n \times m$ 的矩阵 $A$，如果 $r(A)&#x3D;n$，则称它行满秩；如果 $r(A)&#x3D;m$，则称它列满秩。</p>
<p>显然 $r(A) \le \min(n,m)$。</p>
<h3 id="重要结论"><a href="#重要结论" class="headerlink" title="重要结论"></a>重要结论</h3><ul>
<li><p>矩阵满秩、矩阵可逆、线性方程组有唯一解可以相互转化。</p>
</li>
<li><p>系数矩阵的秩等于增广矩阵的秩的时候，线性方程组有解。</p>
</li>
<li><p>满秩矩阵可以拆分成若干个初等变换矩阵的乘积。（考虑高斯消元的操作）</p>
</li>
<li><p>任意矩阵乘以满秩矩阵，秩不改变。（用上一条结论证明）</p>
</li>
<li><p>$r(A+B) \le r(A)+r(B)$</p>
</li>
<li><p>$\max(r(A),r(B)) \le r([A|B]) \le r(A)+r(B)$</p>
</li>
<li><p>$r(AB) \le \min(r(A),r(B))$</p>
</li>
</ul>
<h1 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>行列式是一个 $n \times n$ 的方阵，每个方阵 $A$ 对应了一个值 $\det(A)$，这个值就叫做这个行列式的值。</p>
<p>如果我们设 $\pi(p)$ 表示长度为 $n$ 的排列 $p$ 的逆序对数量，那么就有：</p>
<p>$$<br>\det(A) &#x3D; \sum_{p}(-1)^{\pi(p)}\prod_{i&#x3D;1}^n A_{i,p_i}<br>$$</p>
<p>这是行列式的一个全排列方法定义，由此可得矩阵 $A$ 的行列式与矩阵 $A^{T}$ （$A$ 的转置）的行列式相等。</p>
<p>或者是一种递归的解法，任取一行 $i$，则：</p>
<p>$$<br>\det(A)&#x3D;\sum_{j&#x3D;1}^n (-1)^{i+j}A_{i,j}\det(M_{i,j})<br>$$</p>
<p>其中 $M_{i,j}$ 表示从 $A$ 中删去第 $i$ 行和第 $j$ 列的数的矩阵，显然它是一个 $n-1 \times n-1$ 的方阵。</p>
<p>或者我们可以任取一行 $j$，则：</p>
<p>$$<br>\det(A)&#x3D;\sum_{i&#x3D;1}^n (-1)^{i+j}A_{i,j}\det(M_{i,j})<br>$$</p>
<p>前者叫做按第 $i$ 行展开，后者叫做按第 $j$ 列展开，所以不论按哪一行展开或者哪一列展开，所得结果都是一样的。</p>
<p>于是有结论：</p>
<p>定理：行列式 $\det A$ 的某一行（或某一列）的元素与另外一行（或另外一列）对应元素的代数余子式的乘积之和等于 $0$。</p>
<p>换句话说，当 $i\neg j$ 时：</p>
<p>$$a_{1,i}M_{1,j}+a_{2,i}M_{2,j}+\cdots+a_{i,n}M_{j,n}&#x3D;0$$</p>
<p>$$a_{1,i}M_{1,j}+a_{2,i}M_{2,j}+\cdots+a_{n,i}M_{n,j}&#x3D;0$$</p>
<h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><p>暴力计算行列式的时间复杂度达到了指数级别，我们可以利用矩阵的初等变换来减少行列式的计算时间，从而让其降为 $O(n^3)$。</p>
<h3 id="交换两行"><a href="#交换两行" class="headerlink" title="交换两行"></a>交换两行</h3><p>如果我们交换两行，相当于对于每个排列 $p$，都交换了 $i,j$ 两个位置上的值，那么显然可得 $\pi(p)$ 会变成原来的相反数，绝对值不变。</p>
<p>所以交换两行用一个变量来记录取反了多少次即可。</p>
<h3 id="一行乘上-k"><a href="#一行乘上-k" class="headerlink" title="一行乘上 $k$"></a>一行乘上 $k$</h3><p>显然，行列式的值也会乘上 $k$。</p>
<h3 id="一行乘上-k-加到另外一行"><a href="#一行乘上-k-加到另外一行" class="headerlink" title="一行乘上 $k$ 加到另外一行"></a>一行乘上 $k$ 加到另外一行</h3><p>引理，如果：</p>
<p>$$A&#x3D;\begin{vmatrix}<br>a_{1,1} &amp; a_{1,2} &amp; \cdots &amp; a_{1,n}\\<br>\vdots &amp; \vdots &amp;  &amp; \vdots\\<br>b_{i,1}+c_{i,1} &amp; b_{i,2}+c_{i,2} &amp; \cdots &amp; b_{i,n}+c_{i,n}\\<br>\vdots &amp; \vdots &amp;  &amp; \vdots\\<br>a_{n,1} &amp; a_{n,2} &amp; \cdots &amp; a_{n,n}\\<br>\end{vmatrix}$$</p>
<p>$$B&#x3D;\begin{vmatrix}<br>a_{1,1} &amp; a_{1,2} &amp; \cdots &amp; a_{1,n}\\<br>\vdots &amp; \vdots &amp;  &amp; \vdots\\<br>b_{i,1} &amp; b_{i,2} &amp; \cdots &amp; b_{i,n}\\<br>\vdots &amp; \vdots &amp;  &amp; \vdots\\<br>a_{n,1} &amp; a_{n,2} &amp; \cdots &amp; a_{n,n}\\<br>\end{vmatrix}$$</p>
<p>$$C&#x3D;\begin{vmatrix}<br>a_{1,1} &amp; a_{1,2} &amp; \cdots &amp; a_{1,n}\\<br>\vdots &amp; \vdots &amp;  &amp; \vdots\\<br>c_{i,1} &amp; c_{i,2} &amp; \cdots &amp; c_{i,n}\\<br>\vdots &amp; \vdots &amp;  &amp; \vdots\\<br>a_{n,1} &amp; a_{n,2} &amp; \cdots &amp; a_{n,n}\\<br>\end{vmatrix}$$</p>
<p>那么 $\det(A)&#x3D;\det(B)+\det(C)$，我们通过全排列的乘法分配律就可以得到。</p>
<p>所以我们把操作的行拆成原来的部分，和 $k$ 乘上另外一行的部分，原来的部分显然行列式的值不会变，那么我们需要考虑第 $j$ 行等于第 $i$ 行乘上 $k$ 的行列式的值。（$i \ne j$）</p>
<p>我们还是考虑全排列，因为交换两行的话 $\pi(p)$ 的奇偶性会改变，我们也可以把这一行的 $k$ 提出来，这样就有完全相同的两行，那么显然答案为 $0$。</p>
<p>所以这种变换答案不变。</p>
<p><strong>注意：以上行的操作通过全排列的性质也可以对列通用。</strong></p>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>因此，我们可以使用高斯消元消成上三角矩阵，这个时候 $A_{i,j}&#x3D;0(i&gt;j)$，所以行列式的值显然等于主对角线的乘积。</p>
<p>代码如下，时间复杂度为 $O(n^2(n+\log p))$，并且是没有逆元的解法，可以使用辗转相减法避免除法。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 605</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,a[N][N],i,j,k,mod,ans=<span class="number">1</span>,has,res;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;mod;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++) cin&gt;&gt;a[i][j];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			<span class="keyword">while</span>(a[i][i])&#123;</span><br><span class="line">				res = a[j][i]/a[i][i];</span><br><span class="line">				<span class="keyword">for</span>(k=i;k&lt;=n;k++) a[j][k]=(a[j][k]-a[i][k]*res%mod+mod)%mod;</span><br><span class="line">				<span class="built_in">swap</span>(a[i],a[j]),has^=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">swap</span>(a[i],a[j]),has^=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(i&lt;=n)&#123;</span><br><span class="line">		cout&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) ans=ans*a[i][i]%mod;</span><br><span class="line">	<span class="keyword">if</span>(has) ans=(mod-ans)%mod;</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Input:</span></span><br><span class="line"><span class="comment">2 998244353</span></span><br><span class="line"><span class="comment">1 4</span></span><br><span class="line"><span class="comment">1 5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><h3 id="凸包"><a href="#凸包" class="headerlink" title="凸包"></a>凸包</h3><p>设 $k$ 维空间中存在 $k$ 个点，则这 $k$ 个点和原点构成的凸包面积 $\times k!$ 就是：</p>
<p>$$<br>A&#x3D;\begin{vmatrix}<br>x_{1,1} &amp; x_{2,1} &amp; \cdots &amp; x_{k,1} \\<br>x_{1,2} &amp; x_{2,2} &amp; \cdots &amp; x_{k,2} \\<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>x_{1,k} &amp; x_{2,k} &amp; \cdots &amp; x_{k,k}<br>\end{vmatrix}<br>$$</p>
<p>行列式的值为 $\det(A)$，答案就是 $|\det(A)|$ 这是一个结论，二维的情况显然可以证明，三维及以上就需要想象力了。</p>
<p>如果是给定的 $k+1$ 个点构成的凸包，我们就需要任意指定一个点为原点建系即可。</p>
<h3 id="柯西-比内-Cauchy–Binet-公式"><a href="#柯西-比内-Cauchy–Binet-公式" class="headerlink" title="柯西-比内 Cauchy–Binet 公式"></a>柯西-比内 Cauchy–Binet 公式</h3><p>设 $A \in R^{n \times m},B \in R^{m \times n},n \le m$，那么有：</p>
<p>$$<br>\det(AB) &#x3D; \sum_{S} \det(A_S)\det(B_S)<br>$$</p>
<p>其中 $S$ 表示下标集合 ${1,2,\dots,m}$ 的 $n$ 元子集，$A_S$ 表示 $A$ 取 $S$ 的列构成的 $n$ 元子式，$B$ 恰好相反。</p>
<p>当 $A,B$ 为方阵的时候 $\det(AB)&#x3D;\det(A)\det(B)$。</p>
<h3 id="范德蒙德-Vandermonde-行列式"><a href="#范德蒙德-Vandermonde-行列式" class="headerlink" title="范德蒙德 Vandermonde 行列式"></a>范德蒙德 Vandermonde 行列式</h3><p>定义为：</p>
<p>$$<br>A &#x3D; \begin{vmatrix}<br>1 &amp; 1 &amp; \dots &amp; 1 \\<br>x_1 &amp; x_2 &amp; \dots &amp; x_n \\<br>\vdots &amp; \vdots &amp; \cdots &amp; \vdots \\<br>x_1^{n-1} &amp; x_2^{n-1} &amp; \dots &amp; x_n^{n-1} \\<br>\end{vmatrix}<br>$$</p>
<p>有 $\det(A)&#x3D;\prod_{1 \le i&lt;j \le n}(x_j-x_i)$，证明可以用高斯消元直接代入求值。</p>
<h3 id="LGV-引理"><a href="#LGV-引理" class="headerlink" title="LGV 引理"></a>LGV 引理</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>Lindström–Gessel–Viennot lemma 适用范围：有向无环图。</p>
<p>首先设 $w(P)$ 表示 $P$ 这条路径上的边权的乘积，如果是计数类问题我们可以把所有边权设为 $1$。</p>
<p>我们设 $e(u,v)$ 表示 $u$ 到 $v$ 的每一条路径的 $w(P)$ 之和，$A$ 为长度为 $n$ 的起点集合，$B$ 为长度为 $n$ 的终点集合。</p>
<p>设一组 $A$ 到 $B$ 的不相交集合 $S$ 为 $S_i$ 与 $S_j$ 没有公共端点，并且每一条路径恰好连接了 $A$ 中的一个数和 $B$ 中的一个数，而每个顶点也恰好只有一条路径连接它，由此可见 $S$ 的长度一定为 $n$，也即第 $i$ 条路径 $S_i$ 的起点是 $A_i$，终点是 $B_{p_i}$，$p$ 是长度为 $n$ 的排列，设 $\pi(p)$ 表示 $p$ 中逆序对的个数。</p>
<p>则有：</p>
<p>$$ M &#x3D; \begin{bmatrix}e(A_1,B_1)&amp;e(A_1,B_2)&amp;\cdots&amp;e(A_1,B_n)\\<br>e(A_2,B_1)&amp;e(A_2,B_2)&amp;\cdots&amp;e(A_2,B_n)\\<br>\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\<br>e(A_n,B_1)&amp;e(A_n,B_2)&amp;\cdots&amp;e(A_n,B_n)\end{bmatrix}$$</p>
<p>$$\det(M)&#x3D;\sum\limits_{S:A\rightarrow B}(-1)^{\pi(p)}\prod\limits_{i&#x3D;1}^n w(S_i)$$<br>其中 $\sum\limits_{S:A\rightarrow B}$ 表示满足上文要求的 $A\rightarrow B$ 的每一组不相交路径 $S$。</p>
<p>意思是什么呢？就是上面这个矩阵的行列式的值，等于所有可能的 $w(S)$ 的带符号和，如果 $w$ 恒为 $1$，那么就是所有合法的 $S$ 集合的带符号和。</p>
<h4 id="证明-1"><a href="#证明-1" class="headerlink" title="证明"></a>证明</h4><p>首先，由定义得：</p>
<p>$$<br>\begin{aligned}<br>\det(M)&amp;&#x3D;\sum\limits_{P:A\rightarrow B}(-1)^{\pi(p)}\prod\limits_{i&#x3D;1}^n w(S_i) \\<br>&amp;&#x3D;\sum\limits_{P:A\rightarrow B}(-1)^{\pi(p)}\prod\limits_{i&#x3D;1}^n \sum_{P:a_i \to b_{p_i}}w(P) \\<br>\end{aligned}<br>$$</p>
<p>我们可以发现通过乘法分配律展开之后，因为 $w(P)$ 中的 $P$ 可以是多条路径组合，所以就是 $\prod\limits_{i&#x3D;1}^n \sum_{P:a_i \to b_{p_i}}w(P)&#x3D;\sum_{P:p}w(P)$，表示所有起点集合和终点集合与 $p$ 相同的 $P$ 的和，$P$ 是任意路径组，不要求不相交。</p>
<p>所以：</p>
<p>$$<br>\begin{aligned}<br>\det(M)<br>&amp;&#x3D;\sum\limits_{p:A\rightarrow B}(-1)^{\pi(p)}\prod\limits_{i&#x3D;1}^n \sum_{P:a_i \to b_{p_i}}w(P) \\<br>&amp;&#x3D;\sum\limits_{p:A\rightarrow B}(-1)^{\pi(p)}\sum_{P:p}w(P) \\<br>&amp;&#x3D;\sum\limits_{P:A\rightarrow B}(-1)^{\pi(p)}\prod_{i&#x3D;1}^n w(P_i)\\<br>\end{aligned}<br>$$</p>
<p>到此时 $P$ 也是任意路径组合。</p>
<p>我们设 $U$ 是要求的集合，而 $V$ 是有相交的路径集合，那么有：</p>
<p>$$<br>\begin{aligned}<br>&amp;\sum\limits_{P:A\rightarrow B}(-1)^{\pi(p)}\prod_{i&#x3D;1}^n w(P_i)\\<br>&#x3D;&amp;\sum\limits_{U:A\rightarrow B}(-1)^{\pi(u)}\prod_{i&#x3D;1}^n w(U_i)+\sum\limits_{V:A\rightarrow B}(-1)^{\pi(v)}\prod_{i&#x3D;1}^n w(V_i)\\<br>\end{aligned}<br>$$</p>
<p>我们又可以发现：若 $P$ 存在两条相交的路径 $a_i \to u \to a_j,b_i \to u \to b_j$，那么一定有 $a_i \to u \to b_j,b_i \to u \to a_j$，这两个项符号相反，绝对值相同。（按照之前行列式交换两行的方式证明即可）</p>
<p>所以 $\sum\limits_{V:A\rightarrow B}(-1)^{\pi(v)}\prod_{i&#x3D;1}^n w(V_i)&#x3D;0$，那么 $\sum\limits_{P:A\rightarrow B}(-1)^{\pi(p)}\prod_{i&#x3D;1}^n w(P_i)<br>&#x3D;\sum\limits_{U:A\rightarrow B}(-1)^{\pi(u)}\prod_{i&#x3D;1}^n w(U_i)$，由此，结论得证。</p>
<h4 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h4><p>如果是一张普通的有向无环图，是不可以直接运用 LGV 引理的，因为带符号会让问题变得不好处理。</p>
<p>当然，有一些特殊的图满足以下性质的话我们就可以使用 LGV 引理直接求：</p>
<ul>
<li><p>需要求出对于每个 $i$ 找到 $a_i \to b_i$ 的路径，并且路径两两没有公共点。</p>
</li>
<li><p>如果排列 $p$ 中有逆序对，那么这些路径一定有交点。</p>
</li>
</ul>
<p>根据 $S$ 的定义，这些情况不会被统计到答案中，因此我们可以直接计算。</p>
<p>例题参见 <a href="https://www.luogu.com.cn/problem/P6657">LGV 引理</a>，这个图就满足上述两种情况，可以直接利用行列式求解。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 605</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 5000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll T,n,m,a[N],b[N],i,j,jc[M],inv[M],maps[N][N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>%p,t=a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">C</span><span class="params">(ll n,ll m)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> jc[n]*inv[m]%mod*inv[n-m]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">	ll i,j,k,has=<span class="number">0</span>,ans=<span class="number">1</span>,res;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(maps[j][i]&gt;maps[i][i]) <span class="built_in">swap</span>(maps[i],maps[j]),has^=<span class="number">1</span>;</span><br><span class="line">			res = maps[j][i]*<span class="built_in">qmi</span>(maps[i][i],mod<span class="number">-2</span>,mod)%mod;</span><br><span class="line">			<span class="keyword">for</span>(k=i;k&lt;=n;k++) maps[j][k]=maps[j][k]-maps[i][k]*res,maps[j][k]=(maps[j][k]%mod+mod)%mod;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(i&lt;=n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) ans=ans*maps[i][i]%mod;</span><br><span class="line">	<span class="keyword">if</span>(has) ans=(mod-ans)%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	jc[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">5e6</span>;i++) jc[i]=jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">	inv[<span class="number">5000000</span>] = <span class="built_in">qmi</span>(jc[<span class="number">5000000</span>],mod<span class="number">-2</span>,mod);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">5e6</span>;i&gt;=<span class="number">1</span>;i--) inv[i<span class="number">-1</span>]=inv[i]*i%mod;</span><br><span class="line">	cin&gt;&gt;T;</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++) cin&gt;&gt;a[i]&gt;&gt;b[i];</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++) <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++) maps[i][j]=<span class="built_in">C</span>(b[j]-a[i]+n<span class="number">-1</span>,n<span class="number">-1</span>);</span><br><span class="line">		cout&lt;&lt;<span class="built_in">solve</span>(m)&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Input:</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">3 2</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">5 2</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">3 5</span></span><br><span class="line"><span class="comment">10 5</span></span><br><span class="line"><span class="comment">3 5</span></span><br><span class="line"><span class="comment">4 7</span></span><br><span class="line"><span class="comment">5 8</span></span><br><span class="line"><span class="comment">7 9</span></span><br><span class="line"><span class="comment">9 10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">155</span></span><br><span class="line"><span class="comment">2047320</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="BEST-定理"><a href="#BEST-定理" class="headerlink" title="BEST 定理"></a>BEST 定理</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>对于一道包含欧拉回路的有向图，有 BEST 定理：</p>
<p>$$<br>cnt&#x3D;T \prod_{i&#x3D;1}^n(ot_i-1)<br>$$</p>
<p>其中 $ot_i$ 表示第 $i$ 个点的出度，$T$ 表示这幅图的内向生成树的个数（取任何一个节点为根都可以，答案都相等，这是包含欧拉回路的有向图的性质）。</p>
<p><strong>注意：这是把循环同构的欧拉回路去除掉的答案！</strong></p>
<p>而这道题要求从 $1$ 开始，从 $1$ 结束，所以我们需要乘上 $ot_1$，证明在下面。</p>
<h4 id="证明-2"><a href="#证明-2" class="headerlink" title="证明"></a>证明</h4><p>偏感性。</p>
<p>首先考虑对于任意一条欧拉回路保留除去起始点 $s$ 剩下点的最后一条出边，那么这些出边一定构成一个以 $s$ 为根的内向树。</p>
<p>如果成环，那就说明形成了一个 $\rho$ 形，交点处因为入度等于出度，一定还会有一条出边，于是不可能成环。</p>
<p>接下来考虑反向构造，如果固定了起点和终点为 $s$，那么从 $s$ 到外面走有 $ot_s!$ 种走法，对于每个点，因为固定了一条出边，所以都有 $(ot_i-1)!$ 种走法，乘起来即可。</p>
<p>如果不固定起点，在上面的方案中，每种欧拉回路都因为 $s$ 的最后一条出边是任意选择的，所以除掉 $ot_s$ 就变成了文章一开始的形式。（也可以理解为 $s$ 把任何路径划分成了 $ot_s$ 段，但是对于整幅图来说这 $ot_s$ 段循环同构，所以需要除一下 $ot_s$）</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>首先需要判断这个有向图有没有欧拉回路，判定条件为去掉独立点之后从 $1$ 开始能不能遍历到所有点，并且不是独立点的点的入度必须等于出度。</p>
<p>如果含有欧拉回路，用矩阵树定理求 $T$ 的值即可。</p>
<p>注意，这里求 $T$ 如果选第 $i$ 行和第 $i$ 列删掉，一定要保证 $i$ 不是独立点，代码选的是 $i&#x3D;1$，当然你也可以选择以 $3$ 为根的内向树，但是要判断 $3$ 是不是独立点。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 105</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 200005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000003</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;ll&gt; op[N];</span><br><span class="line">ll T,n,m,i,j,x,y,a[N][N],ans,jc[M],in[N],ot[N],vis[N],vit;</span><br><span class="line"><span class="function">ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>%p,t=a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	vis[x] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;op[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">		vit++;</span><br><span class="line">		<span class="keyword">if</span>(vis[op[x][i]]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(op[x][i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(vit!=m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(in[i]!=ot[i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll ans=<span class="number">1</span>,has=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i==<span class="number">1</span>||!vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">for</span>(ll j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(j==<span class="number">1</span>||!vis[j]) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(!a[i][i]) <span class="built_in">swap</span>(a[i],a[j]),has^=<span class="number">1</span>;</span><br><span class="line">			ll res = a[j][i]*<span class="built_in">qmi</span>(a[i][i],mod<span class="number">-2</span>,mod)%mod;</span><br><span class="line">			<span class="keyword">for</span>(ll k=i;k&lt;=n;k++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(k==<span class="number">1</span>||!vis[k]) <span class="keyword">continue</span>;</span><br><span class="line">				a[j][k] = (a[j][k]-a[i][k]*res%mod+mod)%mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(i!=<span class="number">1</span>&amp;&amp;vis[i]) ans=ans*a[i][i]%mod;</span><br><span class="line">	<span class="keyword">if</span>(has) ans=(mod-ans)%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	jc[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">2e5</span>;i++) jc[i]=jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">	cin&gt;&gt;T;</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		vit=<span class="number">0</span>,m=<span class="number">0</span>;</span><br><span class="line">		cin&gt;&gt;n;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			cin&gt;&gt;x;</span><br><span class="line">			<span class="keyword">while</span>(x--) cin&gt;&gt;y,op[i].<span class="built_in">push_back</span>(y),a[y][i]--,a[i][i]++,in[y]++,ot[i]++,m++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">check</span>())&#123;</span><br><span class="line">			ans = <span class="built_in">solve</span>();</span><br><span class="line">			<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(!vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">if</span>(i==<span class="number">1</span>) ans=ans*jc[ot[i]]%mod;</span><br><span class="line">				<span class="keyword">else</span> ans=ans*jc[ot[i]<span class="number">-1</span>]%mod;</span><br><span class="line">			&#125;</span><br><span class="line">			cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> cout&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) op[i].<span class="built_in">clear</span>(),in[i]=<span class="number">0</span>,ot[i]=<span class="number">0</span>,vis[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++) a[i][j]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Matrix-Tree-定理"><a href="#Matrix-Tree-定理" class="headerlink" title="Matrix-Tree 定理"></a>Matrix-Tree 定理</h3><p>矩阵树定理。</p>
<h4 id="定理内容"><a href="#定理内容" class="headerlink" title="定理内容"></a>定理内容</h4><p>对于一张无向图，定义它的度数矩阵为：</p>
<p>$$<br>D&#x3D;\begin{bmatrix}<br>d_1 &amp; &amp; &amp; &amp; \\<br>&amp; d_2 &amp; &amp; &amp; \\<br>&amp; &amp; \ddots &amp; &amp; \\<br>&amp; &amp; &amp;  d_{n-1} &amp; \\<br>&amp; &amp; &amp; &amp; d_n \\<br>\end{bmatrix}<br>$$</p>
<p>$d_i$ 为 $i$ 节点的度数，同时定义它的邻接矩阵为 $E_{i,j}$ 为 $i \to j$ 的边数，那么它的 Kirchhoff 矩阵 $L$ 为 $E-D$。</p>
<p>那么我们在行列式中学到了代数余子式 $M_r$ 表示删去第 $r$ 行和第 $r$ 列的元素之后行列式的值，那么有性质 $L_1&#x3D;L_2&#x3D;\dots&#x3D;L_n&#x3D;ans$，其中 $ans$ 就是这张无向图中的生成树的个数。</p>
<p>于是我们只需要在 $O(n^3)$ 内求出一个行列式的值即可。</p>
<p>并且如果边有边权（不一定是整数，有可能是向量，参见 <a href="https://www.luogu.com.cn/blog/674469/solution-p5296">P5296 [北京省选集训2019] 生成树计数 题解</a>），那么矩阵树定理可以求出所有生成树的边权乘积的和。</p>
<p>对于一张有向图，根节点为 $r$，我们要找到以 $r$ 为根的外向树（边从父亲指向子节点，如果是内向树，将边反向即可），我们定义度数矩阵：</p>
<p>$$<br>D&#x3D;\begin{bmatrix}<br>d_1 &amp; &amp; &amp; &amp; \\<br>&amp; d_2 &amp; &amp; &amp; \\<br>&amp; &amp; \ddots &amp; &amp; \\<br>&amp; &amp; &amp;  d_{n-1} &amp; \\<br>&amp; &amp; &amp; &amp; d_n \\<br>\end{bmatrix}<br>$$</p>
<p>$d_i$ 为  $i$ 点的入度，定义邻接矩阵为 $m_{i,j}$ 表示 $i \to j$ 的边数，那么它的 Kirchhoff 矩阵 $L$ 也为 $E-D$。</p>
<p>因为指定了根节点，所以我们只能输出代数余子式 $L_{root}$ 的值，其它代数余子式的值就是以 $i$ 为根的时候，外向树的个数。</p>
<h4 id="证明-3"><a href="#证明-3" class="headerlink" title="证明"></a>证明</h4><p>略，详见 OI-wiki。</p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>代码如下，当 $t&#x3D;0$ 的时候代表是无向图，当 $t&#x3D;1$ 的时候代表是有向图：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 605</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,m,t,x,y,z,a[N][N],i,j,k,mod=<span class="number">1e9</span>+<span class="number">7</span>,ans=<span class="number">1</span>,has,res;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;t;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">		x--,y--;</span><br><span class="line">		<span class="keyword">if</span>(x==y) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span>(t==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(x&gt;=<span class="number">1</span>&amp;&amp;y&gt;=<span class="number">1</span>) a[x][y]-=z,a[y][x]-=z;</span><br><span class="line">			<span class="keyword">if</span>(x&gt;=<span class="number">1</span>) a[x][x]+=z;</span><br><span class="line">			<span class="keyword">if</span>(y&gt;=<span class="number">1</span>) a[y][y]+=z;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(x&gt;=<span class="number">1</span>&amp;&amp;y&gt;=<span class="number">1</span>)a[x][y]-=z;</span><br><span class="line">			<span class="keyword">if</span>(y&gt;=<span class="number">1</span>) a[y][y]+=z;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	n--;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++) a[i][j]=(a[i][j]%mod+mod)%mod;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			<span class="keyword">while</span>(a[i][i])&#123;</span><br><span class="line">				res = a[j][i]/a[i][i];</span><br><span class="line">				<span class="keyword">for</span>(k=i;k&lt;=n;k++) a[j][k]=(a[j][k]-a[i][k]*res%mod+mod)%mod;</span><br><span class="line">				<span class="built_in">swap</span>(a[i],a[j]),has^=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">swap</span>(a[i],a[j]),has^=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(i&lt;=n)&#123;</span><br><span class="line">		cout&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) ans=ans*a[i][i]%mod;</span><br><span class="line">	<span class="keyword">if</span>(has) ans=(mod-ans)%mod;</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Input:</span></span><br><span class="line"><span class="comment">2 998244353</span></span><br><span class="line"><span class="comment">1 4</span></span><br><span class="line"><span class="comment">1 5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>如果我们要求有向图以不同节点为根的外向生成树的数量总和，那么需要我们拿出基尔霍夫矩阵，然后把这个矩阵任意一行改成全 $1$。</p>
<p>注意：是任意一行，列上的数不用管它，证明尚不明确，先记住这个结论吧。</p>
<p>例题：<a href="http://oi.nks.edu.cn:19360/zh/Problem/Details?cid=2719&tid=D">D - xfh1我回来了 | NKOJ</a>，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 17</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 505</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,m,x[M],y[M],z[M],i,j,f[<span class="number">1</span>&lt;&lt;N],a[N][N],ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll has = <span class="number">0</span>,ans = <span class="number">1</span>,res,i,j,k;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			<span class="keyword">while</span>(a[i][i])&#123;</span><br><span class="line">				res = a[j][i]/a[i][i];</span><br><span class="line">				<span class="keyword">for</span>(k=i;k&lt;=n;k++) a[j][k]=(a[j][k]-a[i][k]*res%mod+mod)%mod;</span><br><span class="line">				<span class="built_in">swap</span>(a[i],a[j]),has^=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">swap</span>(a[i],a[j]),has^=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(i&lt;=n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) ans=ans*a[i][i]%mod;</span><br><span class="line">	<span class="keyword">if</span>(has) ans=(mod-ans)%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++) cin&gt;&gt;x[i]&gt;&gt;y[i]&gt;&gt;z[i];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;(n<span class="number">-1</span>));i++)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++) <span class="keyword">if</span>((i&gt;&gt;z[j])&amp;<span class="number">1</span>) a[x[j]][y[j]]--,a[y[j]][y[j]]++;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++) a[<span class="number">1</span>][j]=<span class="number">1</span>;</span><br><span class="line">		f[i] = <span class="built_in">solve</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;(n<span class="number">-1</span>));i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=(i&amp;(i<span class="number">-1</span>));;j=(i&amp;(j<span class="number">-1</span>)))&#123;</span><br><span class="line">			f[i] = (f[i]-f[j]+mod)%mod;</span><br><span class="line">			<span class="keyword">if</span>(j==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>;j++) <span class="keyword">if</span>(!((i&gt;&gt;j)&amp;<span class="number">1</span>)) <span class="keyword">break</span>;</span><br><span class="line">		ans = (ans+f[i]*j)%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
        <tag>矩阵</tag>
        <tag>高斯消元</tag>
        <tag>行列式</tag>
        <tag>矩阵树（Matrix-Tree）定理</tag>
        <tag>LGV 引理</tag>
        <tag>BEST 定理</tag>
      </tags>
  </entry>
  <entry>
    <title>数学学习笔记3</title>
    <url>/2024/01/07/%E6%95%B0%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</url>
    <content><![CDATA[<h1 id="Burnside-引理"><a href="#Burnside-引理" class="headerlink" title="Burnside 引理"></a>Burnside 引理</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>设 $A \times S &#x3D; B$，其中 $A,B$ 是一个序列，$S$ 是一种置换，例如把 $1$ 号元素放到 $2$ 号元素的位置，把 $2$ 号元素放到 $3$ 号元素的位置等等。</p>
<p>那么若这里有若干个 $S$，这些 $S$ 互相进行变换也不会产生其它的元素，则这些 $S$ 满足：</p>
<blockquote>
<p>一定有单位变换，即所变换前后有元素都不变。</p>
</blockquote>
<p>并且衍生出了一个定理，若 $A \times S&#x3D;B$，则称 $A,B$ 等价，设 $sum$ 为所有序列的等价类，则：</p>
<p>$$<br>sum &#x3D; \dfrac{1}{cnt}\sum_{S} P(S)<br>$$</p>
<p>其中 $cnt$ 是 $S$ 的数量，$P(S)$ 就等于<strong>经过 $S$ 这个变换后不变的序列数量</strong>。</p>
<h2 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h2><p>有一个 $6$ 个面的正方体筛子，每个面可以染成 $k$ 种颜色种的任意一种，如果两个正方体筛子涂色后经过若干次旋转完全相同，则称这两个筛子相同，问不同的筛子有多少个？</p>
<p>首先，直接算肯定会算重，我们考虑利用 Burnside 定理来算。</p>
<p>因为我们讨论所有转的情况：</p>
<blockquote>
<p>不转，那么前后不变的染色数就是 $k^6$。  </p>
</blockquote>
<blockquote>
<p>沿着两个相对面的中点的连线转 $90$ 度，前后不变的染色数是 $k^3$，因为选的两个面可以任意染色，并且剩下的四个面颜色必须相同才能通过旋转后相同。两个相对的面有 $3$ 种选择，可以向左或者向右 $90$ 度，所以这部分的代价是 $6 \times k^3$。</p>
</blockquote>
<blockquote>
<p>沿着两个相对面的中点的连线转 $180$ 度，前后不变的染色数是 $k^4$，因为选的两个面可以任意染色，并且剩下的四个面中相对的面的颜色必须相同才能通过旋转后相同。两个相对的面有 $3$ 种选择，所以这部分的代价是 $3 \times k^4$。</p>
</blockquote>
<blockquote>
<p>沿着两个相对面棱的中点的连线转 $180$ 度，前后不变的染色数是 $k^3$，因为有一组相对的面要染相同颜色，另外有两对相邻的面要染相同颜色，两个相对的棱有 $3$ 种选择，所以这部分的代价是 $6 \times k^3$。</p>
</blockquote>
<blockquote>
<p>沿着两个相对顶点的连线转 $120$ 度，前后不变的染色数是 $k^2$，因为这两个顶点连接的 $3$ 个面颜色必须相同，两个相对的顶点有 $4$ 种选择，逆时针或者顺时针有 $2$ 个选择，所以这部分的代价是 $8 \times k^2$。</p>
</blockquote>
<p>因此，总的 $cnt&#x3D;1+6+3+6+8$，答案为：</p>
<p>$$<br>sum&#x3D;\dfrac{1}{24}(k^6+6 \times k^3+3 \times k^4+6 \times k^3+8 \times k^2)<br>$$</p>
<p>这就是一个经典的 Burnside 定理的运用。</p>
<p>证明可以参考 Aaron_luomiao 的博客 <a href="https://www.luogu.com.cn/blog/Alm/burnside-yin-li-zheng-ming">here</a>，写得十分形象生动。</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>群论</tag>
        <tag>Burnside 引理</tag>
      </tags>
  </entry>
  <entry>
    <title>数学学习笔记4</title>
    <url>/2024/01/07/%E6%95%B0%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</url>
    <content><![CDATA[<h1 id="二阶递推数列"><a href="#二阶递推数列" class="headerlink" title="二阶递推数列"></a>二阶递推数列</h1><p>若一个递推式 $f_i&#x3D;af_{i-1}+bf_{i-2}(0&lt;a,b)$，那么这个递推式就是一个二阶递推数列。</p>
<p>我们以斐波那契数列为例来探讨一下某个特殊类型的二阶递推数列的性质。</p>
<p>$$<br>f_i&#x3D;f_{i-1}+f_{i-2}<br>$$</p>
<p>通项公式（可由特征方程推出，此处不详细介绍）：<br>$$f_n&#x3D;\dfrac{1}{\sqrt{5}}(\dfrac{(1+\sqrt{5})^n}{2^n}-\dfrac{(1-\sqrt{5})^n}{2^n})$$</p>
<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><ol>
<li>卡西尼性质：$f_{i-1}f_{i+1}-f_i^2&#x3D;(-1)^i$。</li>
<li>附加性：$f_{n+k}&#x3D;f_nf_{k-1}+f_{n+1}f_k$。</li>
<li>$\forall k \in \mathbf{N},f_n \mid f_{nk}$。</li>
<li>若 $f_a \mid f_b$ 则 $a \mid b$。</li>
<li>最大公因数：$\gcd(f_a,f_b)&#x3D;\gcd(a,b)$。</li>
<li>以斐波那契数列相邻两项作为输入会使欧几里德算法达到最坏复杂度。</li>
</ol>
<h2 id="求出第-i-个值"><a href="#求出第-i-个值" class="headerlink" title="求出第 $i$ 个值"></a>求出第 $i$ 个值</h2><p>我们可以用矩阵乘法，即：<br>$$\begin{bmatrix}f_i &amp; f_{i+1}\end{bmatrix} \times \begin{bmatrix}0 &amp; 1 \\ 1 &amp; 1\end{bmatrix}&#x3D;\begin{bmatrix}f_{i+1} &amp; f_{i+2}\end{bmatrix}$$</p>
<p>时间复杂度可以看做是 $O(\log n)$。</p>
<p>特别的如果 $5$ 在 $\bmod$ 下有二次剩余的话，我们可以直接通过通项公式解决，时间复杂度是小常数的 $O(\log n)$。</p>
<h2 id="求出值为-x-的最前下标"><a href="#求出值为-x-的最前下标" class="headerlink" title="求出值为 $x$ 的最前下标"></a>求出值为 $x$ 的最前下标</h2><p>即求出最小的 $i$ 使得 $f_i&#x3D;x$。</p>
<p>首先这个情况必须满足 $5$ 有二次剩余，否则会很麻烦，此处假设 $5$ 有二次剩余。</p>
<p>下面令 $x \gets x \times \sqrt{5}$，通过通项公式计算，设 $A&#x3D;\dfrac{(1+\sqrt{5})^n}{2^n},B&#x3D;\dfrac{(1-\sqrt{5})^n}{2^n}$，那么有 $AB&#x3D;(-1)^n$ 并且 $(A-B)^2&#x3D;x^2$。</p>
<p>于是知二求一即可，分讨 $4$ 种情况，求一下二次剩余和 bsgs 即可。（可能还需要用到原根，详见笔记 1）</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000009</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> phi (mod-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inv 383008016</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> g 13</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line">ll n,a,b,ans=LLONG_MAX,cnt,cnt1,cnt2,cntt;</span><br><span class="line">__gnu_pbds::gp_hash_table&lt;ll,ll&gt; op;</span><br><span class="line"><span class="function">ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>%p,t=a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">bsgs</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	op.<span class="built_in">clear</span>();</span><br><span class="line">    ll t = <span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(p)),now = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;t;j++) op[b*now%p] = j,now = now*a%p;</span><br><span class="line">    ll cnt = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=t;i++)&#123;</span><br><span class="line">		ll ans;</span><br><span class="line">		<span class="keyword">if</span>(op.<span class="built_in">find</span>(cnt)!=op.<span class="built_in">end</span>()) ans=op[cnt];</span><br><span class="line">		<span class="keyword">else</span> ans=<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">if</span>(ans&gt;=<span class="number">0</span>&amp;&amp;i*t-ans&gt;<span class="number">0</span>) <span class="keyword">return</span> i*t-ans;</span><br><span class="line">		cnt = cnt*now%p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	n=n*inv%mod;</span><br><span class="line">	a = (<span class="number">1</span>+inv)*<span class="built_in">qmi</span>(<span class="number">2</span>,mod<span class="number">-2</span>,mod)%mod,b = (<span class="number">1</span>-inv+mod)*<span class="built_in">qmi</span>(<span class="number">2</span>,mod<span class="number">-2</span>,mod)%mod;</span><br><span class="line">	cout&lt;&lt;(<span class="built_in">qmi</span>(a,<span class="number">2</span>,mod)+<span class="built_in">qmi</span>(b,<span class="number">2</span>,mod))%mod&lt;&lt;endl;</span><br><span class="line">	<span class="comment">//n is odd</span></span><br><span class="line">	cnt=n*n%mod,cnt=(cnt<span class="number">-4</span>+mod)%mod,cntt=<span class="built_in">bsgs</span>(g,cnt,mod);</span><br><span class="line">	<span class="keyword">if</span>(cntt%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">		cnt1=(<span class="built_in">qmi</span>(g,cntt/<span class="number">2</span>,mod)+n)*<span class="built_in">qmi</span>(<span class="number">2</span>,mod<span class="number">-2</span>,mod)%mod,cnt2=(<span class="built_in">qmi</span>(g,cntt/<span class="number">2</span>+phi/<span class="number">2</span>,mod)+n)*<span class="built_in">qmi</span>(<span class="number">2</span>,mod<span class="number">-2</span>,mod)%mod;</span><br><span class="line">		ans=<span class="built_in">min</span>(ans,<span class="built_in">bsgs</span>(a*a%mod,cnt1*a%mod,mod)*<span class="number">2</span><span class="number">-1</span>);</span><br><span class="line">		ans=<span class="built_in">min</span>(ans,<span class="built_in">bsgs</span>(a*a%mod,cnt2*a%mod,mod)*<span class="number">2</span><span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//n is oven</span></span><br><span class="line">	cnt=n*n%mod,cnt=(cnt+<span class="number">4</span>+mod)%mod,cntt=<span class="built_in">bsgs</span>(g,cnt,mod);</span><br><span class="line">	<span class="keyword">if</span>(cntt%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">		cnt1=(<span class="built_in">qmi</span>(g,cntt/<span class="number">2</span>,mod)+n)*<span class="built_in">qmi</span>(<span class="number">2</span>,mod<span class="number">-2</span>,mod)%mod,cnt2=(<span class="built_in">qmi</span>(g,cntt/<span class="number">2</span>+phi/<span class="number">2</span>,mod)+n)*<span class="built_in">qmi</span>(<span class="number">2</span>,mod<span class="number">-2</span>,mod)%mod;</span><br><span class="line">		ans=<span class="built_in">min</span>(ans,<span class="built_in">bsgs</span>(a*a%mod,cnt1,mod)*<span class="number">2</span>);</span><br><span class="line">		ans=<span class="built_in">min</span>(ans,<span class="built_in">bsgs</span>(a*a%mod,cnt2,mod)*<span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(ans&lt;=mod) cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="模意义下周期性"><a href="#模意义下周期性" class="headerlink" title="模意义下周期性"></a>模意义下周期性</h2><p>先说结论，如果 $\sqrt{5}$ 在模 $p$ 下有可以表示的数，那么周期一定整除 $p-1$，否则周期一定整除 $2p+2$。（$p$ 是大于 $5$ 的质数）</p>
<p>并且周期是一个环，不是 $\rho$ 形状的。</p>
<h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>设 $A&#x3D;\dfrac{(1+\sqrt{5})^n}{2^n},B&#x3D;\dfrac{(1-\sqrt{5})^n}{2^n}$，如果 $\sqrt{5} \in Z_p$，那么 $A \in Z_p,B \in Z_p$，根据费马小定理，那么 $A^p \equiv A,B^p \equiv B$，立即得 $d(p) \mid p-1$。</p>
<p>如果 $\sqrt{5} \not\in Z_p$，那么 $A,B \in Z_p[\sqrt{5}]$，此处涉及到“扩域”的知识，大概就是设 $z&#x3D;ax+by$ 其中 $y&#x3D;\sqrt{5}$，$z \in Z_p[\sqrt{5}]$，我们可以对于它定义加法乘法运算，并且满足交换律，结合律，分配律，故我们可以在这个域里面执行四则运算。</p>
<p>但是 $AB$ 仍然等于 $-1$，所以：</p>
<p>$$<br>\begin{aligned}<br>A^p &amp;&#x3D; (-BA)A^p\\<br>&amp;&#x3D;-A^{p+1}B\\<br>&amp;&#x3D;-B((\dfrac12)^2-(\dfrac{\sqrt{5}}{2})^2)\\<br>&amp;&#x3D;B<br>\end{aligned}<br>$$</p>
<p>解释一下为什么 $A^{p+1}&#x3D;((\dfrac12)^2-(\dfrac{\sqrt{5}}{2})^2)$，首先我们知道 $A^{p-1}$ 因为 $5$ 在模 $p$ 意义下没有二次剩余，所以 $A^{p-1}$ 也没有可以表示出来的数，但是因为 $p$ 是奇素数，所以 $p-1$ 是偶数，那么 $\sqrt{5}^{p-1}&#x3D;5^{\frac{p-1}{2}}$ 是可以表示出来的，它的平方就是 $5^{p-1}$，根据费马小定理可得 $5^{p-1} \equiv 1$，所以 $5^{\frac{p-1}{2}}&#x3D;1$ 或者 $-1$，如果它等于 $1$，那么 $\sqrt{5}$ 就可以表示出来，所以它等于 $-1$。（需要二项式展开，此处略过）</p>
<h3 id="欧拉准则"><a href="#欧拉准则" class="headerlink" title="欧拉准则"></a>欧拉准则</h3><p>这里就可以推出来，如果 $p$ 是奇质数，那么当 $m^{\frac{p-1}{2}} \equiv 1$ 时，$m$ 有二次剩余，当它等于 $-1$ 时，$m$ 没有二次剩余。</p>
<p>所以 $A^{p-1}&#x3D; -1$，所以 $A^{p+1} &#x3D; -A^2&#x3D;AB&#x3D;((\dfrac12)^2-(\dfrac{\sqrt{5}}{2})^2)&#x3D;-1$。</p>
<p>同理 $B^p&#x3D;A$，所以 $A^{2p+3}&#x3D;A^{2p+2}A&#x3D;(-1)^2A&#x3D;A$，于是找到一个循环节 $2p+2$。</p>
<p>证毕。</p>
<p>如果要找最小周期的话，像阶一样求解即可，但是判断的时候用矩阵乘法即可。</p>
<p>这个周期称作皮萨诺周期，如果我们要求其它数的周期的话，我们需要先分解，然后直接用 $\operatorname{lcm}$ 合并。</p>
<p>有性质 $d(p^k)&#x3D;p \times d(p^{k-1})(2 \le k)$ 且 $p$ 是质数，特别的当 $p \le 5$ 的时候需要手动找循环节，$d(2)&#x3D;3,d(3)&#x3D;8,d(5)&#x3D;20$。</p>
<p>那么合数的循环节也可以求了，并且可以证明 $d(m) \le 6m$，且只有在满足 $m&#x3D;2\times 5^k$ 的形式时才取到等号。</p>
<p>特别的，如果是其它二阶递推我们把特征方程写出来之后也含有根号，如果这个根号能够在模 $p$ 意义下表示出来，也需要计算最小周期，不能认为周期一定是 $p-1$ 或者 $2p+2$。</p>
<p>寻找周期的代码（需要特判 $1 \le p \le 5$）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll T,mod,n,i,ans,tempp,d[<span class="number">1000005</span>],tot,a[<span class="number">2</span>][<span class="number">2</span>],maps[<span class="number">2</span>][<span class="number">2</span>],temp[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">gcd</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(y==<span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">gcd</span>(y,x%y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>%p,t=a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">char</span> buf[<span class="number">1000000</span>],*p=buf,*q=buf;</span><br><span class="line">	<span class="keyword">return</span> p==q&amp;&amp;(q=(p=buf)+<span class="built_in">fread</span>(buf,<span class="number">1</span>,<span class="number">1000000</span>,stdin),p==q)?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)res=res*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> obuf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p3=obuf; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span>&#123; </span><br><span class="line">	p3-obuf&lt;=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)?(*p3++=c):(<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout),p3=obuf,*p3++=c); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(ll x)</span></span>&#123; </span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">pc</span>(<span class="string">&#x27;-&#x27;</span>),x=-x; </span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">write</span>(x/<span class="number">10</span>); </span><br><span class="line">	<span class="built_in">pc</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">times</span><span class="params">(ll a[<span class="number">2</span>][<span class="number">2</span>],ll b[<span class="number">2</span>][<span class="number">2</span>])</span></span>&#123;</span><br><span class="line">	temp[<span class="number">0</span>][<span class="number">0</span>] = (a[<span class="number">0</span>][<span class="number">0</span>]*b[<span class="number">0</span>][<span class="number">0</span>]+a[<span class="number">0</span>][<span class="number">1</span>]*b[<span class="number">1</span>][<span class="number">0</span>])%mod;</span><br><span class="line">	temp[<span class="number">0</span>][<span class="number">1</span>] = (a[<span class="number">0</span>][<span class="number">0</span>]*b[<span class="number">0</span>][<span class="number">1</span>]+a[<span class="number">0</span>][<span class="number">1</span>]*b[<span class="number">1</span>][<span class="number">1</span>])%mod;</span><br><span class="line">	temp[<span class="number">1</span>][<span class="number">0</span>] = (a[<span class="number">1</span>][<span class="number">0</span>]*b[<span class="number">0</span>][<span class="number">0</span>]+a[<span class="number">1</span>][<span class="number">1</span>]*b[<span class="number">1</span>][<span class="number">0</span>])%mod;</span><br><span class="line">	temp[<span class="number">1</span>][<span class="number">1</span>] = (a[<span class="number">1</span>][<span class="number">0</span>]*b[<span class="number">0</span>][<span class="number">1</span>]+a[<span class="number">1</span>][<span class="number">1</span>]*b[<span class="number">1</span>][<span class="number">1</span>])%mod;</span><br><span class="line">	a[<span class="number">0</span>][<span class="number">0</span>] = temp[<span class="number">0</span>][<span class="number">0</span>],a[<span class="number">0</span>][<span class="number">1</span>] = temp[<span class="number">0</span>][<span class="number">1</span>],a[<span class="number">1</span>][<span class="number">0</span>] = temp[<span class="number">1</span>][<span class="number">0</span>],a[<span class="number">1</span>][<span class="number">1</span>] = temp[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">getf</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">	a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>,a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>,a[<span class="number">1</span>][<span class="number">0</span>] = a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	maps[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>,maps[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>,maps[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>,maps[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(p)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p&amp;<span class="number">1</span>) <span class="built_in">times</span>(a,maps);</span><br><span class="line">		<span class="built_in">times</span>(maps,maps);</span><br><span class="line">		p&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(a[<span class="number">0</span>][<span class="number">0</span>]==<span class="number">0</span>&amp;&amp;a[<span class="number">0</span>][<span class="number">1</span>]==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">	ll now = p;</span><br><span class="line">	tot = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">2</span>;i*i&lt;=p;i++) <span class="keyword">while</span>(p%i==<span class="number">0</span>) d[++tot] = i,p/=i;</span><br><span class="line">	<span class="keyword">if</span>(p&gt;<span class="number">1</span>) d[++tot] = p;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=tot;i++) <span class="keyword">if</span>(<span class="built_in">getf</span>(now/d[i])) now/=d[i];</span><br><span class="line">	<span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">qmi</span>(x,(y<span class="number">-1</span>)/<span class="number">2</span>,y)==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sol</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	mod = x;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">3</span>) <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">4</span>) <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">5</span>) <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">check</span>(<span class="number">5</span>,x)?<span class="built_in">solve</span>(<span class="number">2</span>*x+<span class="number">2</span>):<span class="built_in">solve</span>(x<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(<span class="number">141414</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	T=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		ans=<span class="number">1</span>;</span><br><span class="line">		n=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">1</span>) ans=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">2</span>) ans=<span class="number">3</span>;</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">3</span>) ans=<span class="number">8</span>;</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">4</span>) ans=<span class="number">6</span>;</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">5</span>) ans=<span class="number">20</span>;</span><br><span class="line">		<span class="keyword">if</span>(n&gt;<span class="number">5</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span>(i=<span class="number">2</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">					tempp = <span class="built_in">sol</span>(i);</span><br><span class="line">					n /= i;</span><br><span class="line">					<span class="keyword">while</span>(n%i==<span class="number">0</span>) n/=i,tempp*=i;</span><br><span class="line">					ans = ans*tempp/<span class="built_in">gcd</span>(ans,tempp);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(n&gt;<span class="number">1</span>) tempp=<span class="built_in">sol</span>(n),ans = ans*tempp/<span class="built_in">gcd</span>(ans,tempp);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">write</span>(ans),<span class="built_in">pc</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>数论</tag>
        <tag>二阶递推数列</tag>
        <tag>欧拉准则</tag>
        <tag>周期</tag>
      </tags>
  </entry>
  <entry>
    <title>平衡树</title>
    <url>/2024/01/19/%E5%B9%B3%E8%A1%A1%E6%A0%91/</url>
    <content><![CDATA[<h1 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h1><p>平衡树是二叉查找树的一种，二叉查找树有一个很强的性质：<strong>中序遍历的结果是单调的。</strong></p>
<p>例如下面这棵树：</p>
<p><img src="/img/1.png"></p>
<p>它的中序遍历就是 $1,2,3,4,5,6,7$，并且树高是 $\log n$，这样的话我们在树上就算暴力跳边，时间复杂度也是 $\log$ 级别的。</p>
<p>但是如果我们是动态插入点的话，就可能会出现一条链的情况，这样的话操作就会退化成 $O(n)$ 级别，如下图所示：</p>
<p><img src="/img/2.png"></p>
<p>虽然高度是这么大，但是依然满足二叉查找树的性质，于是就有了一个数据结构叫做平衡树，来强制让树高在 $\log$ 级别，此处主要叙述其中一种功能强大，常数小的 Treap。（Splay 请左转 LCT 区）</p>
<h2 id="Treap"><a href="#Treap" class="headerlink" title="Treap"></a>Treap</h2><p>平衡树的核心操作就是旋转，因为我们发现同一个中序遍历可以有很多种树的形态，就像上面两张图展示的一样，我们先介绍有旋转的 Treap，再细说一下无旋 Treap（fhq-Treap）。</p>
<p>首先，我们定义左旋为把右儿子节点变到根节点；右旋为把左儿子节点变到根节点。如图所示（节点上的数字是编号，不是权值）：</p>
<p><img src="/img/3.png"></p>
<p>根据平衡树的定义，我们发现这样旋转完全不会影响中序遍历的结果。</p>
<p>于是就有了旋转代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">zig</span><span class="params">(ll &amp;p)</span></span>&#123;</span><br><span class="line">	ll q = tr[p].l;</span><br><span class="line">	tr[p].l = tr[q].r,tr[q].r = p;</span><br><span class="line">	p = q;</span><br><span class="line">	<span class="built_in">Update</span>(tr[p].r),<span class="built_in">Update</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zag</span><span class="params">(ll &amp;p)</span></span>&#123;</span><br><span class="line">	ll q = tr[p].r;</span><br><span class="line">	tr[p].r = tr[q].l,tr[q].l = p;</span><br><span class="line">	p = q;</span><br><span class="line">	<span class="built_in">Update</span>(tr[p].l),<span class="built_in">Update</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <code>zig</code> 是左旋，<code>zag</code> 是右旋。</p>
<p>那什么时候旋转呢？考虑我们学习过的笛卡尔树，它每个节点有两个值，其中一个的中序遍历单调，另外一个则满足堆性质，如果我们给 Treap 上的每个节点给一个堆的键值，如果随机赋值，那么期望高度就是 $O(\log)$ 级别的，这也是 Treap（Tree+heap）名字的由来。</p>
<p>考虑用小根堆的维护，如果父亲节点的堆的键值大于当前节点堆的键值，就往上旋转。（左旋或者右旋视当前节点是父亲的左&#x2F;右儿子而定）</p>
<p>最后的结果就是这样的：</p>
<p><img src="/img/4.png"></p>
<p>（第一个值是中序遍历到的值，第二个值是堆的键值）</p>
<p>到现在，平衡树就构建完了，那么我们考虑一下一些基本操作。为了方便起见，可以在树中插入 $-\text{inf}$ 和 $\text{inf}$ 两个值，避免处理边界情况。</p>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>直接根据中序遍历的性质查找第一个能够插入的位置就可以了，同时记得更新节点存储的信息和堆的键值，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(ll &amp;p,ll val)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="number">0</span>)&#123;</span><br><span class="line">		p = <span class="built_in">New</span>(val);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(val==tr[p].val)&#123;</span><br><span class="line">		tr[p].cnt++,<span class="built_in">Update</span>(p);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(val&lt;tr[p].val)&#123;</span><br><span class="line">		<span class="built_in">Insert</span>(tr[p].l,val);</span><br><span class="line">		<span class="keyword">if</span>(tr[p].dat&lt;tr[tr[p].l].dat) <span class="built_in">zig</span>(p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">Insert</span>(tr[p].r,val);</span><br><span class="line">		<span class="keyword">if</span>(tr[p].dat&lt;tr[tr[p].r].dat) <span class="built_in">zag</span>(p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Update</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>跟插入一样，只不过找到节点之后删除需要合并它们的左右子树，分类讨论谁来当父节点就可以：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Remove</span><span class="params">(ll &amp;p,ll val)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(val==tr[p].val)&#123;</span><br><span class="line">		<span class="keyword">if</span>(tr[p].cnt&gt;<span class="number">1</span>)&#123;</span><br><span class="line">			tr[p].cnt--;</span><br><span class="line">			<span class="built_in">Update</span>(p);</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(tr[p].l||tr[p].r)&#123;</span><br><span class="line">			<span class="keyword">if</span>(tr[p].r==<span class="number">0</span>||tr[tr[p].l].dat&gt;tr[tr[p].r].dat)&#123;</span><br><span class="line">				<span class="built_in">zig</span>(p),<span class="built_in">Remove</span>(tr[p].r,val);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">zag</span>(p),<span class="built_in">Remove</span>(tr[p].l,val);</span><br><span class="line">			<span class="built_in">Update</span>(p);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> p=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	val&lt;tr[p].val?<span class="built_in">Remove</span>(tr[p].l,val):<span class="built_in">Remove</span>(tr[p].r,val);</span><br><span class="line">	<span class="built_in">Update</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="前驱-后继"><a href="#前驱-后继" class="headerlink" title="前驱&#x2F;后继"></a>前驱&#x2F;后继</h3><p>首先找到当前节点，然后跳左子树即可，如果没有左子树就往父亲节点走，后继同理，不再赘述：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">gp</span><span class="params">(ll val)</span></span>&#123;</span><br><span class="line">	ll ans = <span class="number">1</span>,p = root;</span><br><span class="line">	<span class="keyword">while</span>(p)&#123;</span><br><span class="line">		<span class="keyword">if</span>(val==tr[p].val)&#123;</span><br><span class="line">			<span class="keyword">if</span>(tr[p].l&gt;<span class="number">0</span>)&#123;</span><br><span class="line">				p = tr[p].l;</span><br><span class="line">				<span class="keyword">while</span>(tr[p].r&gt;<span class="number">0</span>) p=tr[p].r;</span><br><span class="line">				ans = p;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(tr[p].val&lt;val&amp;&amp;tr[p].val&gt;tr[ans].val) ans=p;</span><br><span class="line">		p = val&lt;tr[p].val?tr[p].l:tr[p].r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> tr[ans].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">gn</span><span class="params">(ll val)</span></span>&#123;</span><br><span class="line">	ll ans = <span class="number">2</span>,p = root;</span><br><span class="line">	<span class="keyword">while</span>(p)&#123;</span><br><span class="line">		<span class="keyword">if</span>(val==tr[p].val)&#123;</span><br><span class="line">			<span class="keyword">if</span>(tr[p].r&gt;<span class="number">0</span>)&#123;</span><br><span class="line">				p = tr[p].r;</span><br><span class="line">				<span class="keyword">while</span>(tr[p].l&gt;<span class="number">0</span>) p=tr[p].l;</span><br><span class="line">				ans = p;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(tr[p].val&gt;val&amp;&amp;tr[p].val&lt;tr[ans].val) ans=p;</span><br><span class="line">		p = val&lt;tr[p].val?tr[p].l:tr[p].r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> tr[ans].val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="根据值查排名"><a href="#根据值查排名" class="headerlink" title="根据值查排名"></a>根据值查排名</h3><p>找到那个值，途中累加经过的点的数量和左子树的数量即可，不难维护：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">grbv</span><span class="params">(ll p,ll val)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(val==tr[p].val) <span class="keyword">return</span> tr[tr[p].l].size+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(val&lt;tr[p].val) <span class="keyword">return</span> <span class="built_in">grbv</span>(tr[p].l,val);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">grbv</span>(tr[p].r,val)+tr[tr[p].l].size+tr[p].cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="根据排名查值"><a href="#根据排名查值" class="headerlink" title="根据排名查值"></a>根据排名查值</h3><p>类似于线段树上二分，如果排名在左子树里面，就跑到左子树里面，否则检查是否等于当前节点，最后跑到右子树里面即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">gvbr</span><span class="params">(ll p,ll val)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="number">0</span>) <span class="keyword">return</span> LLONG_MAX;</span><br><span class="line">	<span class="keyword">if</span>(tr[tr[p].l].size&gt;=val) <span class="keyword">return</span> <span class="built_in">gvbr</span>(tr[p].l,val);</span><br><span class="line">	<span class="keyword">if</span>(tr[tr[p].l].size+tr[p].cnt&gt;=val) <span class="keyword">return</span> tr[p].val;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">gvbr</span>(tr[p].r,val-tr[tr[p].l].size-tr[p].cnt); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>综上所述，旋转 Treap 的功能大概就这样，接下来我们介绍一种更强大的平衡树：fhq-treap，它可以维护更多区间的信息，并且更好写。</p>
<h2 id="非旋-Treap"><a href="#非旋-Treap" class="headerlink" title="非旋 Treap"></a>非旋 Treap</h2><p>非旋 Treap 的操作只有三个，但是我们可以通过这三个操作实现很多其他的技巧。</p>
<h3 id="分裂-split"><a href="#分裂-split" class="headerlink" title="分裂-split"></a>分裂-split</h3><p>这是非旋 Treap 的核心操作，可以看一下下面那幅图，依然来自于 <a href="https://oi.wiki/">OI-wiki</a>：</p>
<p><img src="/img/5.png"></p>
<p>这是按照权值分裂成左右两棵树，当然我们也可以按照树的大小来分裂，后者更为常用，我们可以控制前 $k$ 个元素分裂出来，并且分裂的时间复杂度也是 $O(\log)$ 的。</p>
<p>代码很简单，分类讨论一下根节点是要分裂到左边子树还是右边子树即可：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">split</span><span class="params">(ll x,ll k,ll &amp;p1,ll &amp;p2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x)&#123;p1=p2=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">	<span class="keyword">if</span>(k&lt;=tr[tr[x].l].siz) <span class="built_in">split</span>(tr[x].l,k,p1,tr[x].l),<span class="built_in">upd</span>(x),p2=x;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">split</span>(tr[x].r,k-tr[tr[x].l].siz<span class="number">-1</span>,tr[x].r,p2),<span class="built_in">upd</span>(x),p1=x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="合并-merge"><a href="#合并-merge" class="headerlink" title="合并-merge"></a>合并-merge</h3><p>按照堆的键值合并两棵子树，像线段树那样合并即可：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">merge</span><span class="params">(ll p1,ll p2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p1||!p2) <span class="keyword">return</span> p1+p2;</span><br><span class="line">	<span class="keyword">if</span>(tr[p1].key&lt;tr[p2].key) <span class="keyword">return</span> tr[p1].r=<span class="built_in">merge</span>(tr[p1].r,p2),<span class="built_in">upd</span>(p1),p1;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> tr[p2].l=<span class="built_in">merge</span>(p1,tr[p2].l),<span class="built_in">upd</span>(p2),p2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="求某个值的排名"><a href="#求某个值的排名" class="headerlink" title="求某个值的排名"></a>求某个值的排名</h3><p>像旋转 Treap 那样累加左子树的大小和经过节点的数量即可：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rankk</span><span class="params">(ll p,ll k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(k&lt;tr[p].p) <span class="keyword">return</span> <span class="built_in">rankk</span>(tr[p].l,k);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> tr[tr[p].l].siz+<span class="number">1</span>+<span class="built_in">rankk</span>(tr[p].r,k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这三个操作就是非旋转 Treap 的基本操作。</p>
<p>接下来我们考虑用这三个操作处理另外的信息：</p>
<ul>
<li><p>插入一个值：找到这个值的排名（小于等于这个值的数量），然后按照排名分裂成两个子树，最后把这个值放到中间合并即可：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(ll k)</span></span>&#123;</span><br><span class="line">	tr[++tot] = (node)&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,k,<span class="built_in">rnd</span>()&#125;;</span><br><span class="line">	ll rank = <span class="built_in">rankk</span>(root,k),r1,r2;</span><br><span class="line">	<span class="built_in">split</span>(root,rank,r1,r2);</span><br><span class="line">	root = <span class="built_in">merge</span>(<span class="built_in">merge</span>(r1,tot),r2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除一个值：找到这个值的排名（小于等于这个值的数量），然后按照排名分裂成三个子树，最后删去中间的子树，合并其余两棵子树即可：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">erase</span><span class="params">(ll k)</span></span>&#123;</span><br><span class="line">	ll rank = <span class="built_in">rankk</span>(root,k),r1,r2,r3,tmp;</span><br><span class="line">	<span class="built_in">split</span>(root,rank,r1,r2),<span class="built_in">split</span>(r1,rank<span class="number">-1</span>,r3,tmp),root=<span class="built_in">merge</span>(r3,r2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查找前驱&#x2F;后继，找到这个值的排名，然后根据排名找值就可以了，实现很简单：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">find</span><span class="params">(ll k)</span></span>&#123;             <span class="comment">//根据排名找值的函数</span></span><br><span class="line">	ll r1,r2,r3,tmp;</span><br><span class="line">	<span class="built_in">split</span>(root,k,r1,r2),<span class="built_in">split</span>(r1,k<span class="number">-1</span>,r3,tmp),root=<span class="built_in">merge</span>(<span class="built_in">merge</span>(r3,tmp),r2);</span><br><span class="line">	<span class="keyword">return</span> tr[tmp].p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>注：无旋 Treap 甚至不需要讨论边界情况，当 $root&#x3D;0$ 的时候就是边界情况，程序会自动处理。</strong></p>
<h3 id="区间操作"><a href="#区间操作" class="headerlink" title="区间操作"></a>区间操作</h3><p>除此之外，非旋 Treap 还支持各种各样的区间操作，下面我们列举几个：</p>
<h4 id="区间翻转"><a href="#区间翻转" class="headerlink" title="区间翻转"></a>区间翻转</h4><p>首先，因为非旋 Treap 只有分裂合并操作，没有旋转，区间的 <code>pushdown</code> 和 <code>pushup</code> 比较好实现，就有了区间翻转这个操作。</p>
<p>如果我们想要整体翻转一个二叉树的中序遍历，对于每个节点都翻转左右节点就可以了。</p>
<p>假如说我们要翻转 $[l,r]$ 这个区间，就通过分裂操作分裂成 $[1,l-1]$，$[l,r]$，$[r+1,n]$ 三个区间对应的子树，对于中间那个区间的子树的根打上区间翻转的 tag 即可，同时记得翻转左右子树。</p>
<p>特别注意：<code>split</code>，<code>merge</code>，<code>rank</code> 查询的时候一定要先下放标记，再执行操作，下面附上 <a href="https://www.luogu.com.cn/problem/P3391">P3391 【模板】文艺平衡树</a> 的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 2000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;ll l,r,siz,p,key,tag;&#125;tr[N];</span><br><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(time(<span class="number">0</span>))</span></span>;</span><br><span class="line">ll n,m,i,x,y,tot,root,ans,ANS;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">upd</span><span class="params">(ll x)</span></span>&#123;tr[x].siz = tr[tr[x].l].siz+tr[tr[x].r].siz+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(ll p)</span></span>&#123;<span class="keyword">if</span>(p) tr[p].tag^=<span class="number">1</span>,<span class="built_in">swap</span>(tr[p].l,tr[p].r);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(ll p)</span></span>&#123;<span class="keyword">if</span>(tr[p].tag) <span class="built_in">pushtag</span>(tr[p].l),<span class="built_in">pushtag</span>(tr[p].r),tr[p].tag=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">split</span><span class="params">(ll x,ll k,ll &amp;p1,ll &amp;p2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x)&#123;p1=p2=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">	<span class="built_in">pushdown</span>(x);  <span class="comment">//记得pushdown</span></span><br><span class="line">	<span class="keyword">if</span>(k&lt;=tr[tr[x].l].siz) <span class="built_in">split</span>(tr[x].l,k,p1,p2),tr[x].l=p2,<span class="built_in">upd</span>(x),p2=x;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">split</span>(tr[x].r,k-tr[tr[x].l].siz<span class="number">-1</span>,p1,p2),tr[x].r=p1,<span class="built_in">upd</span>(x),p1=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">merge</span><span class="params">(ll p1,ll p2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p1||!p2) <span class="keyword">return</span> p1+p2;</span><br><span class="line">	<span class="built_in">pushdown</span>(p1),<span class="built_in">pushdown</span>(p2);  <span class="comment">//记得pushdown</span></span><br><span class="line">	<span class="keyword">if</span>(tr[p1].key&lt;tr[p2].key) <span class="keyword">return</span> tr[p1].r=<span class="built_in">merge</span>(tr[p1].r,p2),<span class="built_in">upd</span>(p1),p1;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> tr[p2].l=<span class="built_in">merge</span>(p1,tr[p2].l),<span class="built_in">upd</span>(p2),p2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rankk</span><span class="params">(ll p,ll k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">pushdown</span>(p);   <span class="comment">//记得pushdown</span></span><br><span class="line">	<span class="keyword">if</span>(k&lt;tr[p].p) <span class="keyword">return</span> <span class="built_in">rankk</span>(tr[p].l,k);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> tr[tr[p].l].siz+<span class="number">1</span>+<span class="built_in">rankk</span>(tr[p].r,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(ll k)</span></span>&#123;</span><br><span class="line">	tr[++tot] = (node)&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,k,<span class="built_in">rnd</span>()&#125;;</span><br><span class="line">	ll rank = <span class="built_in">rankk</span>(root,k),r1,r2;</span><br><span class="line">	<span class="built_in">split</span>(root,rank,r1,r2);</span><br><span class="line">	root = <span class="built_in">merge</span>(<span class="built_in">merge</span>(r1,tot),r2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">	ll r1,r2,r3,tmp;</span><br><span class="line">	<span class="built_in">split</span>(root,y,r1,r2),<span class="built_in">split</span>(r1,x<span class="number">-1</span>,r3,tmp),<span class="built_in">pushtag</span>(tmp),root=<span class="built_in">merge</span>(<span class="built_in">merge</span>(r3,tmp),r2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="built_in">pushdown</span>(x),<span class="built_in">dfs</span>(tr[x].l),cout&lt;&lt;tr[x].p&lt;&lt;<span class="string">&quot; &quot;</span>,<span class="built_in">dfs</span>(tr[x].r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">insert</span>(i);</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">		<span class="built_in">solve</span>(x,y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(root);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="区间加-赋值"><a href="#区间加-赋值" class="headerlink" title="区间加&#x2F;赋值"></a>区间加&#x2F;赋值</h4><p>很简单，不再赘述，套路如线段树下放 <code>tag</code> 那样：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(ll p,ll c,ll c2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(c!=inf)&#123;</span><br><span class="line">		tr[p].val=c,tr[p].s=c*tr[p].siz,tr[p].tag=c;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(ll p)</span></span>&#123;<span class="built_in">pushtag</span>(tr[p].l,tr[p].tag),<span class="built_in">pushtag</span>(tr[p].r,tr[p].tag),tr[p].tag=inf;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="区间维护最大子段和"><a href="#区间维护最大子段和" class="headerlink" title="区间维护最大子段和"></a>区间维护最大子段和</h4><p>只需要记住 <code>pushup</code> 的时候更新即可，如果有其它的操作，务必确保操作的先后顺序和操作的合并，下面是有区间赋值&#x2F;翻转&#x2F;最大子段和的 <code>pushdown</code>，<code>upd</code>，<code>pushtag</code> 函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">upd</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	tr[x].siz = tr[tr[x].l].siz+tr[tr[x].r].siz+<span class="number">1</span>;</span><br><span class="line">	tr[x].s = tr[tr[x].l].s + tr[tr[x].r].s + tr[x].val;</span><br><span class="line">	tr[x].ms = <span class="built_in">max</span>(&#123;tr[tr[x].l].ms,tr[tr[x].r].ms,<span class="built_in">max</span>(tr[tr[x].l].rs,<span class="number">0</span>)+<span class="built_in">max</span>(tr[tr[x].r].ls,<span class="number">0</span>)+tr[x].val&#125;);</span><br><span class="line">	tr[x].ls = <span class="built_in">max</span>(&#123;tr[tr[x].l].ls,tr[tr[x].l].s+tr[x].val,tr[tr[x].l].s+tr[x].val+tr[tr[x].r].ls&#125;);</span><br><span class="line">	tr[x].rs = <span class="built_in">max</span>(&#123;tr[tr[x].r].rs,tr[tr[x].r].s+tr[x].val,tr[tr[x].r].s+tr[x].val+tr[tr[x].l].rs&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(ll p,ll c,ll c2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(c2!=<span class="number">0</span>)&#123;</span><br><span class="line">		tr[p].tag2^=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">swap</span>(tr[p].l,tr[p].r),<span class="built_in">swap</span>(tr[p].ls,tr[p].rs);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(c!=inf)&#123;</span><br><span class="line">		tr[p].val=c,tr[p].s=c*tr[p].siz,tr[p].tag=c;</span><br><span class="line">		<span class="keyword">if</span>(c&gt;=<span class="number">0</span>) tr[p].ms=tr[p].ls=tr[p].rs=tr[p].s;</span><br><span class="line">		<span class="keyword">else</span> tr[p].ms=tr[p].ls=tr[p].rs=c;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(ll p)</span></span>&#123;<span class="built_in">pushtag</span>(tr[p].l,tr[p].tag,tr[p].tag2),<span class="built_in">pushtag</span>(tr[p].r,tr[p].tag,tr[p].tag2),tr[p].tag=inf,tr[p].tag2=<span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="可持久化平衡树"><a href="#可持久化平衡树" class="headerlink" title="可持久化平衡树"></a>可持久化平衡树</h2><p>有旋转的平衡树处理可持久化十分困难，于是我们可持久化一般针对于无旋 Treap。</p>
<p>实现起来也很简单，只需要把 <code>split</code> 和 <code>merge</code> 过的所有节点保存下来，因为每次操作是 $\log$ 级别的，空间也是 $\log$ 级别的，最好是能开多大就开多大，因为 Treap 的树高完全取决于随机数。</p>
<p>特别的，如果还有 <code>pushdown</code> 操作的话，<code>pushdown</code> 的时候也要把左右儿子复制一份才行，不然的话会修改到之前的数据。</p>
<p>这里以 <a href="https://www.luogu.com.cn/problem/P5055">P5055【模板】可持久化文艺平衡树</a> 为例介绍：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 500005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;ll l,r,siz,p,key,cnt,cntt,tag;&#125;tr[N*<span class="number">60</span>];</span><br><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(time(<span class="number">0</span>))</span></span>;</span><br><span class="line">ll n,i,opt,x,y,z,tot,root[N],ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">upd</span><span class="params">(ll x)</span></span>&#123;tr[x].siz = tr[tr[x].l].siz+tr[tr[x].r].siz+<span class="number">1</span>,tr[x].cnt = tr[x].cntt+tr[tr[x].l].cnt+tr[tr[x].r].cnt;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(ll p)</span></span>&#123;<span class="keyword">if</span>(p) tr[p].tag^=<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tr[p].tag)&#123;</span><br><span class="line">		ll tmp;</span><br><span class="line">		<span class="keyword">if</span>(tr[p].l) tmp=tr[p].l,tr[p].l=++tot,tr[tot]=tr[tmp],<span class="built_in">pushtag</span>(tr[p].l);  <span class="comment">//此处需要复制</span></span><br><span class="line">		<span class="keyword">if</span>(tr[p].r) tmp=tr[p].r,tr[p].r=++tot,tr[tot]=tr[tmp],<span class="built_in">pushtag</span>(tr[p].r);  <span class="comment">//此处需要复制</span></span><br><span class="line">		<span class="built_in">swap</span>(tr[p].l,tr[p].r);</span><br><span class="line">		tr[p].tag=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">split</span><span class="params">(ll x,ll k,ll &amp;p1,ll &amp;p2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x)&#123;p1=p2=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">	<span class="built_in">pushdown</span>(x);</span><br><span class="line">	<span class="keyword">if</span>(k&lt;=tr[tr[x].l].siz)&#123;</span><br><span class="line">		p2=++tot,tr[p2]=tr[x];  <span class="comment">//此处需要复制</span></span><br><span class="line">		<span class="built_in">split</span>(tr[p2].l,k,p1,tr[p2].l),<span class="built_in">upd</span>(p2);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		p1=++tot,tr[p1]=tr[x];  <span class="comment">//此处需要复制</span></span><br><span class="line">		<span class="built_in">split</span>(tr[p1].r,k-tr[tr[p1].l].siz<span class="number">-1</span>,tr[p1].r,p2),<span class="built_in">upd</span>(p1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">merge</span><span class="params">(ll p1,ll p2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p1||!p2) <span class="keyword">return</span> p1+p2;</span><br><span class="line">	<span class="built_in">pushdown</span>(p1),<span class="built_in">pushdown</span>(p2);</span><br><span class="line">	ll tmp = ++tot;</span><br><span class="line">	<span class="keyword">if</span>(tr[p1].key&lt;tr[p2].key) <span class="keyword">return</span> tr[tmp]=tr[p1],tr[tmp].r=<span class="built_in">merge</span>(tr[tmp].r,p2),<span class="built_in">upd</span>(tmp),tmp; <span class="comment">//此处需要复制</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> tr[tmp]=tr[p2],tr[tmp].l=<span class="built_in">merge</span>(p1,tr[tmp].l),<span class="built_in">upd</span>(tmp),tmp; <span class="comment">//此处需要复制</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rankk</span><span class="params">(ll p,ll k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">pushdown</span>(p);</span><br><span class="line">	<span class="keyword">if</span>(k&lt;tr[p].p) <span class="keyword">return</span> <span class="built_in">rankk</span>(tr[p].l,k);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> tr[tr[p].l].siz+<span class="number">1</span>+<span class="built_in">rankk</span>(tr[p].r,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(ll k)</span></span>&#123;</span><br><span class="line">	tr[++tot] = (node)&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,k,<span class="built_in">rnd</span>()&#125;;</span><br><span class="line">	ll now = tot;</span><br><span class="line">	ll rank = <span class="built_in">rankk</span>(root[i],k),r1,r2;</span><br><span class="line">	<span class="built_in">split</span>(root[i],rank,r1,r2);</span><br><span class="line">	root[i] = <span class="built_in">merge</span>(<span class="built_in">merge</span>(r1,now),r2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">erase</span><span class="params">(ll k)</span></span>&#123;</span><br><span class="line">	ll rank = <span class="built_in">rankk</span>(root[i],k),r1,r2,r3,tmp;</span><br><span class="line">	<span class="built_in">split</span>(root[i],rank,r1,r2),<span class="built_in">split</span>(r1,rank<span class="number">-1</span>,r3,tmp);</span><br><span class="line">	<span class="keyword">if</span>(tr[tmp].p==k) root[i]=<span class="built_in">merge</span>(r3,r2);</span><br><span class="line">	<span class="keyword">else</span> root[i]=<span class="built_in">merge</span>(<span class="built_in">merge</span>(r3,tmp),r2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">find</span><span class="params">(ll k)</span></span>&#123;</span><br><span class="line">	ll r1,r2,r3,tmp;</span><br><span class="line">	<span class="built_in">split</span>(root[i],k,r1,r2),<span class="built_in">split</span>(r1,k<span class="number">-1</span>,r3,tmp),root[i]=<span class="built_in">merge</span>(<span class="built_in">merge</span>(r3,tmp),r2);</span><br><span class="line">	<span class="keyword">return</span> tr[tmp].p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;opt&gt;&gt;x;</span><br><span class="line">		root[i] = root[opt];</span><br><span class="line">		<span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">			cin&gt;&gt;y&gt;&gt;z,y^=ans,z^=ans;</span><br><span class="line">			ll r1,r2;</span><br><span class="line">			<span class="built_in">split</span>(root[i],y,r1,r2);</span><br><span class="line">			tr[++tot] = (node)&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,z,<span class="built_in">rnd</span>(),z,z,<span class="number">0</span>&#125;;</span><br><span class="line">			root[i]=<span class="built_in">merge</span>(<span class="built_in">merge</span>(r1,tot),r2);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(x==<span class="number">2</span>)&#123;</span><br><span class="line">			cin&gt;&gt;y,y^=ans;</span><br><span class="line">			ll r1,r2,r3,tmp;</span><br><span class="line">			<span class="built_in">split</span>(root[i],y,r1,r2),<span class="built_in">split</span>(r1,y<span class="number">-1</span>,r3,tmp),root[i]=<span class="built_in">merge</span>(r3,r2);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(x==<span class="number">3</span>)&#123;</span><br><span class="line">			cin&gt;&gt;y&gt;&gt;z,y^=ans,z^=ans;</span><br><span class="line">			ll r1,r2,r3,tmp;</span><br><span class="line">			<span class="built_in">split</span>(root[i],z,r1,r2),<span class="built_in">split</span>(r1,y<span class="number">-1</span>,r3,tmp),<span class="built_in">pushtag</span>(tmp),root[i]=<span class="built_in">merge</span>(<span class="built_in">merge</span>(r3,tmp),r2);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(x==<span class="number">4</span>)&#123;</span><br><span class="line">			cin&gt;&gt;y&gt;&gt;z,y^=ans,z^=ans;</span><br><span class="line">			ll r1,r2,r3,tmp;</span><br><span class="line">			<span class="built_in">split</span>(root[i],z,r1,r2),<span class="built_in">split</span>(r1,y<span class="number">-1</span>,r3,tmp),cout&lt;&lt;(ans=tr[tmp].cnt)&lt;&lt;endl,root[i]=<span class="built_in">merge</span>(<span class="built_in">merge</span>(r3,tmp),r2);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>最后提醒一下，若操作节点编号为 $0$ 请不要操作，因为这是边界情况。</strong> </p>
<p>学到这里，才算是真正入门了平衡树。</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数据结构</tag>
        <tag>平衡树</tag>
        <tag>Treap</tag>
        <tag>可持久化</tag>
      </tags>
  </entry>
  <entry>
    <title>数学学习笔记5</title>
    <url>/2024/01/07/%E6%95%B0%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/</url>
    <content><![CDATA[<h1 id="拉格朗日插值"><a href="#拉格朗日插值" class="headerlink" title="拉格朗日插值"></a>拉格朗日插值</h1><p>有一个一元 $k$ 次方程，给定互不相同的 $x_1,x_2,\dots,x_{k+1}$，以及与之对应的 $f(x_1),f(x_2),\dots,f(x_{k+1})$。</p>
<p>请求出这个 $k$ 次方程，一般情况下只需要对于另一个 $x$ 求出对应的 $f(x)$ 就可以了。</p>
<p>上文的高斯消元给了一种非常好的解法，就是这个方程可以得到一个唯一解，把 $k+1$ 元方程列出来求解即可，时间复杂度 $O(k^3)$，十分不优。</p>
<p>接下来介绍一种 $O(k^2)$ 的做法，但是根据实现和性质不同可以做到 $O(k)$。</p>
<p>先看这个公式：</p>
<p>$$<br>f(x) &#x3D; \sum_{i&#x3D;1}^{k+1} f(x_i) \times \dfrac{\prod_{j \ne i}(x-x_j)}{\prod_{j \ne i}(x_i-x_j)}<br>$$</p>
<p>目前先记住这个公式，后面讲多项式除法的时候会有更详细的证明。</p>
<p>如果 $x$ 数组是我们选的并且是连续整数，那么我们可以 $O(k)$ 插值。</p>
<p>具体方法就是下面的 $\prod_{j \ne i}(x_i-x_j)$ 可以转化为两个阶乘相乘，这个可以 $O(k)$ 预处理。</p>
<p>然后上面的 $\prod_{j \ne i}(x-x_j)$ 就不需要连续整数这个限制，预处理 $\prod(x-x_j)$ 的前后缀积，调用的时候把第 $i$ 项排除掉即可。</p>
<p>这样的话即可做到 $O(k)$ 求某多项式任意点的值，同时小学数学也告诉我们 $k+1$ 个点唯一确定一个 $k$ 次函数，并且这个函数有唯一解，故算法正确。</p>
<p>最后就是注意取模和逆元的问题，特别的，有 $f(x)\equiv f(x \bmod p)\pmod p$，这样也能解决大部分模数是质数的问题了。</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>数值算法</tag>
        <tag>拉格朗日插值</tag>
      </tags>
  </entry>
  <entry>
    <title>数学学习笔记6</title>
    <url>/2024/01/13/%E6%95%B0%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06/</url>
    <content><![CDATA[<h1 id="积性函数"><a href="#积性函数" class="headerlink" title="积性函数"></a>积性函数</h1><p>对于 $a,b$ 满足 $(a,b)&#x3D;1$，则 $f(ab)&#x3D;f(a)f(b)$，那么 $f$ 函数称为积性函数。</p>
<p>$f$ 函数必须是数论函数。（仅限于下面的讨论）</p>
<p>我们有以下常见的积性函数：</p>
<ul>
<li>常数函数 $1(n)&#x3D;1$，单位函数 $\epsilon(n)&#x3D;[n&#x3D;1]$，恒等函数 $\operatorname{Id}(n)&#x3D;n$，$k$ 次幂函数 $\operatorname{Id}^k(n)$。</li>
</ul>
<p>还有欧拉函数 $\varphi$、莫比乌斯函数 $\mu$，约数 $k$ 次方和函数 $\sigma^k$ 等等函数。</p>
<p>以下主要介绍莫比乌斯函数。</p>
<h2 id="莫比乌斯函数"><a href="#莫比乌斯函数" class="headerlink" title="莫比乌斯函数"></a>莫比乌斯函数</h2><p>$$<br>\mu(n)&#x3D;\begin{cases}<br>1 &amp; n&#x3D;1\\<br>(-1)^k &amp; n&#x3D;p_1p_2\dots p_k \\<br>0 &amp; \text{Otherwise}<br>\end{cases}<br>$$</p>
<p>其中有 $\sum_{d \mid n}\mu(d)&#x3D;[n&#x3D;1]$，证明如下：</p>
<blockquote>
<p>当 $n&#x3D;1$ 的时候答案显然成立。</p>
</blockquote>
<blockquote>
<p>否则设 $n$ 有 $k$ 个不同的质因数，那么有答案等于 $\sum_{i&#x3D;0}^k C_{i}^{k}(-1)^i&#x3D;(-1+1)^k$，$k$ 一定大于等于 $1$，此式一定等于 $0$。</p>
</blockquote>
<h1 id="狄利克雷卷积"><a href="#狄利克雷卷积" class="headerlink" title="狄利克雷卷积"></a>狄利克雷卷积</h1><p>卷积是定义与两个数论函数之间的操作：</p>
<p>$$<br>h &#x3D; f*g<br>$$</p>
<p>其中 $h(n) &#x3D; \sum_{d \mid n}f(d)g(\frac nd)$。</p>
<p>狄利克雷卷积显然满足交换律 $f*g&#x3D;g*f$，结合律 $(f*g)*h&#x3D;f*(g*h)$，对加法的分配律 $(f+g)*h&#x3D;f*h+g*h$。</p>
<p>如果是三个函数一起做卷积，那么可以写成：</p>
<p>$$<br>ff(n)&#x3D;\sum_{d_1d_2d_3&#x3D;n}f(d_1)g(d_2)h(d_3)<br>$$</p>
<h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><p>暴力算两个函数的卷积可以直接枚举倍数 $O(n \log n)$ 计算。</p>
<p>但是如果 $g&#x3D;1$ 的时候我们可以用狄利克雷前缀和做到 $O(n \log \log n)$ 的时间复杂度。</p>
<p>也就是 $h_n &#x3D; \sum_{d \mid n}f_n$，具体地，枚举每个质因子，把每个质因子当做一个维度，做高维前缀和即可。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j*pri[i]&lt;=n;j++)&#123;</span><br><span class="line">		f[j*pri[i]]+=f[j];</span><br><span class="line">		<span class="keyword">if</span>(f[j*pri[i]]&gt;=mod) f[j*pri[i]]-=mod;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>同理可以定义狄利克雷后缀和，但是要注意我们的枚举顺序：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=n/pri[i];j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line">		f[j]+=f[j*pri[i]];</span><br><span class="line">		<span class="keyword">if</span>(f[j]&gt;=mod) f[j]-=mod;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>两个积性函数的狄利克雷卷积也是积性函数。</p>
<p>因此我们可以 $O(n)$ 计算出两个积性函数的狄利克雷卷积，只需要求出 $f(p^k)$，然后合并即可。</p>
<p>推论：积性函数的狄利克雷前缀和也是积性函数。</p>
<h2 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a>逆元</h2><p>一个数论函数的逆元为存在 $f^{-1}$ 满足 $f^{-1} * f&#x3D;\epsilon$。</p>
<p>当 $f(1)&#x3D;1$ 的时候，存在 $f^{-1}$，否则不存在。</p>
<p>可以倒推求解，就会发现 $f_1$ 作为了分母，所以证明显然。</p>
<p>因为 $\sum_{d \mid n}\mu(d)&#x3D;[n&#x3D;1]$，所以 $\mu$ 函数的逆元是 $\epsilon$。</p>
<p>若有 $F&#x3D;f * 1$，那么 $f &#x3D; F * \mu$，证明只需要两边乘上 $\mu$ 函数即可。</p>
<h2 id="关系式"><a href="#关系式" class="headerlink" title="关系式"></a>关系式</h2><p>$$<br>\mu \rightarrow^{*1} \varepsilon \rightarrow^{*1}1\rightarrow^{*1}d<br>$$</p>
<p>$$<br>\mu \leftarrow^{*\mu} \varepsilon \leftarrow^{*\mu}1\leftarrow^{*\mu}d<br>$$</p>
<p>$$<br>\varphi \rightarrow^{*1} \operatorname{Id} \rightarrow^{*1} \sigma<br>$$</p>
<p>$$<br>\varphi \leftarrow^{*\mu} \operatorname{Id} \leftarrow^{*\mu} \sigma<br>$$</p>
<h1 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h1><h2 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h2><p>莫比乌斯反演形式 1：<br>$$<br>F(n) &#x3D; \sum_{d \mid n}f(d) \\<br>f(n) &#x3D; \sum_{d \mid n}F(d)\mu(\frac nd)<br>$$<br>莫比乌斯反演形式 2（大部分推导公式）：<br>$$<br>\sum_{d \mid n}\mu(d)&#x3D;\varepsilon(n)&#x3D;[n&#x3D;1]<br>$$<br>莫比乌斯反演形式 3（狄利克雷后缀和的反演）：<br>$$<br>F(n) &#x3D; \sum_{n \mid d}f(d) \\<br>f(n) &#x3D; \sum_{n \mid d}F(d)\mu(\frac dn)<br>$$<br>莫比乌斯反演形式 4：<br>$$<br>F(n) &#x3D; \prod_{d \mid n}f(d) \\<br>f(n) &#x3D; \prod_{d \mid n}F(d)^{\mu(\frac nd)}<br>$$</p>
<h2 id="常见积性函数乘积展开"><a href="#常见积性函数乘积展开" class="headerlink" title="常见积性函数乘积展开"></a>常见积性函数乘积展开</h2><p>$$<br>\mu(ij)&#x3D;\mu(i)\mu(j)[\gcd(i,j)&#x3D;1] \\<br>\varphi(ij)&#x3D;\frac{\varphi(i)\varphi(j)\gcd(i,j)}{\varphi(\gcd(i,j))} \\<br>d(ij)&#x3D;\sum_{x \mid i}\sum_{y \mid j}[\gcd(x,y)&#x3D;1] \\<br>\sigma_k(ij)&#x3D;\sum_{x \mid i}\sum_{y \mid j}[\gcd(x,y)&#x3D;1](\frac {xj}{y})^k<br>$$</p>
<p>特别注意，当 $\gcd(i,j)&#x3D;1$ 的时候才有贡献的时候，可以默认 $\gcd(i,j)&#x3D;1$。</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p>$$<br>\sum_{i&#x3D;1}^n \sum_{j&#x3D;1}^m \gcd(i,j)^n \sum_{k&#x3D;1}^{ij}[(i,k)&#x3D;1][(j,k)&#x3D;1]k<br>$$</p>
<p>其中 $n,m \le 10^7$，求出上式的值。时间复杂度在 $O(n \log \log n)$ 以内。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>推公式时间！</p>
<p>注意：</p>
<p>$$<br>\mu \ * \ \operatorname{Id} &#x3D; \varphi<br>$$</p>
<p>特别地，当只有 $\gcd(i,j)&#x3D;1$ 的时候这个项有贡献的时候，我们在进行拆函数（$\varphi(ij)&#x3D;\frac{\varphi(i)\varphi(j)\gcd(i,j)}{\varphi(\gcd(i,j))}$）的时候可以默认 $\gcd(i,j)&#x3D;1$，而不需要考虑其它情况。</p>
<p>下面是正式内容（中间有些常数直接省略了）：</p>
<p>$$<br>\begin{aligned}<br>&amp; \ \ \ \ \ \sum_{i&#x3D;1}^n \sum_{j&#x3D;1}^m \gcd(i,j)^n \sum_{k&#x3D;1}^{ij} [(i,k)&#x3D;1][(j,k)&#x3D;1]k \\<br>&amp;&#x3D;\sum_{i&#x3D;1}^n \sum_{j&#x3D;1}^m \gcd(i,j)^n \sum_{k&#x3D;1}^{ij} [(k,ij)&#x3D;1]k \\<br>&amp;&#x3D;\sum_{i&#x3D;1}^n \sum_{j&#x3D;1}^m \gcd(i,j)^n \sum_{k&#x3D;1}^{ij} k \sum_{d \mid k,d \mid ij} \mu(d) \\<br>&amp;&#x3D;\sum_{i&#x3D;1}^n \sum_{j&#x3D;1}^m \gcd(i,j)^n \sum_{d \mid ij} \mu(d)d \sum_{k&#x3D;1}^{\frac {ij} d}k \\<br>&amp;&#x3D;\sum_{i&#x3D;1}^n \sum_{j&#x3D;1}^m \gcd(i,j)^n \sum_{d \mid ij}  \mu(d)\frac {(d+ij)\frac {ij} d}{2}\\<br>&amp;&#x3D;\sum_{i&#x3D;1}^n \sum_{j&#x3D;1}^m \gcd(i,j)^n ij\varphi(ij)\\<br>&amp;&#x3D; \sum_{d&#x3D;1}^{n} d^n \sum_{i&#x3D;1}^{\frac nd}\sum_{j&#x3D;1}^{\frac md}[\gcd(i,j)&#x3D;1]ijd^2\varphi(ijd^2) \\<br>&amp;&#x3D; \sum_{d&#x3D;1}^{n} d^n \sum_{i&#x3D;1}^{\frac nd}\sum_{j&#x3D;1}^{\frac md}[\gcd(i,j)&#x3D;1]ijd^2\frac{\varphi(id)\varphi(jd)d}{\varphi(d)} \\<br>&amp;&#x3D; \sum_{d&#x3D;1}^{n} \frac{d^{n+1}}{\varphi(d)} \sum_{i&#x3D;1}^{\frac nd}id\varphi(id)\sum_{j&#x3D;1}^{\frac md}[\gcd(i,j)&#x3D;1]jd\varphi(jd) \\<br>&amp;&#x3D; \sum_{d&#x3D;1}^{n} \frac{d^{n+1}}{\varphi(d)} \sum_{i&#x3D;1}^{\frac nd}id\varphi(id)\sum_{j&#x3D;1}^{\frac md}jd\varphi(jd) \sum_{k \mid i,k \mid j} \mu(k)\\<br>&amp;&#x3D; \sum_{1 \le k\le n} \mu(k) \sum_{d&#x3D;1}^{n} \frac{d^{n+1}}{\varphi(d)} \sum_{i&#x3D;1}^{\frac n{dk}}idk\varphi(idk)\sum_{j&#x3D;1}^{\frac m{dk}}jdk\varphi(jdk) \\<br>T \gets dk \\<br>&amp;&#x3D; \sum_{T&#x3D;1}^{n} \sum_{d \mid T} \mu(\frac Td )\frac{d^{n+1}}{\varphi(d)} \sum_{i&#x3D;1}^{\frac n{T}}iT\varphi(iT)\sum_{j&#x3D;1}^{\frac m{T}}jT\varphi(jT)<br>\end{aligned}<br>$$</p>
<p>$ f(T)&#x3D;\sum_{d \mid T} \mu(\frac Td )\frac{d^{n+1}}{\varphi(d)}$ 是一个积性函数和积性函数的狄利克雷卷积，所以仍然是积性函数，我们求出 $f(p^k)$，再用线性筛合并即可。</p>
<p>后面两堆是一个狄利克雷后缀和，时间复杂度为 $O(n+n \log \log n)&#x3D;O(n \log \log n)$​。</p>
<h1 id="二项式反演"><a href="#二项式反演" class="headerlink" title="二项式反演"></a>二项式反演</h1><p>两个公式在下面，记住基本上就会做题了：</p>
<p>$$<br>f(n)&#x3D; \sum_{i&#x3D;0}^n C_n^ig(i)\Leftrightarrow g(n)&#x3D;\sum_{i&#x3D;0}^n (-1)^{n-i}C_n^if(i)<br>$$</p>
<p>$$<br>f(n)&#x3D; \sum_{i&#x3D;n}^m C_i^n g(i)\Leftrightarrow g(n)&#x3D;\sum_{i&#x3D;n}^m (-1)^{i-n}C_i^nf(i)<br>$$</p>
<p>其中 $g(n)$ 是恰好 $n$ 个元素满足条件的方案数量，$f(n)$ 分别是至少&#x2F;至多（钦定）$n$ 个元素满足条件的方案数量。</p>
<p>也就是说，同一个 $f(n)$ 中有可能有两组一模一样的方案在里面，但是这两组中我们钦定的那 $n$ 个元素一定（不）满足条件在两组中是不一样的。</p>
<p>例题：集合计数，题面如下：</p>
<blockquote>
<p>一个有 $N$ 个元素的集合有 $2^N$ 个不同子集（包含空集），现在要在这 $2^N$ 个集合中取出若干集合（至少一个），使得它们的交集的元素个数为 $k$，求取法的方案数，答案模 $10^9+7$。</p>
</blockquote>
<p>首先考虑构造 $f(i)$ 满足交集的元素个数至少为 $i$（钦定了 $i$ 个），那么首先就有钦定 $i$ 个的方案数 $C_n^i$，然后剩下的集合我们随便选择，也就是乘上 $2^{2^{n-i}}$。</p>
<p>记得要减去空集合的方案 $1$。</p>
<p>最后通过第一种形式得到 $g(k)$ 就可以了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007 </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,k,jc[N],i,inv[N],g[N],ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>%p,t = a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res = res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">C</span><span class="params">(ll n,ll m)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> jc[n]*inv[m]%mod*inv[n-m]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	jc[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) jc[i]=jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">	inv[n]=<span class="built_in">qmi</span>(jc[n],mod<span class="number">-2</span>,mod);</span><br><span class="line">	<span class="keyword">for</span>(i=n;i&gt;=<span class="number">1</span>;i--) inv[i<span class="number">-1</span>]=inv[i]*i%mod;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n;i++) g[i]=<span class="built_in">C</span>(n,i)*(<span class="built_in">qmi</span>(<span class="number">2</span>,<span class="built_in">qmi</span>(<span class="number">2</span>,n-i,mod<span class="number">-1</span>),mod)<span class="number">-1</span>+mod)%mod;</span><br><span class="line">	<span class="keyword">for</span>(i=k;i&lt;=n;i++) ans=(ans+<span class="built_in">C</span>(i,k)*<span class="built_in">qmi</span>(mod<span class="number">-1</span>,i-k,mod)%mod*g[i]%mod)%mod;</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>数论</tag>
        <tag>莫比乌斯反演</tag>
        <tag>狄利克雷卷积</tag>
        <tag>积性函数</tag>
        <tag>二项式反演</tag>
      </tags>
  </entry>
  <entry>
    <title>数学学习笔记2</title>
    <url>/2024/01/07/%E6%95%B0%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<h1 id="阶"><a href="#阶" class="headerlink" title="阶"></a>阶</h1><p>定义整数 $a$ 如果存在一个正整数 $n$ 满足 $a^n \equiv 1 \pmod m$，那么最小的那个 $n$ 称作整数 $a$ 的阶，记作 $\operatorname{ord}_m(a)$ 或者 $\delta_m(a)$。</p>
<p>容易发现，根据欧拉定理若 $\gcd(a,m)&#x3D;1$ 那么 $a^{\varphi(m)} \equiv 1 \pmod m$。</p>
<h2 id="性质-1"><a href="#性质-1" class="headerlink" title="性质 1"></a>性质 1</h2><p>$a^1,a^2,a^3,\dots,a^{\delta_m(a)}$ 在模 $m$ 意义下两两不同余。</p>
<h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>若设 $a^i \equiv a^j \pmod m$，那么 $a_{j-i} \equiv 1 \pmod m$，因为 $1 \le i &lt; j \le  \delta_m(a)$，所以 $j-i &lt; \delta_m(a)$，与阶的定义相违背。</p>
<h2 id="性质-2"><a href="#性质-2" class="headerlink" title="性质 2"></a>性质 2</h2><p>若 $a^n \equiv 1 \pmod m$ 那么 $\delta_m(a) \mid n$。</p>
<h3 id="证明-1"><a href="#证明-1" class="headerlink" title="证明"></a>证明</h3><p>若设 $n&#x3D;p\delta_m(a)+q$，则 $0 \le q &lt; \delta_m(a)$，并且 $a^{p \delta_m(a)} \equiv 1 \pmod m$，所以 $a^q \equiv 1 \pmod m$，如果 $q \ge 1$，与阶的定义相违背，所以 $q&#x3D;0$，即 $\delta_m(a) \mid n$。</p>
<h3 id="推论"><a href="#推论" class="headerlink" title="推论"></a>推论</h3><p>若 $a^p \equiv a^q \pmod m$，那么 $p \equiv q \pmod {\delta_m(a)}$。</p>
<h2 id="性质-3"><a href="#性质-3" class="headerlink" title="性质 3"></a>性质 3</h2><p>若 $m \in N^*$，$a,b \in Z$，$\gcd(a,m)&#x3D;\gcd(b,m)&#x3D;1$，则：</p>
<p>$$<br>\delta_m(a)\delta_m(b)&#x3D;\delta_m(ab)<br>$$</p>
<p>的充要条件是 $\gcd(\delta_m(a),\delta_m(b))&#x3D;1$。</p>
<h3 id="证明-2"><a href="#证明-2" class="headerlink" title="证明"></a>证明</h3><h4 id="必要性"><a href="#必要性" class="headerlink" title="必要性"></a>必要性</h4><p>因为 $a^{\delta_m(a)} \equiv 1$，$b^{\delta_m(b)} \equiv 1$，所以 $(ab)^{[\delta_m(a),\delta_m(b)]} \equiv 1$。</p>
<p>那么根据性质 $2$ 可得  $\delta_m(ab) \mid [\delta_m(a),\delta_m(b)]$，所以 $\delta_m(a)\delta_m(b) \mid [\delta_m(a),\delta_m(b)]$，推出 $(\delta_m(a),\delta_m(b))&#x3D;1$。</p>
<h4 id="充分性"><a href="#充分性" class="headerlink" title="充分性"></a>充分性</h4><p>由 $(ab)^{\delta_m(ab)} \equiv 1$，那么 $(ab)^{\delta_m(ab)\delta_m(b)} \equiv a^{\delta_m(ab)\delta_m(b)}\equiv 1$。</p>
<p>所以 $\delta_m(a)\mid \delta_m(ab)\delta_m(b)$，因为 $\gcd(\delta_m(a),\delta_m(b))&#x3D;1$，所以 $\delta_m(a) \mid \delta_m(ab)$。</p>
<p>对称地，那么 $\delta_m(b) \mid \delta_m(ab)$。</p>
<p>所以 $\delta_m(a)\delta_m(b) \mid \delta_m(ab)$。</p>
<p>另一方面有：$(ab)^{\delta_m(a)\delta_m(b)}\equiv (a^{\delta_m(a)})^{\delta_m(b)} (b^{\delta_m(b)})^{\delta_m(a)} \equiv 1$。</p>
<p>所以 $\delta_m(ab) \mid \delta_m(a)\delta_m(b)$。</p>
<p>综上所述，有 $\delta_m(a)\delta_m(b)&#x3D;\delta_m(ab)$。</p>
<h2 id="性质-4"><a href="#性质-4" class="headerlink" title="性质 4"></a>性质 4</h2><p>对于合法的 $a,k,m$，有 $\delta_m(a^k)&#x3D;\dfrac{\delta_m(a)}{\gcd(\delta_m(a),k)}$。</p>
<h3 id="证明-3"><a href="#证明-3" class="headerlink" title="证明"></a>证明</h3><p>首先有 $a^{k\delta_m(a^k)} \equiv (a^k)^{\delta_m(a^k)} \equiv 1$，所以 $\delta_m(a) \mid k\delta_m(a^k)$，推得 $\dfrac{\delta_m(a)}{\gcd(\delta_m(a),k)} \mid \delta_m(a^k)$。</p>
<p>还有 $a^{\delta_m(a)} \equiv 1$，可得 $(a^k)^{\frac{\delta_m(a)}{\gcd(\delta_m(a),k)}} \equiv (a^{\delta_m(a)})^{\frac{k}{\gcd(k,\delta_m(a))}} \equiv 1$。</p>
<p>所以 $\delta_m(a^k) \mid \dfrac{\delta_m(a)}{\gcd(\delta_m(a),k)}$，综上所述，$\delta_m(a^k) &#x3D; \dfrac{\delta_m(a)}{\gcd(\delta_m(a),k)}$。</p>
<h2 id="阶的寻找"><a href="#阶的寻找" class="headerlink" title="阶的寻找"></a>阶的寻找</h2><p>如果 $\gcd(a,m) \not&#x3D;1$ 的话，说明 $a^k \not\equiv 1 \pmod m$，可以用 $a \equiv b \pmod m$ 与 $\dfrac{a}{\gcd(a,m)} \equiv \dfrac{b}{\gcd(a,m)} \pmod {\dfrac{m}{\gcd(a,m)}}$ 等价证明。</p>
<p>所以当 $\gcd(a,m)&#x3D;1$ 时 $a$ 才有阶，此时 $a^{\varphi(m)} \equiv 1$，根据欧拉定理及其推论可以得 $\delta_m(a) \mid \varphi(m)$。</p>
<p>于是我们对于 $\varphi(m)$ 分解质因数，然后依次除以每个质因数，再用快速幂判断是不是为 $1$ 就可以了，如果为 $1$ 就除一下，否则继续试除即可。</p>
<p>寻找阶的代码（没有用试除优化）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,i,j,p,q,l[<span class="number">200005</span>],tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>%p,t=a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n),q=n,p=n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>;i*i&lt;=q;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(q%i==<span class="number">0</span>)&#123;</span><br><span class="line">			p -= p/i;</span><br><span class="line">			<span class="keyword">while</span>(q%i==<span class="number">0</span>) q/=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(q&gt;<span class="number">1</span>) p-=p/q;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=p;i++) <span class="keyword">if</span>(p%i==<span class="number">0</span>) l[++tot]=i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(__gcd(i,n)!=<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;0 &quot;</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=tot;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">qmi</span>(i,l[j],n)==<span class="number">1</span>)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,l[j]);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(j&gt;tot) <span class="built_in">printf</span>(<span class="string">&quot;0 &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="原根"><a href="#原根" class="headerlink" title="原根"></a>原根</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>对于合法的 $g,m$，如果其满足 $\delta_m(g) &#x3D; \varphi(m)$，那么则称 $g$ 是模 $m$ 的原根。</p>
<p>容易发现，当 $m$ 为质数时对于任意 $0&lt;i&lt;m$ 的 $g_i \bmod m$ 互不相同。</p>
<h2 id="判定"><a href="#判定" class="headerlink" title="判定"></a>判定</h2><p>若 $g$ 是模 $m$ 的原根，首先满足 $\gcd(g,m)&#x3D;1$（欧拉定理），然后对于 $m$ 的每个质因数 $t$ 都要满足 $g^{\frac{m}{t}} \not\equiv 1$。</p>
<p>证明显然，此处不展开叙述。</p>
<h2 id="个数"><a href="#个数" class="headerlink" title="个数"></a>个数</h2><p>如果一个数 $m$ 有原根，那么它的个数是 $\varphi(\varphi(m))$。</p>
<h3 id="证明-4"><a href="#证明-4" class="headerlink" title="证明"></a>证明</h3><p>设 $g$ 是 $m$ 的任意一个原根，则有：</p>
<p>$$<br>\delta_m(g^k)&#x3D;\dfrac{\delta_m(g)}{\gcd(\delta_m(g),k)}<br>$$</p>
<p>所以当 $\gcd(\delta_m(g),k)&#x3D;1$ 时，$\delta_m(g^k)&#x3D;\varphi(m)$，因为 $\delta_m(g)&#x3D;\varphi(m)$，所以个数是 $\varphi(\varphi(m))$。</p>
<h2 id="原根存在定理"><a href="#原根存在定理" class="headerlink" title="原根存在定理"></a>原根存在定理</h2><p>一个数 $m$ 存在原根当且仅当它等于 $2$ 或 $4$ 或 $p^k$ 或 $2p^k$。</p>
<p>证明略。</p>
<h2 id="最小原根范围"><a href="#最小原根范围" class="headerlink" title="最小原根范围"></a>最小原根范围</h2><p>可证 $g$ 大概在 $m^{\frac{1}{4}}$ 左右，所以暴力找原根的时间复杂度是可以接受的。</p>
<p>寻找原根的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,i,j,k,p,q,l[N],tot,ans[N],id,gcd[N],pri[N],ttt,vis[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>%p,t=a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n),q=n,p=n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">			pri[++ttt]=i;</span><br><span class="line">			<span class="keyword">if</span>(n%i==<span class="number">0</span>) gcd[i]=i;</span><br><span class="line">			<span class="keyword">else</span> gcd[i]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=ttt;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(pri[j]*i&gt;n) <span class="keyword">break</span>;</span><br><span class="line">			vis[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line">			gcd[i*pri[j]]=gcd[i]*gcd[pri[j]];</span><br><span class="line">			<span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>;i*i&lt;=q;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(q%i==<span class="number">0</span>)&#123;</span><br><span class="line">			p -= p/i;</span><br><span class="line">			<span class="keyword">while</span>(q%i==<span class="number">0</span>) q/=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(q&gt;<span class="number">1</span>) p-=p/q;</span><br><span class="line">	q=p;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>;i*i&lt;=q;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(q%i==<span class="number">0</span>)&#123;</span><br><span class="line">			l[++tot] = p/i;</span><br><span class="line">			<span class="keyword">while</span>(q%i==<span class="number">0</span>) q/=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(q&gt;<span class="number">1</span>) l[++tot] = p/q;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(gcd[i]!=<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=tot;j++) <span class="keyword">if</span>(<span class="built_in">qmi</span>(i,l[j],n)==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span>(j&gt;tot)&#123;</span><br><span class="line">			<span class="keyword">for</span>(j=i,k=<span class="number">1</span>;k&lt;=p;j=j*i%n,k++) <span class="keyword">if</span>(__gcd(k,p)==<span class="number">1</span>) ans[++id]=j;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(ans+<span class="number">1</span>,ans+id+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,id);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=id;i++) <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="BSGS-算法"><a href="#BSGS-算法" class="headerlink" title="BSGS 算法"></a>BSGS 算法</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>已知 $a,b,p$，求最小的 $t$ 满足下列公式：</p>
<p>$$<br>a^t \equiv b \pmod{p}<br>$$</p>
<p>普通的 BSGS 算法能够在 $\gcd(a,p)$ 互质时以 $O(\sqrt{p})$ 的时间复杂度内得出答案。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>核心思想是根号分治。</p>
<p>设 $r &#x3D; \lceil{\sqrt{t}}\rceil$，则 $t&#x3D;rk+q(0 \leq q &lt; r)$。</p>
<p>写到式子上就是：</p>
<p>$$<br>a^{rk+q} \equiv b \pmod{p}<br>$$</p>
<p>因为 $a$ 有模 $p$ 意义下的逆元，我们可以将式子转化为下面的形式：</p>
<p>$$<br>a^{rk} \equiv b \times a^{-q} \pmod{p}<br>$$</p>
<p>注意到左边有不超过根号种取值，右边也有不超过根号种取值，于是预处理两边中的任意一边即可，剩下的那边暴力枚举就好。</p>
<p>时间复杂度看你存储一边的时候使用的数据结构，如果是 $\text{map}$，时间复杂度多一个 $\log$；如果是 $\text{unordered_map}$，时间复杂度多一个常数。（模运算具有较大的随机性）</p>
<p>除此之外，我们也可以写成 $a^t&#x3D;a^{kr-q}$ 的形式，代码就是采用的这种结构，但是边界情况一定要判断好。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll p,a,b,t,i,j,cnt,ans=<span class="number">-1</span>;</span><br><span class="line">map&lt;ll,ll&gt; op;</span><br><span class="line"><span class="function">ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>%p,t = a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;p&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    t = <span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(p*<span class="number">1.0</span>));</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;t;j++) op[<span class="function">b*<span class="title">qmi</span><span class="params">(a,j,p)</span>%p] </span>= j;</span><br><span class="line">    a = <span class="built_in">qmi</span>(a,t,p);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=t;i++)&#123;</span><br><span class="line">		cnt = <span class="built_in">qmi</span>(a,i,p);</span><br><span class="line">		<span class="keyword">if</span>(op.<span class="built_in">find</span>(cnt)!=op.<span class="built_in">end</span>()) ans=op[cnt];</span><br><span class="line">		<span class="keyword">else</span> ans=<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">if</span>(ans&gt;=<span class="number">0</span>&amp;&amp;i*t-ans&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">			cout&lt;&lt;i*t-ans&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;no solution&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="广义-BSGS"><a href="#广义-BSGS" class="headerlink" title="广义 BSGS"></a>广义 BSGS</h2><p>如果定义一种运算 $p \times q &#x3D; k$，并且对于 $a$ 存在某个结构 $a^{-1}$ 使得 $a \times a^{-1}&#x3D;e$，$e$ 是这种运算的单位元，那么都可以采用 BSGS 求解。</p>
<p>比如矩阵就可以采用 BSGS 求解，即把上述运算全部改成矩阵的乘法、快速幂即可，时间复杂度为 $O(\sqrt{p}) \times k$，$k$ 是执行一次我们定义的运算的时间复杂度。</p>
<h1 id="Millar-Rabin"><a href="#Millar-Rabin" class="headerlink" title="Millar-Rabin"></a>Millar-Rabin</h1><p>判定素数经常被认为是一个 NP 问题，但是实际上有确定性多项式算法解决这个问题，但是它在算法竞赛中并不常用，而 Millar-Rabin 是一个非确定性的算法来解决素数判定问题。</p>
<p>时间复杂度为执行判定的次数乘上 $\log n$。</p>
<h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>有费马小定理当 $p$ 是质数的时候 $a^{p-1} \equiv 1 \pmod p(1 \le a &lt; p)$，但是反过来是否如此呢？</p>
<p>事实上反过来会有一种数满足它仍然成立但是不是质数（$a$ 不整除它），这种数称作 Carmichael 数，例如 $561&#x3D;3 \times 11 \times 17$ 就是 Carmichael 数。</p>
<p>Carmichael 数一定有超过三个不同的质因子，并且不包含平方因子。</p>
<p>于是根据这点，我们得到了一个最简单的判定方法，称作 Fermat 素性测试，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">millerRabin</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">3</span>) <span class="keyword">return</span> n == <span class="number">2</span>;</span><br><span class="line">  <span class="comment">// test_time 为测试次数,建议设为不小于 8</span></span><br><span class="line">  <span class="comment">// 的整数以保证正确率,但也不宜过大,否则会影响效率</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= test_time; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="built_in">rand</span>() % (n - <span class="number">2</span>) + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">quickPow</span>(a, n - <span class="number">1</span>, n) != <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是我们这个测试无法确定 Carmichael 数的素性，于是我们引进了二次探测定理。</p>
<p>若 $p$ 是质数，则满足 $x^2 \equiv 1 \pmod p$ 的 $x$ 只可能等于 $1$ 或 $p-1$。</p>
<p>我们可以分解一下 $(x-1)(x+1) \equiv 0 \pmod p$，因为 $p$ 是质数，所以 $x-1$ 或者 $x+1$ 等于 $p$。</p>
<p>那么也有数可以通过二次探测定理的逆命题，但是这些数一定是 $p^k$，与 Carmichael 没有交集，故我们可以根据这两个定理设计素数判定的方案。</p>
<h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><p>将 $a^{n-1} \equiv 1 \pmod n$ 中的指数 $n-1$ 分解为 $n-1&#x3D;u \times 2^t$，在每轮测试中对随机出来的 $a$ 先求出 $v &#x3D; a^{u} \bmod n$，之后对这个值执行最多 $t$ 次平方操作，若发现非平凡平方根时即可判断出其不是素数，否则再使用 Fermat 素性测试判断。</p>
<p>有一个问题，就是如果 $v$ 在进入循环之前就等于 $1$ 了，那就直接跳过即可，如果 $t$ 次平方操作之后结果仍然不为 $1$（数字不为 $n-1$），那就返回不是素数即可。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">2</span>||x%<span class="number">2</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	ll u = n<span class="number">-1</span>,now = <span class="number">1</span>,temp = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(u%<span class="number">2</span>==<span class="number">0</span>) now*=<span class="number">2</span>,u/=<span class="number">2</span>,temp++;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)&#123;</span><br><span class="line">		ll cnt = (<span class="built_in">rnd</span>()%<span class="number">1000000000</span>+<span class="number">1</span>)*(<span class="built_in">rnd</span>()%<span class="number">1000000000</span>+<span class="number">1</span>)%(x<span class="number">-2</span>)+<span class="number">2</span>;</span><br><span class="line">		cnt = <span class="built_in">qmi</span>(cnt,u,x);</span><br><span class="line">		<span class="keyword">if</span>(cnt==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;=temp;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(cnt==x<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">			cnt = (__int128)cnt*cnt%x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(cnt!=x<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>选择的数字看判断素数的范围，如果是 <code>int</code> 类型，那么取判定的底数 $a&#x3D;2,7,61$ 即可；否则取 $a$ 为前 $12$ 个质数即可。</p>
<h1 id="Pollard-Rho"><a href="#Pollard-Rho" class="headerlink" title="Pollard-Rho"></a>Pollard-Rho</h1><p>给定一个正整数 $N \in \mathbf{N}_{+}$，试快速找到它的一个非平凡因数。</p>
<p>首先，有一个悖论称作“生日悖论”，如果一年有 $365$ 天，那么一个班如果有至少 $23$ 个人，那么有两个人生日相同的概率将达到 $50%$，如果有至少 $56$ 个人，概率近乎 $100%$。</p>
<p>我们还可以通过最大公因数来找出某个数的非平凡因子，即如果 $\gcd(k,n)&gt;1$，那么 $\gcd(k,n)$ 一定是大于 $1$ 的 $n$ 的因子。</p>
<p>我们考虑一个启发式伪随机 $f(x)&#x3D;(x^2+c)\bmod n$ 来生成一个序列 $x_i$：随机取一个 $x_1$，令 $x_2&#x3D;f(x_1),x_3&#x3D;f(x_2),\cdots,x_i&#x3D;f(x_{i-1})$。其中 $c$ 是一个随机选取的常数。</p>
<p>因为这个序列生成的数列是一个 rho 形态的，就是一个环上面掉了一个链，所以成为 Pollard-Rho。</p>
<p>这个函数生成序列还有一个性质，如果 $x \equiv y \pmod p$，那么 $f(x) \equiv f(y) \pmod p$。</p>
<p>证明显然。</p>
<p>那么根据生日悖论，我们可以在这个环上任取两个数使得这两个数的差的 $n$ 的最大公因数大于 $1$，我们就可以找出来一个因数，这样的时间复杂度就是 $O(n^{\frac{1}{4}})$。</p>
<p>我们就可以设置两个指针，一个走慢一点，一个走快一点，大概是一倍的速度差，然后判断这两个指针的差值即可。</p>
<p>同时因为 $\gcd(a,n)&gt;1$，那么 $\gcd(ac,n)&gt;1$，我们可以通过倍增计算，即每隔 $2^k-1$ 个数，计算两个指针的差值，如果两个指针相等了，那么说明它们处在同一个位置，重新执行即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">pollard_rho</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	ll s=<span class="number">0</span>,t=<span class="number">0</span>,c=(<span class="built_in">rnd</span>()%<span class="number">1000000000</span>+<span class="number">1</span>)*(<span class="built_in">rnd</span>()%<span class="number">1000000000</span>+<span class="number">1</span>)%(x<span class="number">-1</span>)+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>,val=<span class="number">1</span>;;i*=<span class="number">2</span>,s=t,val=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">			t=((__int128)t*t+c)%x;</span><br><span class="line">			val=(__int128)val*(ll)(<span class="built_in">abs</span>(s-t))%x;</span><br><span class="line">			<span class="keyword">if</span>(!val) <span class="keyword">return</span> x;</span><br><span class="line">			<span class="keyword">if</span>(j%<span class="number">127</span>==<span class="number">0</span>)&#123;</span><br><span class="line">				ll temp = __gcd(val,x);</span><br><span class="line">				<span class="keyword">if</span>(temp&gt;<span class="number">1</span>) <span class="keyword">return</span> temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ll temp = __gcd(val,x);</span><br><span class="line">		<span class="keyword">if</span>(temp&gt;<span class="number">1</span>) <span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">found</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">check</span>(x))&#123;</span><br><span class="line">		d[++tot] = x;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	ll temp = x;</span><br><span class="line">	<span class="keyword">while</span>(temp&gt;=x) temp=<span class="built_in">pollard_rho</span>(x);</span><br><span class="line">	<span class="built_in">found</span>(x/temp),<span class="built_in">found</span>(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总的时间复杂度是小常 $\log$ 乘上 $n^{\frac{1}{4}}$。</p>
<h1 id="MIN-25-筛"><a href="#MIN-25-筛" class="headerlink" title="MIN_25 筛"></a>MIN_25 筛</h1><h2 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h2><p>给定 $n$，求 $\pi(n)$，$n \le 10^{11}$。</p>
<p>我们考虑埃氏筛法，那么每一轮枚举 $1 \sim n$ 的质数，但是事实上只需要枚举 $1 \le \sqrt{n}$ 的质数就可以了，因为一个数是合数的话其最小质因子 $\le \sqrt{n}$。</p>
<p>所以对于每一轮枚举完之后剩下没有被标记的数有 $g(n,k)$ 个，$n$ 是值域，$k$ 是枚举完的轮数，设 $p_k$ 是从小到大第 $k$ 个质数，则有下面的公式：</p>
<p>$$<br>g(n,k)&#x3D;g(n,k-1)-g(\lfloor \dfrac{n}{p_k} \rfloor,k-1)+k-1<br>$$</p>
<p>考虑意义，首先我们考虑 $k$ 这一轮筛掉了多少数字，设它们分别为 $a_1,a_2,a_3,\dots,a_m$，那么它们的最小质因子等于 $p_k$，则让它们除以 $p_k$ 之后得到 $\dfrac{a_1}{p_k},\dfrac{a_2}{p_k},\dfrac{a_3}{p_k},\dots,\dfrac{a_m}{p_k}$，这个时候它们的最小质因子大于等于 $p_k$，则这些数的个数是 $g(\lfloor \dfrac{n}{p_k} \rfloor,k-1)-(k-1)$，为什么要减 $k-1$ 呢，是因为这一坨同时算上了质数 $2,3,5,7,\dots$，为了去除多算的，就要减去 $k$ 之前的质数个数 $k-1$ 个。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,K,i,j,r,pri[N],vis[N],tot,f1[N],f2[N],used[N],used_inv[N],utot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">found</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=K) <span class="keyword">return</span> f1[x];</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> f2[n/x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	K=<span class="built_in">sqrt</span>(n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=K;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[i]) pri[++tot] = i;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=tot;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i*pri[j]&gt;K) <span class="keyword">break</span>;</span><br><span class="line">			vis[i*pri[j]] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;)&#123;</span><br><span class="line">		r = n/(n/i);</span><br><span class="line">		<span class="keyword">if</span>(n/i&gt;<span class="number">1</span>) used[++utot] = n/i;</span><br><span class="line">		i = r+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">reverse</span>(used+<span class="number">1</span>,used+utot+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=utot;j++)&#123;</span><br><span class="line">		used_inv[j] = n/used[j];       <span class="comment">//过多用除法会导致常数爆炸</span></span><br><span class="line">		<span class="keyword">if</span>(used[j]&lt;=K) f1[used[j]]=used[j]<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">else</span> f2[used_inv[j]]=used[j]<span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>,r=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=utot;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(used[j]&lt;pri[i]*pri[i]) <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span>(used[j]&lt;=K) f1[used[j]]=f1[used[j]]-<span class="built_in">found</span>(used[j]/pri[i])+i<span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">else</span> f2[used_inv[j]]=f2[used_inv[j]]-<span class="built_in">found</span>(used[j]/pri[i])+i<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;f2[<span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Input:</span></span><br><span class="line"><span class="comment">10000000000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">455052511</span></span><br><span class="line"><span class="comment">f(pk,n)=f(pk-1,n)-f(pk-1,n/pk)+k-1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>时间复杂度证明此处就不说了，但是总的时间复杂度大概是 $O(\dfrac{n^{\frac{3}{4}}}{\ln n})$。</p>
<p>特别的，如果是求 $1 \sim n$ 中质数的和，把公式改为下面即可（其实就是动态规划）：</p>
<p>$$<br>f(n,k)&#x3D;f(n,k-1)-p_k \times f(\lfloor \dfrac{n}{p_k} \rfloor,k-1)+\sum_{i&#x3D;1}^{k-1} p_i \times p_k<br>$$</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>数论</tag>
        <tag>阶</tag>
        <tag>原根</tag>
        <tag>Millar-Rabin</tag>
        <tag>Pollard-Rho</tag>
        <tag>BSGS</tag>
        <tag>Min-25 筛</tag>
      </tags>
  </entry>
  <entry>
    <title>类欧几里得算法</title>
    <url>/2024/01/26/%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="类欧几里得算法"><a href="#类欧几里得算法" class="headerlink" title="类欧几里得算法"></a>类欧几里得算法</h1><p>本题以 <a href="https://www.luogu.com.cn/problem/P5170">P5170 【模板】类欧几里得算法</a> 为例，深入讲解类欧几里得算法的本质。</p>
<h2 id="普通类欧几里得算法"><a href="#普通类欧几里得算法" class="headerlink" title="普通类欧几里得算法"></a>普通类欧几里得算法</h2><p>首先，设 $f(n,a,b,c)&#x3D;\sum_{i&#x3D;0}^n \lfloor \frac {ai+b}{c} \rfloor$，我们想在 $\log$ 时间范围内求出这个函数的值。</p>
<p>首先考虑把 $a \ge c$ 或者 $b \ge c$ 的情况规约到 $a&lt;c$ 并且 $b&lt;c$ 的情况，容易发现，如果 $a&gt;c$，式子可以化成这样：<br>$$<br>\sum_{i&#x3D;0}^n \lfloor \frac {(a \bmod c)i+b}{c} \rfloor + \sum_{i&#x3D;0}^n \lfloor \frac ac \rfloor i<br>$$<br>后面的一堆可以用等差数列的求和公式计算，如果 $b&gt;c$，式子可以化成这样：<br>$$<br>\sum_{i&#x3D;0}^n \lfloor \frac {ai+b \bmod c}{c} \rfloor+\sum_{i&#x3D;0}^n \lfloor \frac bc \rfloor<br>$$<br>后面一堆可以直接计算，于是我们只需要考虑 $a&lt;c$ 并且 $b&lt;c$ 的情况。</p>
<p>我们来推一下式子：<br>$$<br>\begin{aligned}<br>&amp; \ \ \ \ \ \sum_{i&#x3D;0}^n \lfloor \frac {ai+b}{c} \rfloor \\<br>&amp;&#x3D;\sum_{i&#x3D;0}^n \sum_{j&#x3D;0}^{\lfloor \frac {ai+b}{c} \rfloor-1}1 \\<br>&amp;&#x3D; \sum_{j&#x3D;0}^{\lfloor \frac {an+b}{c}\rfloor-1} \sum_{i&#x3D;0}^n [j&lt;\lfloor \frac {ai+b}{c} \rfloor]<br>\end{aligned}<br>$$</p>
<p>再设 $m&#x3D;\frac {an+b}{c}$，则原式变为 $\sum_{j&#x3D;0}^{m-1} \sum_{i&#x3D;0}^n [j&lt;\lfloor \frac {ai+b}{c} \rfloor]$。</p>
<p>考虑对艾佛森括号内的式子进行变换，因为两边都是整数，所以可以写成 $[j+1 \le \lfloor \frac {ai+b}{c} \rfloor]$，又因为 $c$ 一定是正整数，根据带余除法，设 $ai+b&#x3D;kc+q(0 \le q&lt;c)$，则 $\lfloor \frac {ai+b}{c} \rfloor&#x3D;k$，所以两边乘 $c$ 是没有问题的，即 $[cj+c \le ai+b]$，就相当于若 $j+1 \le k$，则此式子一定成立，否则此式子一定不成立。</p>
<p>这时我们继续变换之后下取整得到 $cj+c \le ai+b \rightarrow cj+c-b \le ai \rightarrow cj+c-b-1&lt;ai \rightarrow \lfloor\frac {cj+c-b-1}{a}\rfloor&lt;i$。</p>
<p>代回原式，得 $\sum_{j&#x3D;0}^{m-1} \sum_{i&#x3D;0}^n [\lfloor \frac {cj+c-b-1}{a}\rfloor&lt;i]$，这个函数后面一个 $\sum$ 的值我们可以简单地计算得出，所以原式变为：<br>$$<br>\sum_{j&#x3D;0}^{m-1} n-\lfloor \frac {cj+c-b-1}{a} \rfloor&#x3D;nm-\sum_{j&#x3D;0}^{m-1} \lfloor \frac {cj+c-b-1}{a} \rfloor<br>$$<br>于是我们可以把函数写成一个常数加上另外一个函数的和，如下：<br>$$<br>f(n,a,b,c)&#x3D;nm-f(m-1,c,c-b-1,a)<br>$$<br>因为每次我们都会让 $a \gets a \bmod c$，所以这个函数的计算是 $\log$ 级别的，时间复杂度分析很像欧几里得算法，故称为类欧几里得算法。</p>
<p>边界条件：$a&#x3D;0$ 的时候函数等于 $\sum_{i&#x3D;0}^n \lfloor \frac bc \rfloor$，直接计算即可，这个部分代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll T,n,a,b,c,inv;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll n,ll a,ll b,ll c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a==<span class="number">0</span>) <span class="keyword">return</span> (b/c)*(n+<span class="number">1</span>)%mod;</span><br><span class="line">	<span class="keyword">if</span>(a&gt;=c||b&gt;=c) <span class="keyword">return</span> (<span class="built_in">solve</span>(n,a%c,b%c,c)+(a/c)*n%mod*(n+<span class="number">1</span>)%mod*inv%mod+(b/c)*(n+<span class="number">1</span>)%mod)%mod;</span><br><span class="line">	ll m = (a*n+b)/c;</span><br><span class="line">	<span class="keyword">return</span> (n*m%mod-<span class="built_in">solve</span>(m<span class="number">-1</span>,c,c-b<span class="number">-1</span>,a)+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	inv = (mod+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;T;</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		cin&gt;&gt;n&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">		cout&lt;&lt;<span class="built_in">solve</span>(n,a,b,c)&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="平方类欧几里得算法"><a href="#平方类欧几里得算法" class="headerlink" title="平方类欧几里得算法"></a>平方类欧几里得算法</h2><p>设 $h(n,a,b,c)&#x3D;\sum_{i&#x3D;0}^n {\lfloor \frac {ai+b}{c} \rfloor}^2$，我们仍然需要在 $\log$ 时间范围内求出这个式子的值。</p>
<p>首先像普通类欧那样让 $a,b \gets a \bmod c,b \bmod c$。</p>
<p>考虑化一下，设 $a&#x3D;pc+p’(0\le p’&lt;c),b&#x3D;qc+q’(0 \le q’ &lt; c)$，则：<br>$$<br>\begin{aligned}<br>h(n,a,b,c)&amp;&#x3D;\sum_{i&#x3D;0}^n {\lfloor \frac {ai+b}{c} \rfloor}^2 \\<br>&amp;&#x3D;\sum_{i&#x3D;0}^n {(\lfloor \frac {p’i+q’}{c} \rfloor+pi+q)}^2 \\<br>&amp;&#x3D;\sum_{i&#x3D;0}^n {\lfloor \frac {p’i+q’}{c} \rfloor}^2+\sum_{i&#x3D;0}^n p^2i^2+\sum_{i&#x3D;0}^n q^2+2\sum_{i&#x3D;0}^n pqi+2p\sum_{i&#x3D;0}^n i\lfloor \frac{p’i+q’}{c} \rfloor+2q\sum_{i&#x3D;0}^n \lfloor \frac{p’i+q’}{c} \rfloor<br>\end{aligned}<br>$$<br>其中第五个项是等会要讲的带权类欧几里得算法，暂且设 $g(n,a,b,c)&#x3D;\sum_{i&#x3D;0}^n i\lfloor \frac {ai+b}{c} \rfloor$，则原式变为：<br>$$<br>h(n,a,b,c)&#x3D;h(n,p’,q’,c)+2qf(n,p’,q’,c)+2pg(n,p’,q’,c)+p^2\frac {n(n+1)(2n+1)}{6}+q^2(n+1)+pqn(n+1)<br>$$<br>接下来我们只需要计算 $h(n,p’,q’,c)$ 的值，因为 $p’,q’&lt;c$，我们可以继续推导。<br>$$<br>h(n,a,b,c)&#x3D;\sum_{i&#x3D;0}^n {\lfloor \frac {ai+b}{c} \rfloor}^2<br>$$<br>首先 $t^2&#x3D;2 \times \frac {t(t+1)}{2}-t$，所以：<br>$$<br>h(n,a,b,c)&#x3D;\sum_{i&#x3D;0}^n (2\sum_{j&#x3D;1}^{\lfloor \frac {ai+b}{c} \rfloor}j-\lfloor \frac {ai+b}{c} \rfloor)&#x3D;2\sum_{i&#x3D;0}^n \sum_{j&#x3D;1}^{\lfloor \frac {ai+b}{c} \rfloor} j-f(n,a,b,c)<br>$$<br>后面可以直接计算，看前面的：<br>$$<br>\begin{aligned}<br>\sum_{i&#x3D;0}^n \sum_{j&#x3D;1}^{\lfloor \frac {ai+b}{c} \rfloor} j &amp;&#x3D; \sum_{j&#x3D;0}^{m-1} (j+1)\sum_{i&#x3D;0}^n {[j&lt; \lfloor \frac {ai+b}{c} \rfloor]} \\<br>&amp;&#x3D; \sum_{j&#x3D;0}^{m-1} (j+1) \sum_{i&#x3D;0}^n [\lfloor \frac {cj+c-b-1}{a} \rfloor &lt;i] \\<br>&amp;&#x3D; \sum_{j&#x3D;0}^{m-1} (j+1)(n-\lfloor \frac {cj+c-b-1}{a} \rfloor) \\<br>&amp;&#x3D; nm+n \frac {m(m-1)}{2}-f(m-1,c,c-b-1,a)-g(m-1,c,c-b-1,a)<br>\end{aligned}<br>$$<br>带回原式，得：<br>$$<br>h(n,a,b,c)&#x3D;nm(m+1)-2f(m-1,c,c-b-1,a)-2g(m-1,c,c-b-1,a)-f(n,a,b,c)<br>$$</p>
<h2 id="带权类欧几里得算法"><a href="#带权类欧几里得算法" class="headerlink" title="带权类欧几里得算法"></a>带权类欧几里得算法</h2><p>在 $\log$ 时间复杂度内求解 $g(n,a,b,c)&#x3D;\sum_{i&#x3D;0}^n i \lfloor \frac {ai+b}{c} \rfloor$。</p>
<p>先化掉 $a \ge c,b \ge c$ 的情况，设 $a&#x3D;pc+p’,b&#x3D;qc+q’(0 \le p’,q’&lt;c)$，则：<br>$$<br>\sum_{i&#x3D;0}^n i\lfloor \frac {ai+b}{c} \rfloor&#x3D; \sum_{i&#x3D;0}^n i(\lfloor \frac {p’i+q’}{c} \rfloor+pi+q)&#x3D;\sum_{i&#x3D;0}^n i \lfloor \frac {p’i+q’}{c} \rfloor+\sum_{i&#x3D;0}^n pi^2+\sum_{i&#x3D;0}^n qi<br>$$<br>后面两个和式可以 $O(1)$ 计算。</p>
<p>设 $m&#x3D;\lfloor \frac {an+b}{c} \rfloor$，还是化一下式子：<br>$$<br>\begin{aligned}<br>\sum_{i&#x3D;0}^n i \lfloor \frac {ai+b}{c} \rfloor &amp;&#x3D; \sum_{i&#x3D;0}^n i\sum_{j&#x3D;0}^{\lfloor \frac {ai+b}{c} \rfloor-1} 1 \\<br>&amp;&#x3D; \sum_{j&#x3D;0}^{m-1} \sum_{i&#x3D;0}^n i[j&lt;\lfloor \frac {ai+b}{c} \rfloor]<br>\end{aligned}<br>$$<br>采用之前的方法，化掉艾佛森括号：<br>$$<br>\begin{aligned}<br>\sum_{j&#x3D;0}^{m-1} \sum_{i&#x3D;0}^n i[j&lt;\lfloor \frac {ai+b}{c} \rfloor] &amp;&#x3D; \sum_{j&#x3D;0}^{m-1} \sum_{i&#x3D;0}^n i[\lfloor \frac {cj+c-b-1}{a} \rfloor&lt;i] \\<br>t \gets \lfloor \frac {cj+c-b-1}{a} \rfloor \\<br>&amp;&#x3D; \sum_{j&#x3D;0}^{m-1} \frac {(t+1+n)(n-t)}{2} \\<br>&amp;&#x3D; \frac 12(\sum_{j&#x3D;0}^{m-1}(n^2+n)-\sum_{j&#x3D;0}^{m-1} (t^2+t)) \\<br>&amp;&#x3D; \frac 12 ((n^2+n)m-\sum_{j&#x3D;0}^{m-1} t^2-\sum_{j&#x3D;0}^{m-1}t)<br>\end{aligned}<br>$$<br>因此，和式都可以递归进行计算，于是：<br>$$<br>g(n,a,b,c)&#x3D;\frac 12(n(n+1)m-h(m-1,c,c-b-1,a)-f(m-1,c,c-b-1,a))<br>$$</p>
<h2 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h2><p>单个函数计算显然会超时，于是我们考虑用一个结构体存下 $n,a,b,c$ 对应的 $f,g,h$ 值，这样就可以在 $\log$ 时间内快速计算三个函数的值了，代码中的 $h$ 和 $g$ 函数交换了含义，读的时候要注意一下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;ll f,g,h;&#125;;</span><br><span class="line">ll T,n,a,b,c,inv2,inv6;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>%p,t=a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">solve</span><span class="params">(ll n,ll a,ll b,ll c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a==<span class="number">0</span>) <span class="keyword">return</span> (node)&#123;(b/c)*(n+<span class="number">1</span>)%mod,(b/c)%mod*(b/c)%mod*(n+<span class="number">1</span>)%mod,(b/c)*n%mod*(n+<span class="number">1</span>)%mod*inv2%mod&#125;;</span><br><span class="line">	<span class="keyword">if</span>(a&gt;=c||b&gt;=c)&#123;</span><br><span class="line">		node temp = <span class="built_in">solve</span>(n,a%c,b%c,c);</span><br><span class="line">		temp.g = (temp.g+<span class="number">2</span>*(b/c)%mod*temp.f%mod+<span class="number">2</span>*(a/c)%mod*temp.h%mod+(a/c)%mod*(a/c)%mod*n%mod*(n+<span class="number">1</span>)%mod*(<span class="number">2</span>*n+<span class="number">1</span>)%mod*inv6%mod+(b/c)*(b/c)%mod*(n+<span class="number">1</span>)%mod+(a/c)*(b/c)%mod*n%mod*(n+<span class="number">1</span>)%mod)%mod;</span><br><span class="line">		temp.h = (temp.h+(a/c)*n%mod*(n+<span class="number">1</span>)%mod*(<span class="number">2</span>*n+<span class="number">1</span>)%mod*inv6%mod+(b/c)*n%mod*(n+<span class="number">1</span>)%mod*inv2%mod)%mod;</span><br><span class="line">		temp.f = (temp.f+(a/c)*n%mod*(n+<span class="number">1</span>)%mod*inv2%mod+(b/c)*(n+<span class="number">1</span>)%mod)%mod;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line">	ll m = (a*n+b)/c;</span><br><span class="line">	node temp = <span class="built_in">solve</span>(m<span class="number">-1</span>,c,c-b<span class="number">-1</span>,a),ans;</span><br><span class="line">	ans.h = ((n*m%mod*(n+<span class="number">1</span>)%mod-temp.g-temp.f)*inv2%mod+mod)%mod;</span><br><span class="line">	ans.f = (n*m%mod-temp.f+mod)%mod;</span><br><span class="line">	ans.g = ((n*m%mod*(m+<span class="number">1</span>)%mod<span class="number">-2</span>*temp.h%mod<span class="number">-2</span>*temp.f%mod-ans.f)%mod+mod)%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	inv2 = <span class="built_in">qmi</span>(<span class="number">2</span>,mod<span class="number">-2</span>,mod),inv6 = <span class="built_in">qmi</span>(<span class="number">6</span>,mod<span class="number">-2</span>,mod);</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;T;</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		cin&gt;&gt;n&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">		node ans = <span class="built_in">solve</span>(n,a,b,c);</span><br><span class="line">		cout&lt;&lt;ans.f&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans.g&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans.h&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h1 id="万能欧几里得算法"><a href="#万能欧几里得算法" class="headerlink" title="万能欧几里得算法"></a>万能欧几里得算法</h1><p>待补。</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>欧几里得算法</tag>
        <tag>类欧几里得算法</tag>
        <tag>万能欧几里得算法</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数里的数据结构——线性基</title>
    <url>/2024/01/07/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E9%87%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E7%BA%BF%E6%80%A7%E5%9F%BA/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>在线性代数中我们知道了可以通过高斯消元来求解一个线性空间里面的线性基，那么我们此处考虑一个线性空间只包含若干个数，并且运算是在 $\bmod \ 2$ 下进行的，也就是说加法就是异或操作，这个线性基我们可以发现很多性质。</p>
<p>并且表出的系数必须是 $0$ 或者 $1$，不能是其它实数。</p>
<h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><p>我们可以一个一个把当前线性空间里面的一组基（不是线性基，就是普通的一个基，这个基也能表出线性空间里面的所有数）插入到线性基里面，过程类似于高斯消元。</p>
<p>从高到底枚举当前这个数为 $1$ 的所有位，如果第 $i$ 位当前没有值，那就让当前的值插入到第 $i$ 位，如果第 $i$ 位当前有值，那就要让当前的值异或上第 $i$ 位的值，继续循环。</p>
<p>如果最后还是没有插入线性基，说明这个值是可以被表出来的，那么这个值就没有用了。</p>
<p>构造过程如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">50</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>((x&gt;&gt;i)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!col[i])&#123;col[i] = x;<span class="keyword">return</span> ;&#125;</span><br><span class="line">			x ^= col[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	has=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>has</code> 是标记是否会有一个非空集合异或起来为 $0$。</p>
<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>所有线性基的大小都相同，显然可得。</p>
<p>并且先后插入线性基的顺序不影响最终线性基的大小，由上一条可得。</p>
<p>第 $i$ 个数值的二进制下的第 $i$ 位一定为 $1$。</p>
<p>线性基里面的所有数线性无关，任意不同集合表出来的数都不相等。</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="求最大值"><a href="#求最大值" class="headerlink" title="求最大值"></a>求最大值</h3><p>我们可以从高位到低位枚举线性基的每一个位上的值，每一次都让 $ans \gets \max(ans,ans \operatorname{xor} p_i)$。</p>
<p>当然，也可以判断 $ans$ 的第 $i$ 位和 $p_i$ 的第 $i$ 位（肯定为 $1$）异或起来是不是 $1$，如果是就异或 $p_i$ 即可。</p>
<p>这样子的结论贪心显然可得，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=len;i&gt;=<span class="number">0</span>;i--) <span class="keyword">if</span>(((p[i]&gt;&gt;i)&amp;<span class="number">1</span>)^ans[i]) ans=ans^p[i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="求最小值"><a href="#求最小值" class="headerlink" title="求最小值"></a>求最小值</h3><p>首先判断有没有集合异或起来等于 $0$，即前面的 <code>has</code> 变量是否为 $1$。</p>
<p>然后输出线性基的 $i$ 最小的，$p_i$ 不为 $0$ 的 $p_i$ 即可。</p>
<p>贪心也可证明。</p>
<h3 id="求第-k-小值"><a href="#求第-k-小值" class="headerlink" title="求第 $k$ 小值"></a>求第 $k$ 小值</h3><p>我们这个时候需要对线性基做一定的转化。</p>
<p>如果 $p_i$ 有值，我们要让其他 $p_j$ 的第 $i$ 位都为 $0$，这样处理很简单，只需要模拟一下高斯消元的回代即可。</p>
<p>最后记得如果 $p_i$ 被异或成 $0$ 了需要删除掉，假如删除之后有 $l$ 个元素在线性基 $s$ 里面，并且没有异或集合为 $0$（有的话可以让 $k$ 减一），那么把 $k$ 进行二进制拆分，如果 $k$ 的第 $i$ 位为 $1$，那么答案异或上 $s$ 即可。</p>
<p>这个方法的正确性源于线性基的所有数是线性无关的，并且通过贪心的选择可以证明从底往高按照二进制划分是对的。</p>
<p>同时，求最大值就是全部异或起来，求最小值就是最后一个元素，也证明了上面求最小值的方案是正确的。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,s,i,col[<span class="number">51</span>],tmp[<span class="number">51</span>],tot,x,has,ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">50</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>((x&gt;&gt;i)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!col[i])&#123;col[i] = x;<span class="keyword">return</span> ;&#125;</span><br><span class="line">			x ^= col[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	has=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=<span class="number">50</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--) <span class="keyword">if</span>((col[i]&gt;&gt;j)&amp;<span class="number">1</span>) col[i]^=col[j];</span><br><span class="line">		<span class="keyword">if</span>(col[i]!=<span class="number">0</span>) tmp[tot++]=col[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n--) cin&gt;&gt;x,<span class="built_in">insert</span>(x);</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		cin&gt;&gt;x;</span><br><span class="line">		<span class="keyword">if</span>(has)&#123;</span><br><span class="line">			<span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">				cout&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> x--;</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">if</span>(x&gt;=(<span class="number">1ll</span>&lt;&lt;tot))&#123;</span><br><span class="line">			cout&lt;&lt;<span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;tot;i++) <span class="keyword">if</span>((x&gt;&gt;i)&amp;<span class="number">1</span>) ans^=tmp[i];</span><br><span class="line">		cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="求集合异或为-0-的不同集合个数"><a href="#求集合异或为-0-的不同集合个数" class="headerlink" title="求集合异或为 $0$ 的不同集合个数"></a>求集合异或为 $0$ 的不同集合个数</h3><p>包括空集。</p>
<p>我们首先构造线性基，那么设线性基大小为 $k$，集合大小为 $n$，那么我们在剩下 $n-k$ 个数里面随便选择一些数，根据线性基的性质都能在线性基里面找到唯一一个集合异或出来等于这个结果，那么方案数量就是 $2^{n-k}$。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>应用主要是前缀线性基，也就是第 $i$ 位不仅记录第 $i$ 位的值，也要记录第 $i$ 位是集合中哪个数插入进来得到的。</p>
<p>例题：</p>
<blockquote>
<p>给定 $n$ 和 $a_{1,\dots,n}$，$q$ 次询问，每次询问在 $[l,r]$ 区间内选出若干个数异或和最大是多少。</p>
</blockquote>
<p>我们可以从 $1$ 遍历到 $n$，每个下标都记录一下线性基的数据，线性基大小是 $\log$ 级别的，所以空间可以承受。</p>
<p>然后我们可以插入的时候优先保留下标靠后的数，因为越靠后越能产生贡献，并且因为线性基大小不变，所以不会产生不良影响。</p>
<p>于是可持久化一下，外加更新的时候判断当前有数了，但是下标小于插入的数的下标就交换一下即可。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	ll pos[<span class="number">31</span>],p[<span class="number">31</span>];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(node a,ll x,ll id)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--) pos[i]=a.pos[i],p[i]=a.p[i];</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">			<span class="keyword">if</span>((x&gt;&gt;i)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(!p[i])&#123;p[i]=x,pos[i]=id;<span class="keyword">return</span> ;&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(pos[i]&lt;id)&#123;<span class="built_in">swap</span>(pos[i],id),<span class="built_in">swap</span>(p[i],x);&#125;</span><br><span class="line">				x ^= p[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">		ll ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--) <span class="keyword">if</span>(pos[i]&gt;=x) ans=<span class="built_in">max</span>(ans,ans^p[i]);</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;a[<span class="number">500005</span>];</span><br><span class="line">ll n,i,x,q,l,r;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;x;</span><br><span class="line">		a[i].<span class="built_in">insert</span>(a[i<span class="number">-1</span>],x,i);</span><br><span class="line">	&#125;</span><br><span class="line">	cin&gt;&gt;q;</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">		cout&lt;&lt;a[r].<span class="built_in">query</span>(l)&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>同时，线性基还可以运用在树上，就是根节点到某个节点路径上的异或信息。</p>
<p>线性基还经常和 <code>bitset</code> 连用，这个时候求最大值就不能取 <code>max</code> 了，必须是判断当前位的值，不然时间会耗费很多。</p>
<p>当然，也有结合线段树分治的做法，也就是一段时间会有一个数加入集合，这个操作方式就跟并查集一样的，只是最后弹出的时候我们可以直接通过前缀线性基的方法（记录下标）判断就可以了。</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
        <tag>线性基</tag>
      </tags>
  </entry>
  <entry>
    <title>树分治</title>
    <url>/2024/02/04/%E6%A0%91%E5%88%86%E6%B2%BB/</url>
    <content><![CDATA[<h1 id="树分治"><a href="#树分治" class="headerlink" title="树分治"></a>树分治</h1><p>树分治将分治技术运用到了树上，可以更好地维护两点间的路径问题，如果整棵树是一个序列，则可以看做是 CDQ 分治或者是整体二分。</p>
<p>主要思想就是递归的层数不超过 $\log$ 层，每层我们可以 $O(n)$ 遍历所有点，以执行其他操作。</p>
<h2 id="点分治"><a href="#点分治" class="headerlink" title="点分治"></a>点分治</h2><p>点分治用于处理树上的路径问题。</p>
<p>一条路径如果指定了根节点，那可以被拆分为 $u \to root$ 和 $v \to root$ 两段进行讨论，点分治就是在这样的条件下产生的。</p>
<p>我们以 <a href="https://www.luogu.com.cn/problem/P3806">P3806 【模板】点分治 1</a> 来讲解，这道题目要在 $O(n \log n)$ 的时间内求出是否有一条路径的长度等于 $k$。</p>
<p>如果选择了根，那么我们可以用桶在 $O(n)$ 时间内求出跨越根的路径有没有等于 $k$ 的，这个实现不难。</p>
<p>把根删除会得到若干棵子树，这些子树递归下去查找即可，但是这样做的时间复杂度是 $O(n^2)$ 的，因为我们有可能不断地选择一条链的端点作为根。</p>
<p>于是可以提出改进，每次选择的根是当前子树的重心，这样的话递归层数不超过 $\log$ 层，时间复杂度就是 $O(n \log n)$，但是记住每次清空的时候不能直接 <code>memset</code>，而需要记录修改了哪些位置上的值然后弹出修改才能保证时间复杂度，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 20005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 10000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,a[N],i,x,y,z,la[N],ne[N],to[N],val[N],tot,q[N],ans[N],col[N],siz[N],tim,sta[N],top;</span><br><span class="line"><span class="type">bool</span> has[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span>&#123;tot++,ne[tot]=la[x],la[x]=tot,to[tot]=y,val[tot]=z;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">found</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> &amp;pos,<span class="type">int</span> &amp;now,<span class="type">int</span> all)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> cut = <span class="number">0</span>;</span><br><span class="line">	siz[x] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[to[i]]!=col[x]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">found</span>(to[i],x,pos,now,all);</span><br><span class="line">		siz[x] += siz[to[i]];</span><br><span class="line">		cut = <span class="built_in">max</span>(cut,siz[to[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	cut = <span class="built_in">max</span>(cut,all-siz[x]);</span><br><span class="line">	<span class="keyword">if</span>(cut&lt;now) now=cut,pos=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> step)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="keyword">if</span>(q[i]&gt;=step&amp;&amp;has[q[i]-step]) ans[i]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[x]!=col[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve</span>(to[i],x,step+val[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> step)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(step&lt;=<span class="number">1e7</span>) has[step]=<span class="number">1</span>,sta[++top]=step;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[x]!=col[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve2</span>(to[i],x,step+val[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve3</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> tim)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[x]!=col[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve3</span>(to[i],x,tim);</span><br><span class="line">	&#125;</span><br><span class="line">	col[x] = tim;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> all)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> pos = <span class="number">-1</span>,now = INT_MAX;</span><br><span class="line">	<span class="built_in">found</span>(x,<span class="number">-1</span>,pos,now,all);</span><br><span class="line">	has[<span class="number">0</span>] = <span class="number">1</span>,sta[++top] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[pos];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(col[to[i]]!=col[pos]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve</span>(to[i],pos,val[i]);</span><br><span class="line">		<span class="built_in">solve2</span>(to[i],pos,val[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(top) has[sta[top]]=<span class="number">0</span>,top--;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[pos];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(col[to[i]]!=col[pos]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve3</span>(to[i],pos,++tim);</span><br><span class="line">		<span class="built_in">dfs</span>(to[i],siz[to[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++) cin&gt;&gt;x&gt;&gt;y&gt;&gt;z,<span class="built_in">merge</span>(x,y,z),<span class="built_in">merge</span>(y,x,z);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++) cin&gt;&gt;q[i];</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>,n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++) cout&lt;&lt;(ans[i]?<span class="string">&quot;AYE&quot;</span>:<span class="string">&quot;NAY&quot;</span>)&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：一定要区分自己是哪棵子树的重心，代码中使用了颜色数组来记录。</strong></p>
<h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题 1"></a>例题 1</h3><p><a href="https://www.luogu.com.cn/problem/P4178">P4178 Tree</a></p>
<p>这道题相对于上一道题的不同是要求小于等于 $k$ 的路径条数，于是用树状数组维护加减查询即可。</p>
<p>代码如下，只是多了树状数组，时间复杂度 $O(n \log^2 n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,a[N],i,x,y,z,la[N],ne[N],to[N],val[N],tot,col[N],siz[N],tim,sta[N],top,tr[N];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	x++;</span><br><span class="line">	<span class="keyword">while</span>(x&lt;=(<span class="number">2e4</span>+<span class="number">1</span>)) tr[x]++,x+=x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">	x++;</span><br><span class="line">	<span class="keyword">while</span>(x) num+=tr[x],x-=x&amp;(-x);</span><br><span class="line">	<span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">clear</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	x++;</span><br><span class="line">	<span class="keyword">while</span>(x&lt;=(<span class="number">2e4</span>+<span class="number">1</span>)) tr[x]=<span class="number">0</span>,x+=x&amp;(-x); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span>&#123;tot++,ne[tot]=la[x],la[x]=tot,to[tot]=y,val[tot]=z;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">found</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> &amp;pos,<span class="type">int</span> &amp;now,<span class="type">int</span> all)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> cut = <span class="number">0</span>;</span><br><span class="line">	siz[x] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[to[i]]!=col[x]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">found</span>(to[i],x,pos,now,all);</span><br><span class="line">		siz[x] += siz[to[i]];</span><br><span class="line">		cut = <span class="built_in">max</span>(cut,siz[to[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	cut = <span class="built_in">max</span>(cut,all-siz[x]);</span><br><span class="line">	<span class="keyword">if</span>(cut&lt;now) now=cut,pos=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> step)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(step&lt;=m) ans+=<span class="built_in">query</span>(m-step);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[x]!=col[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve</span>(to[i],x,step+val[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> step)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(step&lt;=m) <span class="built_in">add</span>(step),sta[++top]=step;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[x]!=col[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve2</span>(to[i],x,step+val[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve3</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> tim)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[x]!=col[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve3</span>(to[i],x,tim);</span><br><span class="line">	&#125;</span><br><span class="line">	col[x] = tim;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> all)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> pos = <span class="number">-1</span>,now = INT_MAX;</span><br><span class="line">	<span class="built_in">found</span>(x,<span class="number">-1</span>,pos,now,all);</span><br><span class="line">	<span class="built_in">add</span>(<span class="number">0</span>),sta[++top] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[pos];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(col[to[i]]!=col[pos]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve</span>(to[i],pos,val[i]);</span><br><span class="line">		<span class="built_in">solve2</span>(to[i],pos,val[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(top) <span class="built_in">clear</span>(sta[top]),top--;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[pos];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(col[to[i]]!=col[pos]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve3</span>(to[i],pos,++tim);</span><br><span class="line">		<span class="built_in">dfs</span>(to[i],siz[to[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++) cin&gt;&gt;x&gt;&gt;y&gt;&gt;z,<span class="built_in">merge</span>(x,y,z),<span class="built_in">merge</span>(y,x,z);</span><br><span class="line">	cin&gt;&gt;m;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>,n);</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题 2"></a>例题 2</h3><p><a href="https://www.luogu.com.cn/problem/P2664">P2664 树上游戏</a></p>
<p>这道题需要我们求出以每个节点开始的每条路径上的颜色种类之和，因为涉及到了较为复杂的路径查询，因此我们使用点分治解决它。</p>
<p>一条路径，要么是 $lca \to u$，要么是 $u \to lca \to v$，对于第一种情况，我们只需要开一个桶，存储每个点到我们枚举的点的颜色种类数就可以了。</p>
<p>对于第二种路径，如果当前枚举的点是 $u$，我们考虑对每种颜色分开计算贡献，如果某种颜色在 $u \to lca$ 的路径上出现过，那就会贡献所有 $v$（不和 $u$ 在同一棵 $lca$ 的子树内）的数量的答案。</p>
<p>否则我们另外开一个桶，当遍历到 $v$ 的时候如果 $a_v$ 在 $v \to lca$ 上只经过了一次，那么就让 $cnt_{a_v} \gets cnt_{a_v}+siz_v$，然后对于上面的第二种情况剩下的情况，就加上所有 $cnt_{p}$，其中 $p$ 不在 $u \to lca$ 上出现。</p>
<p>当然 $cnt$ 要减去当前子树的贡献。</p>
<p>最后不要忘了加上 $lca \to lca$​ 的答案，以及清空我们用过的每个桶。</p>
<p>代码如下，不算难写：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,m,a[N],i,x,y,z,la[N],ne[N],to[N],tot,col[N],siz[N],sum[N],tim,sta[N],top,ans[N],qzh[N],vis[N],res;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(ll x,ll y)</span></span>&#123;tot++,ne[tot]=la[x],la[x]=tot,to[tot]=y;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">found</span><span class="params">(ll x,ll fa,ll &amp;pos,ll &amp;now,ll all)</span></span>&#123;</span><br><span class="line">	ll cut = <span class="number">0</span>;</span><br><span class="line">	siz[x] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[to[i]]!=col[x]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">found</span>(to[i],x,pos,now,all);</span><br><span class="line">		siz[x] += siz[to[i]];</span><br><span class="line">		cut = <span class="built_in">max</span>(cut,siz[to[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	cut = <span class="built_in">max</span>(cut,all-siz[x]);</span><br><span class="line">	<span class="keyword">if</span>(cut&lt;now) now=cut,pos=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(ll x,ll fa,ll root,ll colsum)</span></span>&#123;</span><br><span class="line">	ll temp = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(!vis[a[x]]) temp=<span class="number">1</span>,colsum++;</span><br><span class="line">	vis[a[x]]++;</span><br><span class="line">	siz[x] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[x]!=col[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve</span>(to[i],x,root,colsum);</span><br><span class="line">		siz[x] += siz[to[i]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(temp) sta[++top]=a[x],sum[a[x]]+=siz[x],res+=siz[x];</span><br><span class="line">	ans[root]+=colsum;</span><br><span class="line">	vis[a[x]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve2</span><span class="params">(ll x,ll fa,ll root,ll colsum,ll alls,ll rest)</span></span>&#123;</span><br><span class="line">	ll temp = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(!vis[a[x]]) temp=<span class="number">1</span>,colsum++,rest-=sum[a[x]];</span><br><span class="line">	vis[a[x]]++;</span><br><span class="line">	siz[x] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[x]!=col[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve2</span>(to[i],x,root,colsum,alls,rest);</span><br><span class="line">		siz[x] += siz[to[i]];</span><br><span class="line">	&#125;</span><br><span class="line">	ans[x]+=colsum*alls+rest;</span><br><span class="line">	vis[a[x]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve3</span><span class="params">(ll x,ll fa,ll tim)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[x]!=col[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve3</span>(to[i],x,tim);</span><br><span class="line">	&#125;</span><br><span class="line">	col[x] = tim;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve4</span><span class="params">(ll x,ll fa)</span></span>&#123;</span><br><span class="line">	ll temp = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(!vis[a[x]]) temp=<span class="number">1</span>;</span><br><span class="line">	vis[a[x]]++;</span><br><span class="line">	<span class="keyword">for</span>(ll i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[x]!=col[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve4</span>(to[i],x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(temp) sum[a[x]]-=siz[x],res-=siz[x];</span><br><span class="line">	vis[a[x]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve5</span><span class="params">(ll x,ll fa)</span></span>&#123;</span><br><span class="line">	ll temp = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(!vis[a[x]]) temp=<span class="number">1</span>;</span><br><span class="line">	vis[a[x]]++;</span><br><span class="line">	<span class="keyword">for</span>(ll i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[x]!=col[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve5</span>(to[i],x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(temp) sum[a[x]]+=siz[x],res+=siz[x];</span><br><span class="line">	vis[a[x]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(ll x,ll all)</span></span>&#123;</span><br><span class="line">	ll pos = <span class="number">-1</span>,now = LLONG_MAX;</span><br><span class="line">	<span class="built_in">found</span>(x,<span class="number">-1</span>,pos,now,all);</span><br><span class="line">	ans[pos]++,res=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//	cout&lt;&lt;&quot;! &quot;&lt;&lt;pos&lt;&lt;endl;</span></span><br><span class="line">	<span class="keyword">for</span>(ll i=la[pos];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(col[to[i]]!=col[pos]) <span class="keyword">continue</span>;</span><br><span class="line">		vis[a[pos]]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">solve</span>(to[i],pos,pos,<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=la[pos];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(col[to[i]]!=col[pos]) <span class="keyword">continue</span>;</span><br><span class="line">		vis[a[pos]]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">solve4</span>(to[i],pos);</span><br><span class="line">		vis[a[pos]]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">solve2</span>(to[i],pos,pos,<span class="number">1</span>,all-siz[to[i]],res);</span><br><span class="line">		vis[a[pos]]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">solve5</span>(to[i],pos);</span><br><span class="line">	&#125;</span><br><span class="line">	vis[a[pos]]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(top) sum[sta[top]]=<span class="number">0</span>,top--;</span><br><span class="line"><span class="comment">//	for(i=1;i&lt;=n;i++) cout&lt;&lt;ans[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">//	cout&lt;&lt;endl;</span></span><br><span class="line">	<span class="keyword">for</span>(ll i=la[pos];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(col[to[i]]!=col[pos]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve3</span>(to[i],pos,++tim);</span><br><span class="line">		<span class="built_in">dfs</span>(to[i],siz[to[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i],qzh[i]=a[i];</span><br><span class="line">	<span class="built_in">sort</span>(qzh+<span class="number">1</span>,qzh+n+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) a[i]=<span class="built_in">lower_bound</span>(qzh+<span class="number">1</span>,qzh+n+<span class="number">1</span>,a[i])-qzh;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++) cin&gt;&gt;x&gt;&gt;y,<span class="built_in">merge</span>(x,y),<span class="built_in">merge</span>(y,x);</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>,n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="点分治序"><a href="#点分治序" class="headerlink" title="点分治序"></a>点分治序</h3><blockquote>
<p>给定一个 $N$ 个结点的树，结点用正整数 $1 \sim N$ 编号。每条边有一个正整数权值。<br>用 $d(a,b)$ 表示从结点 $a$ 到结点 $b$ 的简单路径的距离。其中要求 $a&lt;b$。将这 $\frac {N(N-1)}{2}$ 个距离从大到小排序，输出前 $M$ 个距离值。</p>
</blockquote>
<p>如果按照点分治的顺序来加点到某个序列里面，那么这个序列的长度是 $O(n \log n)$ 的，并且每个点能够与之配对的点都在一个区间里面，即 $dis_{u,v}&#x3D;dis_u+dis_v-2 \times dis_{\operatorname{lca}(u,v)}$</p>
<p>于是我们直接可以用超级钢琴题目的思路来解决，直接用 ST 表从堆里面取出 $M$ 个距离值，然后输出即可。</p>
<p>时间复杂度为 $O(n \log n \log k)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 1000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> l,r,id,x;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node&amp; a)<span class="type">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a.x&gt;x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;ress;</span><br><span class="line"><span class="type">int</span> n,k,a[N],i,j,x,y,z,la[N],ne[N],to[N],val[N],tot,col[N],siz[N],tim,c,res;</span><br><span class="line"><span class="type">int</span> ls[M],rs[M],dist[M],m,st[M][<span class="number">21</span>],st2[M][<span class="number">21</span>],LOG[M];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span>&#123;tot++,ne[tot]=la[x],la[x]=tot,to[tot]=y,val[tot]=z;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">found</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> &amp;pos,<span class="type">int</span> &amp;now,<span class="type">int</span> all)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> cut = <span class="number">0</span>;</span><br><span class="line">	siz[x] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[to[i]]!=col[x]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">found</span>(to[i],x,pos,now,all);</span><br><span class="line">		siz[x] += siz[to[i]];</span><br><span class="line">		cut = <span class="built_in">max</span>(cut,siz[to[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	cut = <span class="built_in">max</span>(cut,all-siz[x]);</span><br><span class="line">	<span class="keyword">if</span>(cut&lt;now) now=cut,pos=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> step,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	m++,dist[m] = step,ls[m] = l,rs[m] = r;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[x]!=col[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve</span>(to[i],x,step+val[i],l,r);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> tim)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[x]!=col[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve2</span>(to[i],x,tim);</span><br><span class="line">	&#125;</span><br><span class="line">	col[x] = tim;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> all)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> pos = <span class="number">-1</span>,now = INT_MAX,beg = m+<span class="number">1</span>,las = m+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">found</span>(x,<span class="number">-1</span>,pos,now,all);</span><br><span class="line">	m++,dist[m]=<span class="number">0</span>,ls[m]=m,rs[m]=m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[pos];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(col[to[i]]!=col[pos]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve</span>(to[i],pos,val[i],beg,las);</span><br><span class="line">		las=m;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[pos];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(col[to[i]]!=col[pos]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve2</span>(to[i],pos,++tim);</span><br><span class="line">		<span class="built_in">dfs</span>(to[i],siz[to[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query1</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	c = LOG[r-l+<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">max</span>(st[l][c],st[r-(<span class="number">1</span>&lt;&lt;c)+<span class="number">1</span>][c]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query2</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	c = LOG[r-l+<span class="number">1</span>],res = <span class="built_in">max</span>(st[l][c],st[r-(<span class="number">1</span>&lt;&lt;c)+<span class="number">1</span>][c]);</span><br><span class="line">	<span class="keyword">if</span>(res==st[l][c]) <span class="keyword">return</span> st2[l][c];</span><br><span class="line">	<span class="keyword">return</span> st2[r-(<span class="number">1</span>&lt;&lt;c)+<span class="number">1</span>][c];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">char</span> buf[<span class="number">1000000</span>],*p=buf,*q=buf;</span><br><span class="line">	<span class="keyword">return</span> p==q&amp;&amp;(q=(p=buf)+<span class="built_in">fread</span>(buf,<span class="number">1</span>,<span class="number">1000000</span>,stdin),p==q)?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)res=res*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> obuf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p3=obuf; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span>&#123; </span><br><span class="line">	p3-obuf&lt;=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)?(*p3++=c):(<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout),p3=obuf,*p3++=c); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;  </span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">write</span>(x/<span class="number">10</span>); </span><br><span class="line">	<span class="built_in">pc</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(),k=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++) x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>(),z=<span class="built_in">read</span>(),<span class="built_in">merge</span>(x,y,z),<span class="built_in">merge</span>(y,x,z);</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>,n);</span><br><span class="line">	<span class="keyword">for</span>(i=m;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">		LOG[i] = <span class="built_in">log2</span>(i);</span><br><span class="line">		st[i][<span class="number">0</span>] = dist[i],st2[i][<span class="number">0</span>] = i;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=m;j++)&#123;</span><br><span class="line">			st[i][j] = <span class="built_in">max</span>(st[i][j<span class="number">-1</span>],st[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">			<span class="keyword">if</span>(st[i][j]==st[i][j<span class="number">-1</span>]) st2[i][j]=st2[i][j<span class="number">-1</span>];</span><br><span class="line">			<span class="keyword">else</span> st2[i][j]=st2[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++) q.<span class="built_in">push</span>((node)&#123;ls[i],rs[i],i,dist[i]+<span class="built_in">query1</span>(ls[i],rs[i])&#125;);</span><br><span class="line">	<span class="keyword">while</span>(k--)&#123;</span><br><span class="line">		<span class="built_in">write</span>((ress=q.<span class="built_in">top</span>()).x),<span class="built_in">pc</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="type">int</span> pos = <span class="built_in">query2</span>(ress.l,ress.r);</span><br><span class="line">		<span class="keyword">if</span>(ress.l&lt;pos) q.<span class="built_in">push</span>((node)&#123;ress.l,pos<span class="number">-1</span>,ress.id,dist[ress.id]+<span class="built_in">query1</span>(ress.l,pos<span class="number">-1</span>)&#125;);</span><br><span class="line">		<span class="keyword">if</span>(ress.r&gt;pos) q.<span class="built_in">push</span>((node)&#123;pos+<span class="number">1</span>,ress.r,ress.id,dist[ress.id]+<span class="built_in">query1</span>(pos+<span class="number">1</span>,ress.r)&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout),<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="边分治"><a href="#边分治" class="headerlink" title="边分治"></a>边分治</h2><p>简单提一下，就是砍掉某条边，然后分治计算，但是这样的话对于菊花图来说时间复杂度仍然是 $O(n^2)$ 的，于是我们可以用多叉树转二叉树的方法转成类似线段树的样子，时间复杂度就正确了。</p>
<p>常数肯定比点分治大，也不推荐这种写法。</p>
<h2 id="点分树"><a href="#点分树" class="headerlink" title="点分树"></a>点分树</h2><p>用于动态维护点分治的信息，通常会有强制在线、点权&#x2F;边权修改等操作。</p>
<h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>我们考虑把整棵树进行重构，具体而言，设当前这棵树选择了 $pos$ 作为重心，划分成了 $T_1,T_2,T_3,\dots,T_k$ $k$ 棵子树，那么 $pos$ 在点分树上的儿子就是这 $k$ 棵子树选择的重心。</p>
<p>容易发现，这样构造出来的点分树的树高是 $O(\log)$ 级别的，因此很多并不太正确的暴力在点分树上执行操作都能得到较好的时间复杂度。</p>
<p><strong>特别注意：点分树上如果 $u \to v \to w$ 不代表 $u$ 是 $v$ 在原树的祖先，$u \to w$ 在原树的距离也不能使用 $\operatorname{dis}(u,v)+\operatorname{dis}(v,w)$ 得到。</strong></p>
<p>每次涉及到修改点权的时候就暴力跳祖先进行维护，如果是修改边权，就考虑边权变成点权之后再维护信息，时间复杂度通常是 $O(n \log n \times T)$，$T$ 是维护一次的时间复杂度，如果使用线段树等数据结构就是 $\log^2$ 的。</p>
<h3 id="例题-1-1"><a href="#例题-1-1" class="headerlink" title="例题 1"></a>例题 1</h3><p><a href="https://www.luogu.com.cn/problem/P2056">P2056 [ZJOI2007] 捉迷藏</a> </p>
<p>这道题因为有点权的修改和路径的查询，所以考虑点分树处理。</p>
<p>一条路径可能会被划分为 $u \to lca$ 加上 $lca \to v$ 两个部分，因此我们根据路径的这个性质开始处理。</p>
<p>具体的，对于每个节点我们都需要维护一个它在点分树上的所有后代（包括本身）到它父亲的距离之和，这个距离可以使用倍增<strong>在原树</strong>上计算，并且我们可以维护一个平衡树轻松 $O(\log^2)$ 维护这个操作。</p>
<p>然后因为上面路径的性质，一个节点还需要维护它在点分树上的儿子节点中到它距离最远的两个（类似于 dp 树的直径），这个我们可以用平衡树来存储所有儿子的子树中到它距离最远的节点。（每个儿子的子树只存一个，避免路径重复计算）</p>
<p>最后用一个全局平衡树维护答案即可。</p>
<p>为了常数，程序中使用了可删堆来代替平衡树，时间复杂度总的就是 $O(n \log^2 n)$，并且要记得判断所有灯都开启的情况。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">heap</span>&#123;</span><br><span class="line">	priority_queue&lt;<span class="type">int</span>&gt; q1,q2;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;q1.<span class="built_in">push</span>(x);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">top</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(q2.<span class="built_in">size</span>()&amp;&amp;q1.<span class="built_in">top</span>()==q2.<span class="built_in">top</span>()) q1.<span class="built_in">pop</span>(),q2.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">return</span> q1.<span class="built_in">top</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">topp</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(q2.<span class="built_in">size</span>()&amp;&amp;q1.<span class="built_in">top</span>()==q2.<span class="built_in">top</span>()) q1.<span class="built_in">pop</span>(),q2.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="type">int</span> tmp = q1.<span class="built_in">top</span>();</span><br><span class="line">		q1.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">while</span>(q2.<span class="built_in">size</span>()&amp;&amp;q1.<span class="built_in">top</span>()==q2.<span class="built_in">top</span>()) q1.<span class="built_in">pop</span>(),q2.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="type">int</span> res = q1.<span class="built_in">top</span>();</span><br><span class="line">		q1.<span class="built_in">push</span>(tmp);</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> q1.<span class="built_in">size</span>()-q2.<span class="built_in">size</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">erase</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;q2.<span class="built_in">push</span>(x);&#125;</span><br><span class="line">&#125;calc[N],alls[N],ans;</span><br><span class="line"><span class="type">int</span> n,m,q,a[N],i,x,y,z,la[N],ne[N],to[N],tot,col[N],siz[N],st[N][<span class="number">21</span>],dep[N],tim,fath[N],vis[N],sum;</span><br><span class="line"><span class="type">char</span> opt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;tot++,ne[tot]=la[x],la[x]=tot,to[tot]=y;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++) st[x][i]=st[st[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa) <span class="keyword">continue</span>;</span><br><span class="line">		dep[to[i]] = dep[x]+<span class="number">1</span>,st[to[i]][<span class="number">0</span>] = x;</span><br><span class="line">		<span class="built_in">dfs</span>(to[i],x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> ans = dep[x]+dep[y];</span><br><span class="line">	<span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--) <span class="keyword">if</span>(dep[st[y][i]]&gt;=dep[x]) y=st[y][i];</span><br><span class="line">	<span class="keyword">if</span>(x==y) <span class="keyword">return</span> ans<span class="number">-2</span>*dep[x];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--) <span class="keyword">if</span>(st[x][i]!=st[y][i]) x=st[x][i],y=st[y][i];</span><br><span class="line">	<span class="keyword">return</span> ans<span class="number">-2</span>*dep[st[x][<span class="number">0</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">found</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> &amp;pos,<span class="type">int</span> &amp;now,<span class="type">int</span> all)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> cut = <span class="number">0</span>;</span><br><span class="line">	siz[x] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[to[i]]!=col[x]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">found</span>(to[i],x,pos,now,all);</span><br><span class="line">		siz[x] += siz[to[i]];</span><br><span class="line">		cut = <span class="built_in">max</span>(cut,siz[to[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	cut = <span class="built_in">max</span>(cut,all-siz[x]);</span><br><span class="line">	<span class="keyword">if</span>(cut&lt;now) now=cut,pos=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> root)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(fath[root]) alls[root].<span class="built_in">insert</span>(<span class="built_in">query</span>(x,fath[root]));</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[x]!=col[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve</span>(to[i],x,root);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> tim)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[x]!=col[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve2</span>(to[i],x,tim);</span><br><span class="line">	&#125;</span><br><span class="line">	col[x] = tim;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> all,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> pos = <span class="number">-1</span>,now = INT_MAX;</span><br><span class="line">	<span class="built_in">found</span>(x,<span class="number">-1</span>,pos,now,all);</span><br><span class="line">	fath[pos] = fa;</span><br><span class="line">	<span class="keyword">if</span>(fa) alls[pos].<span class="built_in">insert</span>(<span class="built_in">query</span>(pos,fa));</span><br><span class="line">	calc[pos].<span class="built_in">insert</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[pos];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(col[to[i]]!=col[pos]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve</span>(to[i],pos,pos);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(fa) calc[fa].<span class="built_in">insert</span>(alls[pos].<span class="built_in">top</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[pos];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(col[to[i]]!=col[pos]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve2</span>(to[i],pos,++tim);</span><br><span class="line">		<span class="built_in">init</span>(to[i],siz[to[i]],pos);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(calc[pos].<span class="built_in">size</span>()&gt;=<span class="number">2</span>) ans.<span class="built_in">insert</span>(calc[pos].<span class="built_in">top</span>()+calc[pos].<span class="built_in">topp</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++) cin&gt;&gt;x&gt;&gt;y,<span class="built_in">merge</span>(x,y),<span class="built_in">merge</span>(y,x);</span><br><span class="line">	dep[<span class="number">1</span>] = <span class="number">1</span>,<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">init</span>(<span class="number">1</span>,n,<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;q;</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		cin&gt;&gt;opt;</span><br><span class="line">		<span class="keyword">if</span>(opt==<span class="string">&#x27;G&#x27;</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(sum==n) cout&lt;&lt;<span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(ans.<span class="built_in">size</span>()) cout&lt;&lt;ans.<span class="built_in">top</span>()&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;0\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			cin&gt;&gt;x;</span><br><span class="line">			vis[x]^=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(vis[x])&#123;</span><br><span class="line">				sum++;</span><br><span class="line">				<span class="keyword">if</span>(calc[x].<span class="built_in">size</span>()&gt;=<span class="number">2</span>) ans.<span class="built_in">erase</span>(calc[x].<span class="built_in">top</span>()+calc[x].<span class="built_in">topp</span>());</span><br><span class="line">				calc[x].<span class="built_in">erase</span>(<span class="number">0</span>);</span><br><span class="line">				<span class="keyword">if</span>(calc[x].<span class="built_in">size</span>()&gt;=<span class="number">2</span>) ans.<span class="built_in">insert</span>(calc[x].<span class="built_in">top</span>()+calc[x].<span class="built_in">topp</span>());</span><br><span class="line">				<span class="keyword">for</span>(i=x;fath[i];i=fath[i])&#123;</span><br><span class="line">					<span class="keyword">if</span>(calc[fath[i]].<span class="built_in">size</span>()&gt;=<span class="number">2</span>) ans.<span class="built_in">erase</span>(calc[fath[i]].<span class="built_in">top</span>()+calc[fath[i]].<span class="built_in">topp</span>());</span><br><span class="line">					calc[fath[i]].<span class="built_in">erase</span>(alls[i].<span class="built_in">top</span>());</span><br><span class="line">					alls[i].<span class="built_in">erase</span>(<span class="built_in">query</span>(x,fath[i]));</span><br><span class="line">					<span class="keyword">if</span>(alls[i].<span class="built_in">size</span>()) calc[fath[i]].<span class="built_in">insert</span>(alls[i].<span class="built_in">top</span>());</span><br><span class="line">					<span class="keyword">if</span>(calc[fath[i]].<span class="built_in">size</span>()&gt;=<span class="number">2</span>) ans.<span class="built_in">insert</span>(calc[fath[i]].<span class="built_in">top</span>()+calc[fath[i]].<span class="built_in">topp</span>());</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				sum--;</span><br><span class="line">				<span class="keyword">if</span>(calc[x].<span class="built_in">size</span>()&gt;=<span class="number">2</span>) ans.<span class="built_in">erase</span>(calc[x].<span class="built_in">top</span>()+calc[x].<span class="built_in">topp</span>());</span><br><span class="line">				calc[x].<span class="built_in">insert</span>(<span class="number">0</span>);</span><br><span class="line">				<span class="keyword">if</span>(calc[x].<span class="built_in">size</span>()&gt;=<span class="number">2</span>) ans.<span class="built_in">insert</span>(calc[x].<span class="built_in">top</span>()+calc[x].<span class="built_in">topp</span>());</span><br><span class="line">				<span class="keyword">for</span>(i=x;fath[i];i=fath[i])&#123;</span><br><span class="line">					<span class="keyword">if</span>(calc[fath[i]].<span class="built_in">size</span>()&gt;=<span class="number">2</span>) ans.<span class="built_in">erase</span>(calc[fath[i]].<span class="built_in">top</span>()+calc[fath[i]].<span class="built_in">topp</span>());</span><br><span class="line">					<span class="keyword">if</span>(alls[i].<span class="built_in">size</span>()) calc[fath[i]].<span class="built_in">erase</span>(alls[i].<span class="built_in">top</span>());</span><br><span class="line">					alls[i].<span class="built_in">insert</span>(<span class="built_in">query</span>(x,fath[i]));</span><br><span class="line">					calc[fath[i]].<span class="built_in">insert</span>(alls[i].<span class="built_in">top</span>());</span><br><span class="line">					<span class="keyword">if</span>(calc[fath[i]].<span class="built_in">size</span>()&gt;=<span class="number">2</span>) ans.<span class="built_in">insert</span>(calc[fath[i]].<span class="built_in">top</span>()+calc[fath[i]].<span class="built_in">topp</span>());</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例题-2-1"><a href="#例题-2-1" class="headerlink" title="例题 2"></a>例题 2</h3><p><a href="https://www.luogu.com.cn/problem/P6329">P6329 【模板】点分树 | 震波</a></p>
<p>定义分治块 $x$ 为点分树上以 $x$​ 为根的子树的节点集合。</p>
<p>与上一道题不同的是，这道题是维护一个距离信息，而不是某条链的信息，我们依然可以考虑点分治。</p>
<p>因为不是维护链的信息，所以实现起来要简单许多，首先对于 $pos$ 节点来说，建立两棵线段树，一棵维护 $pos$ 的点分树子树内距离 $pos$ 节点为 $k$ 的点权和，一棵维护点分树子树内距离 $fa_{pos}$（点分树上的父亲）为 $k$ 的点权和。</p>
<p>修改是容易的，只需要在点分树上暴力跳父亲就可以了，考虑查询。</p>
<p>首先要加上当前点分树子树内距离 $pos$ 不超过 $v$ 的点权和，此时还有一些节点没有考虑，这些节点到 $pos$ 的路径一定经过了 $pos$ 在点分树上的祖先，考虑枚举祖先，设枚举到了 $y$，$y$ 往 $pos$ 走一步（下级祖先）是 $x$。</p>
<p>那么我们要加上所有经过 $y$ 到 $pos$ 的节点的点权和，答案就要加上 $y$ 子树对 $pos$ 的贡献，也就是 $0 \sim v-\operatorname{dis}(y,pos)$ 下标的和，这样的话我们算重复了一部分，那一部分并不需要经过 $y$ 到达 $pos$，但它们一定在 $x$ 及其子树内，于是减去 $x$ 的那棵维护点分树子树内距离 $fa_{pos}$（点分树上的父亲）为 $k$ 的点权和的线段树上 $0 \sim v-\operatorname{dis}(y,pos)$ 下标的和就可以了。</p>
<p>时间复杂度是 $O(n \log^2 n)$，空间复杂度卡满同阶。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;<span class="type">int</span> l,r,s;&#125;tr[N&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> n,m,q,a[N],i,x,y,z,la[N],ne[N],to[N],tot,col[N],siz[N],dep[N],tim,fath[N],vis[N],val[N],depp[N],sum,son[N],summ[N],top[N],faa[N],tr_tot;</span><br><span class="line"><span class="type">int</span> alls[N],calc[N],opt,ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> c,<span class="type">int</span> s,<span class="type">int</span> t,<span class="type">int</span> &amp;p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p) p=++tr_tot;</span><br><span class="line">	<span class="keyword">if</span>(s==t)&#123;</span><br><span class="line">		tr[p].s+=c;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=(s+t)/<span class="number">2</span>) <span class="built_in">add</span>(x,c,s,(s+t)/<span class="number">2</span>,tr[p].l);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">add</span>(x,c,(s+t)/<span class="number">2</span>+<span class="number">1</span>,t,tr[p].r);</span><br><span class="line">	tr[p].s = tr[tr[p].l].s + tr[tr[p].r].s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> s,<span class="type">int</span> t,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=s&amp;&amp;t&lt;=r) <span class="keyword">return</span> tr[p].s;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>&lt;=(s+t)/<span class="number">2</span>) ans+=<span class="built_in">query</span>(l,r,s,(s+t)/<span class="number">2</span>,tr[p].l);</span><br><span class="line">	<span class="keyword">if</span>(r&gt;(s+t)/<span class="number">2</span>) ans+=<span class="built_in">query</span>(l,r,(s+t)/<span class="number">2</span>+<span class="number">1</span>,t,tr[p].r);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span>&#123;tot++,ne[tot]=la[x],la[x]=tot,to[tot]=y,val[tot]=z;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">	summ[x] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa) <span class="keyword">continue</span>;</span><br><span class="line">		dep[to[i]] = dep[x]+<span class="number">1</span>,depp[to[i]]=depp[x]+val[i];</span><br><span class="line">		<span class="built_in">dfs</span>(to[i],x);</span><br><span class="line">		<span class="keyword">if</span>(summ[to[i]]&gt;summ[son[x]]) son[x]=to[i];</span><br><span class="line">		summ[x]+=summ[to[i]];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> topp)</span></span>&#123;</span><br><span class="line">	faa[x] = fa,top[x] = topp;</span><br><span class="line">	<span class="keyword">if</span>(son[x]) <span class="built_in">dfs2</span>(son[x],x,topp);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||to[i]==son[x]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs2</span>(to[i],x,to[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> ans = depp[x]+depp[y];</span><br><span class="line">	<span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">		<span class="keyword">if</span>(dep[top[x]]&gt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">		y = faa[top[y]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">	<span class="keyword">return</span> ans<span class="number">-2</span>*depp[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">found</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> &amp;pos,<span class="type">int</span> &amp;now,<span class="type">int</span> all)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> cut = <span class="number">0</span>;</span><br><span class="line">	siz[x] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[to[i]]!=col[x]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">found</span>(to[i],x,pos,now,all);</span><br><span class="line">		siz[x] += siz[to[i]];</span><br><span class="line">		cut = <span class="built_in">max</span>(cut,siz[to[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	cut = <span class="built_in">max</span>(cut,all-siz[x]);</span><br><span class="line">	<span class="keyword">if</span>(cut&lt;now) now=cut,pos=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> root)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(fath[root]) <span class="built_in">add</span>(<span class="built_in">query</span>(x,fath[root]),a[x],<span class="number">0</span>,n,alls[root]);</span><br><span class="line">	<span class="built_in">add</span>(<span class="built_in">query</span>(x,root),a[x],<span class="number">0</span>,n,calc[root]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[x]!=col[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve</span>(to[i],x,root);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> tim)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[x];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(to[i]==fa||col[x]!=col[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve2</span>(to[i],x,tim);</span><br><span class="line">	&#125;</span><br><span class="line">	col[x] = tim;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> all,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> pos = <span class="number">-1</span>,now = INT_MAX;</span><br><span class="line">	<span class="built_in">found</span>(x,<span class="number">-1</span>,pos,now,all);</span><br><span class="line">	fath[pos] = fa;</span><br><span class="line">	<span class="built_in">add</span>(<span class="number">0</span>,a[pos],<span class="number">0</span>,n,calc[pos]);</span><br><span class="line">	<span class="keyword">if</span>(fath[pos]) <span class="built_in">add</span>(<span class="built_in">query</span>(pos,fath[pos]),a[pos],<span class="number">0</span>,n,alls[pos]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[pos];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(col[to[i]]!=col[pos]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve</span>(to[i],pos,pos);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=la[pos];i;i=ne[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(col[to[i]]!=col[pos]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">solve2</span>(to[i],pos,++tim);</span><br><span class="line">		<span class="built_in">init</span>(to[i],siz[to[i]],pos);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++) cin&gt;&gt;x&gt;&gt;y,<span class="built_in">merge</span>(x,y,<span class="number">1</span>),<span class="built_in">merge</span>(y,x,<span class="number">1</span>);</span><br><span class="line">	dep[<span class="number">1</span>] = <span class="number">1</span>,<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>),<span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">init</span>(<span class="number">1</span>,n,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		cin&gt;&gt;opt;</span><br><span class="line">		<span class="keyword">if</span>(opt==<span class="number">0</span>)&#123;</span><br><span class="line">			cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">			x^=ans,y^=ans;</span><br><span class="line">			ans = <span class="built_in">query</span>(<span class="number">0</span>,y,<span class="number">0</span>,n,calc[x]);</span><br><span class="line">			<span class="keyword">for</span>(i=x;fath[i];i=fath[i])&#123;</span><br><span class="line">				<span class="type">int</span> dis = <span class="built_in">query</span>(x,fath[i]);</span><br><span class="line">				ans += <span class="built_in">query</span>(<span class="number">0</span>,y-dis,<span class="number">0</span>,n,calc[fath[i]]);</span><br><span class="line">				ans -= <span class="built_in">query</span>(<span class="number">0</span>,y-dis,<span class="number">0</span>,n,alls[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">			x^=ans,y^=ans;</span><br><span class="line">			<span class="type">int</span> tmp = y-a[x];</span><br><span class="line">			a[x] = y;</span><br><span class="line">			<span class="keyword">for</span>(i=x;i;i=fath[i])&#123;</span><br><span class="line">				<span class="built_in">add</span>(<span class="built_in">query</span>(x,i),tmp,<span class="number">0</span>,n,calc[i]);</span><br><span class="line">				<span class="keyword">if</span>(fath[i]) <span class="built_in">add</span>(<span class="built_in">query</span>(x,fath[i]),tmp,<span class="number">0</span>,n,alls[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>点分树的运用一般都是每个节点维护当前节点的点分树的子树内所有节点对于它的一些信息，和对于它在点分树上的父亲的一些信息。</p>
<p>涉及到链相关的询问，一般都是剖分成 $u \to lca,lca \to v$ 的信息进行合并处理。</p>
<p>涉及到层数&#x2F;深度相关的询问，一般都是利用一些区间的数据结构处理，并且还需要小小的容斥一下，即上文”经过 $y$ 到达 $pos$ 的节点“，因为 $x$ 内的节点已经处理过了，删除掉 $x$ 子树对于答案的贡献即可。</p>
<p>点分树转化成普通的链的情况就是线段树，我们可以思考成树上的分治（本质也是如此）。</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>图论</tag>
        <tag>树</tag>
        <tag>分治</tag>
        <tag>点分治</tag>
        <tag>边分治</tag>
        <tag>点分树</tag>
      </tags>
  </entry>
  <entry>
    <title>练习赛总结（COCI 相关）</title>
    <url>/2024/01/07/%E7%BB%83%E4%B9%A0%E8%B5%9B%E6%80%BB%E7%BB%93%EF%BC%88COCI-%E7%9B%B8%E5%85%B3%EF%BC%89/</url>
    <content><![CDATA[<h1 id="COCI相关"><a href="#COCI相关" class="headerlink" title="COCI相关"></a><strong>COCI相关</strong></h1><h2 id="练习赛1（2023-6-9）"><a href="#练习赛1（2023-6-9）" class="headerlink" title="练习赛1（2023.6.9）"></a><strong>练习赛1（2023.6.9）</strong></h2><p>练习地址–&gt;<a href="https://www.luogu.com.cn/contest/113255">练习赛1</a>。</p>
<p>D题当时没有想出来，只知道要用并查集，然后分两种情况讨论，但是时间复杂度总是不太对。后来看了题解发现大部分思路都是正确的，但是就是优化那里，忘记并查集可以撤销了。</p>
<p>总之，是一个知识点的扩展知识掌握得不够牢固，导致整道题做不出来。</p>
<h2 id="练习赛2（2023-6-10）"><a href="#练习赛2（2023-6-10）" class="headerlink" title="练习赛2（2023.6.10）"></a><strong>练习赛2（2023.6.10）</strong></h2><p>练习地址–&gt;<a href="https://www.luogu.com.cn/contest/113297">练习赛2</a>。</p>
<p>AK了，但是第三题没有SPJ，有点不爽。</p>
<h2 id="练习赛3（2023-6-11）"><a href="#练习赛3（2023-6-11）" class="headerlink" title="练习赛3（2023.6.11）"></a><strong>练习赛3（2023.6.11）</strong></h2><p>练习地址–&gt;<a href="https://www.luogu.com.cn/contest/113351">练习赛3</a>。</p>
<p>感觉平时做题的时候都是一眼题？一上学校OJ或者离线就是做不出来的题。。。</p>
<p>是题目太水了吗？</p>
<p><a href="https://www.luogu.com.cn/problem/P4330">题目1</a>，<a href="https://www.luogu.com.cn/problem/P6333">题目2</a>，<a href="https://www.luogu.com.cn/problem/P6429">题目3</a>，<a href="https://www.luogu.com.cn/problem/P7166">题目4</a>。</p>
<p>补充：D题当时没做起，一直在想 $o(n^2)$ 的做法，就是绕不开，最后看了一下题解。</p>
<ul>
<li>1、如果A选手最高排名高于B选手最高排名，那么一定A赢，双指针弄一下就可以了。</li>
<li>2、如果某些选手最高排名相同，那么这些选手不超过3位（3个场地），枚举一下即可。</li>
</ul>
<p>Updating…</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>年总结</tag>
      </tags>
  </entry>
  <entry>
    <title>K-D Tree</title>
    <url>/2024/02/10/K-D-Tree/</url>
    <content><![CDATA[<h1 id="K-D-Tree"><a href="#K-D-Tree" class="headerlink" title="K-D Tree"></a>K-D Tree</h1><p>K-D 树存储了 $K$ 维空间下 $n$ 个点的信息，我们可以在树上执行若干操作和若干查询，下面记录了一些常见的用法。</p>
<h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>首先给出 K-D 树的一个形态（第一幅图是平面，第二幅图是构建出来的树）：</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/lft2zo8y.png"></p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/j1zfic0r.png"></p>
<p>我们发现，对于第 $i$ 个点，我们可以按照 $x$ 坐标排序分成两棵子树，也可以按照 $y$ 坐标排序分成两棵子树，但是为了确保树高，所以一般选取排序之后的中位数作为根节点，然后子树递归建立即可，类似于线段树。</p>
<p>因为要取中位数，所以我们可以通过 <code>sort</code> 选取，或者 <code>nth_element</code> 选取，前一个函数是 $\log$ 的排序，后一个函数是根据排名查找数，是线性的，因此，如果用后者构建的话，时间复杂度是 $O(n \log n)$ 的。</p>
<p>当然，有时候为了减少常数，故选择划分的维度为当前所有维度中方差最大的，这样的话可能会少访问一些点。</p>
<p>建树的代码如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(ll l,ll r,ll &amp;p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">		p=l,tr[p].self=tr[p].maxn=tr[p].minn=d[l];</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">double</span> p1 = <span class="number">0</span>,p2 = <span class="number">0</span>,f1 = <span class="number">0</span>,f2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=l;i&lt;=r;i++) p1+=d[i].x,p2+=d[i].y;</span><br><span class="line">	p1/=(r-l+<span class="number">1</span>),p2/=(r-l+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=l;i&lt;=r;i++) f1+=(d[i].x-p1)*(d[i].x-p1),f2+=(d[i].y-p2)*(d[i].y-p2);</span><br><span class="line">	ll mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span>(f1&gt;f2) <span class="built_in">nth_element</span>(d+l,d+mid,d+r+<span class="number">1</span>,cmp1),p = mid,tr[p].d = <span class="number">1</span>,tr[p].self = d[p];</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">nth_element</span>(d+l,d+mid,d+r+<span class="number">1</span>,cmp2),p = mid,tr[p].d = <span class="number">2</span>,tr[p].self = d[p];</span><br><span class="line">	<span class="built_in">build</span>(l,mid<span class="number">-1</span>,tr[p].l),<span class="built_in">build</span>(mid+<span class="number">1</span>,r,tr[p].r);</span><br><span class="line">	<span class="built_in">pushup</span>(p);</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果不想用方差的话，当然也可以 $x,y,z,\dots$ 交替选择建树，时间复杂度也不会有太大的影响（邻域查询除外）。’</p>
<h2 id="邻域查询"><a href="#邻域查询" class="headerlink" title="邻域查询"></a>邻域查询</h2><p>查找与某个点最接近（或者最远）的点的距离是多少。（曼哈顿距离或者欧拉距离）</p>
<p>为了方便，以下用最接近作为例子，求最远也不难，但是更建议使用凸包。</p>
<p>首先每个节点可以额外维护一个矩形的信息，也就是在它的子树中 $x$ 最小&#x2F;大是多少，$y$ 最小&#x2F;大是多少。</p>
<p>当然也可以扩展到 $k$ 维的情况。</p>
<p>每次查询的时候首先判断这个矩形中的点与查找点的最短距离是多少，如果大于当前查询到的答案，直接返回不继续递归了。</p>
<p>否则用根节点所代表的点与查找点的距离更新答案，递归即可。</p>
<p>有一个小优化：</p>
<blockquote>
<p>如果左子树的矩形到查找点的最小距离小于右子树的矩形到查找点的最小距离，那么先递归左子树，再递归右子树。</p>
</blockquote>
<blockquote>
<p>否则先递归右子树，再递归左子树。</p>
</blockquote>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>最坏 $O(n)$，但是不失为一种优秀的偏分算法。</p>
<p>期望是在 $O(\sqrt{n})$ 级别的，一般情况下卡不掉，实际可能会被极端数据卡满。</p>
<p>下面是最近点对的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 500005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;ll x,y;&#125;d[N];</span><br><span class="line"><span class="function">point <span class="title">min</span><span class="params">(point a,point b)</span></span>&#123;<span class="keyword">return</span> (point)&#123;<span class="built_in">min</span>(a.x,b.x),<span class="built_in">min</span>(a.y,b.y)&#125;;&#125;</span><br><span class="line"><span class="function">point <span class="title">max</span><span class="params">(point a,point b)</span></span>&#123;<span class="keyword">return</span> (point)&#123;<span class="built_in">max</span>(a.x,b.x),<span class="built_in">max</span>(a.y,b.y)&#125;;&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(point a,point b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a.x==b.x) <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">	<span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span><span class="params">(point a,point b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a.y==b.y) <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">	<span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line">	point self,maxn,minn;</span><br><span class="line">	ll d,l,r;</span><br><span class="line">&#125;tr[N];</span><br><span class="line">ll n,i,root,x,y,ans=LLONG_MAX;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">	tr[p].maxn = tr[p].minn = tr[p].self;</span><br><span class="line">	<span class="keyword">if</span>(tr[p].l) tr[p].maxn = <span class="built_in">max</span>(tr[p].maxn,tr[tr[p].l].maxn),tr[p].minn = <span class="built_in">min</span>(tr[p].minn,tr[tr[p].l].minn);</span><br><span class="line">	<span class="keyword">if</span>(tr[p].r) tr[p].maxn = <span class="built_in">max</span>(tr[p].maxn,tr[tr[p].r].maxn),tr[p].minn = <span class="built_in">min</span>(tr[p].minn,tr[tr[p].r].minn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(ll l,ll r,ll &amp;p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">		p=l,tr[p].self=tr[p].maxn=tr[p].minn=d[l];</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">double</span> p1 = <span class="number">0</span>,p2 = <span class="number">0</span>,f1 = <span class="number">0</span>,f2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=l;i&lt;=r;i++) p1+=d[i].x,p2+=d[i].y;</span><br><span class="line">	p1/=(r-l+<span class="number">1</span>),p2/=(r-l+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=l;i&lt;=r;i++) f1+=(d[i].x-p1)*(d[i].x-p1),f2+=(d[i].y-p2)*(d[i].y-p2);</span><br><span class="line">	ll mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span>(f1&gt;f2) <span class="built_in">nth_element</span>(d+l,d+mid,d+r+<span class="number">1</span>,cmp1),p = mid,tr[p].d = <span class="number">1</span>,tr[p].self = d[p];</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">nth_element</span>(d+l,d+mid,d+r+<span class="number">1</span>,cmp2),p = mid,tr[p].d = <span class="number">2</span>,tr[p].self = d[p];</span><br><span class="line">	<span class="built_in">build</span>(l,mid<span class="number">-1</span>,tr[p].l),<span class="built_in">build</span>(mid+<span class="number">1</span>,r,tr[p].r);</span><br><span class="line">	<span class="built_in">pushup</span>(p);</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(ll id,ll x,ll y,ll p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(p!=id) ans = <span class="built_in">min</span>(ans,<span class="built_in">abs</span>(x-tr[p].self.x)*<span class="built_in">abs</span>(x-tr[p].self.x)+<span class="built_in">abs</span>(y-tr[p].self.y)*<span class="built_in">abs</span>(y-tr[p].self.y));</span><br><span class="line">	ll disx = <span class="built_in">max</span>(tr[p].minn.x-x,x-tr[p].maxn.x),disy = <span class="built_in">max</span>(tr[p].minn.y-y,y-tr[p].maxn.y);</span><br><span class="line">	disx = <span class="built_in">max</span>(disx,<span class="number">0ll</span>),disy = <span class="built_in">max</span>(disy,<span class="number">0ll</span>);</span><br><span class="line">	<span class="keyword">if</span>(disx*disx+disy*disy&gt;=ans) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="built_in">solve</span>(id,x,y,tr[p].l),<span class="built_in">solve</span>(id,x,y,tr[p].r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;d[i].x&gt;&gt;d[i].y;</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,n,root);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">solve</span>(i,d[i].x,d[i].y,root);</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="高维空间的操作"><a href="#高维空间的操作" class="headerlink" title="高维空间的操作"></a>高维空间的操作</h2><p>以二维空间为例，我们可以像线段树那样维护可合并信息，即只要提供运算 $+$ 和某个类型 $op$，并且满足 $(a+b)+c&#x3D;a+(b+c)$ 就可以维护。</p>
<p>例如：矩阵加，矩阵乘，矩阵最大子段和等都可以维护。</p>
<p>我们以基本的矩阵加为例，支持矩阵加和矩阵求和。</p>
<p>首先从根节点开始递归，如果当前节点所记录的矩形与查找的矩形无交集，直接返回。</p>
<p>否则如果当前子树节点都在查找矩形中，打上子树的标记即可。</p>
<p>否则判断根节点在不在查找矩形中，在就打标记，继续递归左右子树查询。</p>
<p>还有，记得 <code>pushdown</code> 和 <code>pushup</code>，其他跟线段树没什么区别。</p>
<p><a href="https://www.luogu.com.cn/problem/P6349">P6349 [PA2011] Kangaroos</a> 是一道维护最大子段和的题目，可以做一下。</p>
<h3 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>如果是对于 $k$ 维的空间进行查询和修改，那么时间复杂度经证明是 $O(n^{1-\frac 1k})$ 的。</p>
<p>下面放一下 P6349 的卡常代码和技巧：</p>
<ul>
<li><p>尽量用一层成员运算符。</p>
</li>
<li><p>快读快写。</p>
</li>
<li><p>求矩形的时候可以直接 <code>max</code> 函数里面放 $3$ 个参数：自己的，左儿子的，右儿子的，而不是判断有没有左儿子之后再来取 <code>max</code> 或者 <code>min</code>。（$i&#x3D;0$ 的时候可以先赋 $\text{inf}$ 或者 $-\text{inf}$）</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 1000000000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;<span class="type">int</span> x,y,id;&#125;d[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">poly</span>&#123;<span class="type">int</span> l,r,m,x;&#125;emp;</span><br><span class="line"><span class="keyword">inline</span> poly <span class="keyword">operator</span>+(poly &amp;a,poly &amp;b)&#123;<span class="keyword">return</span> (poly)&#123;<span class="built_in">max</span>(a.l,(a.l==a.x)*(a.x+b.l)),<span class="built_in">max</span>(b.r,(b.r==b.x)*(b.x+a.r)),<span class="built_in">max</span>(&#123;a.m,b.m,a.r+b.l&#125;),a.x+b.x&#125;;&#125;</span><br><span class="line"><span class="function">point <span class="title">min</span><span class="params">(point a,point b)</span></span>&#123;<span class="keyword">return</span> (point)&#123;<span class="built_in">min</span>(a.x,b.x),<span class="built_in">min</span>(a.y,b.y)&#125;;&#125;</span><br><span class="line"><span class="function">point <span class="title">max</span><span class="params">(point a,point b)</span></span>&#123;<span class="keyword">return</span> (point)&#123;<span class="built_in">max</span>(a.x,b.x),<span class="built_in">max</span>(a.y,b.y)&#125;;&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(point a,point b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a.x==b.x) <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">	<span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span><span class="params">(point a,point b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a.y==b.y) <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">	<span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line">	point self,maxn,minn;</span><br><span class="line">	<span class="type">int</span> d,l,r;</span><br><span class="line">	poly cnt,tag;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="type">int</span> n,m,i,root,opt,x[N],y[N],ans[N],CNT;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">	tr[p].maxn = tr[p].minn = tr[p].self = d[p];</span><br><span class="line">	<span class="keyword">if</span>(tr[p].l) tr[p].maxn = <span class="built_in">max</span>(tr[p].maxn,tr[tr[p].l].maxn),tr[p].minn = <span class="built_in">min</span>(tr[p].minn,tr[tr[p].l].minn);</span><br><span class="line">	<span class="keyword">if</span>(tr[p].r) tr[p].maxn = <span class="built_in">max</span>(tr[p].maxn,tr[tr[p].r].maxn),tr[p].minn = <span class="built_in">min</span>(tr[p].minn,tr[tr[p].r].minn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> &amp;p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">		p=l,tr[p].self=tr[p].maxn=tr[p].minn=d[l];</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">double</span> p1 = <span class="number">0</span>,p2 = <span class="number">0</span>,f1 = <span class="number">0</span>,f2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++) p1+=d[i].x,p2+=d[i].y;</span><br><span class="line">	p1/=(r-l+<span class="number">1</span>),p2/=(r-l+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++) f1+=(d[i].x-p1)*(d[i].x-p1),f2+=(d[i].y-p2)*(d[i].y-p2);</span><br><span class="line">	<span class="type">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span>(f1&gt;f2) <span class="built_in">nth_element</span>(d+l,d+mid,d+r+<span class="number">1</span>,cmp1),p = mid,tr[p].d = <span class="number">1</span>,tr[p].self = d[p];</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">nth_element</span>(d+l,d+mid,d+r+<span class="number">1</span>,cmp2),p = mid,tr[p].d = <span class="number">2</span>,tr[p].self = d[p];</span><br><span class="line">	<span class="built_in">build</span>(l,mid<span class="number">-1</span>,tr[p].l),<span class="built_in">build</span>(mid+<span class="number">1</span>,r,tr[p].r);</span><br><span class="line">	<span class="built_in">pushup</span>(p);</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(<span class="type">int</span> p,poly a)</span></span>&#123;tr[p].cnt = tr[p].cnt+a,tr[p].tag = tr[p].tag+a;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> l1,<span class="type">int</span> r1,<span class="type">int</span> l2,<span class="type">int</span> r2,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> l1&lt;=x&amp;&amp;x&lt;=r1&amp;&amp;l2&lt;=y&amp;&amp;y&lt;=r2;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l1,<span class="type">int</span> r1,<span class="type">int</span> l2,<span class="type">int</span> r2,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">check</span>(l1,r1,l2,r2,tr[p].minn.x,tr[p].minn.y)&amp;&amp;<span class="built_in">check</span>(l1,r1,l2,r2,tr[p].maxn.x,tr[p].maxn.y))&#123;</span><br><span class="line">		tr[p].cnt.x++,tr[p].cnt.r++,tr[p].cnt.m=<span class="built_in">max</span>(tr[p].cnt.m,tr[p].cnt.r);</span><br><span class="line">		<span class="keyword">if</span>(tr[p].cnt.m==tr[p].cnt.x) tr[p].cnt.l++;</span><br><span class="line">		tr[p].tag.x++,tr[p].tag.r++,tr[p].tag.m=<span class="built_in">max</span>(tr[p].tag.m,tr[p].tag.r);</span><br><span class="line">		<span class="keyword">if</span>(tr[p].tag.m==tr[p].tag.x) tr[p].tag.l++;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(tr[p].maxn.y&lt;l2||r2&lt;tr[p].minn.y||tr[p].maxn.x&lt;l1||r1&lt;tr[p].minn.x)&#123;</span><br><span class="line">		tr[p].cnt.x++,tr[p].cnt.r=<span class="number">0</span>,tr[p].tag.x++,tr[p].tag.r=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(tr[p].tag.x!=<span class="number">0</span>) <span class="built_in">pushtag</span>(tr[p].l,tr[p].tag),<span class="built_in">pushtag</span>(tr[p].r,tr[p].tag),tr[p].tag = emp;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">check</span>(l1,r1,l2,r2,tr[p].self.x,tr[p].self.y)) tr[p].cnt.r++,tr[p].cnt.x++,tr[p].cnt.m=<span class="built_in">max</span>(tr[p].cnt.m,tr[p].cnt.r);</span><br><span class="line">	<span class="keyword">else</span> tr[p].cnt.r=<span class="number">0</span>,tr[p].cnt.x++;</span><br><span class="line">	<span class="keyword">if</span>(tr[p].l) <span class="built_in">solve</span>(l1,r1,l2,r2,tr[p].l);</span><br><span class="line">	<span class="keyword">if</span>(tr[p].r) <span class="built_in">solve</span>(l1,r1,l2,r2,tr[p].r);</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="built_in">pushtag</span>(tr[p].l,tr[p].tag),<span class="built_in">pushtag</span>(tr[p].r,tr[p].tag),tr[p].tag = emp,ans[tr[p].self.id]=tr[p].cnt.m;</span><br><span class="line">	<span class="built_in">query</span>(tr[p].l),<span class="built_in">query</span>(tr[p].r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//	freopen(&quot;5.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//	freopen(&quot;6.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;x[i]&gt;&gt;y[i];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++) cin&gt;&gt;d[i].x&gt;&gt;d[i].y,d[i].id=i;</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,m,root);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">solve</span>(<span class="number">1</span>,y[i],x[i],<span class="number">1000000000</span>,root);</span><br><span class="line">	<span class="built_in">query</span>(root);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>插入一个节点只需要像平衡树那样找左儿子或者右儿子递归下去查找即可，当找到为空的地方直接传指针新建节点就好。</p>
<p>但是这样会有一个问题，树高不再严格 $O(\log)$，并且每个点不再是它子树内按照某维度排序的中位数，这样的话怎么办呢？</p>
<p>于是我们诞生了两种做法：</p>
<blockquote>
<p>万能的：二进制分组，每次插入一个节点到空树里面，然后如果有两棵树的大小相等，就把这两棵树的节点拿出来全部重新构建成一棵新的树，每个节点一定会被合并最多 $\log$ 次，每次合并是 $\log$ 的，因此时间复杂度为 $O(\log^2)$。（例如 AC 自动机就可以这样进行操作）</p>
</blockquote>
<blockquote>
<p>常数小的：采取替罪羊树的思想，当左（或者右）儿子节点的数量大于等于根节点的节点数量乘上一个阈值（一般是 $0.75$），那么就将这个子树暴力重构。（时间复杂度期望重构约 $\log$ 次）</p>
</blockquote>
<p>以下展示 <a href="https://www.luogu.com.cn/problem/P4169">P4169 天使玩偶&#x2F;SJY摆棋子</a> 的替罪羊树构建版本：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 600005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;<span class="type">int</span> x,y;&#125;d[N];</span><br><span class="line"><span class="function">point <span class="title">min</span><span class="params">(point a,point b)</span></span>&#123;<span class="keyword">return</span> (point)&#123;<span class="built_in">min</span>(a.x,b.x),<span class="built_in">min</span>(a.y,b.y)&#125;;&#125;</span><br><span class="line"><span class="function">point <span class="title">max</span><span class="params">(point a,point b)</span></span>&#123;<span class="keyword">return</span> (point)&#123;<span class="built_in">max</span>(a.x,b.x),<span class="built_in">max</span>(a.y,b.y)&#125;;&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;<span class="keyword">return</span> d[a].x&lt;d[b].x;&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;<span class="keyword">return</span> d[a].y&lt;d[b].y;&#125; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line">	point self,maxn,minn;</span><br><span class="line">	<span class="type">int</span> d,l,r,siz;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="type">int</span> n,m,i,root,ttt,tot,opt,x,y,ans,l[N],r[N],g[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">	tr[p].maxn = tr[p].minn = tr[p].self = d[p];</span><br><span class="line">	tr[p].siz = tr[tr[p].l].siz + tr[tr[p].r].siz + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(tr[p].l) tr[p].maxn = <span class="built_in">max</span>(tr[p].maxn,tr[tr[p].l].maxn),tr[p].minn = <span class="built_in">min</span>(tr[p].minn,tr[tr[p].l].minn);</span><br><span class="line">	<span class="keyword">if</span>(tr[p].r) tr[p].maxn = <span class="built_in">max</span>(tr[p].maxn,tr[tr[p].r].maxn),tr[p].minn = <span class="built_in">min</span>(tr[p].minn,tr[tr[p].r].minn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> &amp;p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;r)&#123;</span><br><span class="line">		p=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">		p=g[l],tr[p].self=tr[p].maxn=tr[p].minn=d[g[l]],tr[p].l=tr[p].r=<span class="number">0</span>,tr[p].siz=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">double</span> p1 = <span class="number">0</span>,p2 = <span class="number">0</span>,f1 = <span class="number">0</span>,f2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++) p1+=d[g[i]].x,p2+=d[g[i]].y;</span><br><span class="line">	p1/=(r-l+<span class="number">1</span>),p2/=(r-l+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++) f1+=(d[g[i]].x-p1)*(d[g[i]].x-p1),f2+=(d[g[i]].y-p2)*(d[g[i]].y-p2);</span><br><span class="line">	<span class="type">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span>(f1&gt;f2) <span class="built_in">nth_element</span>(g+l,g+mid,g+r+<span class="number">1</span>,cmp1),p = g[mid],tr[p].d = <span class="number">1</span>,tr[p].self = d[p];</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">nth_element</span>(g+l,g+mid,g+r+<span class="number">1</span>,cmp2),p = g[mid],tr[p].d = <span class="number">2</span>,tr[p].self = d[p];</span><br><span class="line">	<span class="built_in">build</span>(l,mid<span class="number">-1</span>,tr[p].l),<span class="built_in">build</span>(mid+<span class="number">1</span>,r,tr[p].r);</span><br><span class="line">	<span class="built_in">pushup</span>(p);</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get_min</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="number">0</span>) <span class="keyword">return</span> INT_MAX;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">max</span>(&#123;tr[p].minn.x-x,x-tr[p].maxn.x,<span class="number">0</span>&#125;)+<span class="built_in">max</span>(&#123;tr[p].minn.y-y,y-tr[p].maxn.y,<span class="number">0</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p) <span class="keyword">return</span> ;</span><br><span class="line">	ans = <span class="built_in">min</span>(ans,<span class="built_in">abs</span>(x-tr[p].self.x)+<span class="built_in">abs</span>(y-tr[p].self.y));</span><br><span class="line"><span class="comment">//	cout&lt;&lt;&quot;! &quot;&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;&quot; &quot;&lt;&lt;tr[p].self.x&lt;&lt;&quot; &quot;&lt;&lt;tr[p].self.y&lt;&lt;endl;</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">get_min</span>(p,x,y)&gt;=ans) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">get_min</span>(tr[p].l,x,y)&lt;<span class="built_in">get_min</span>(tr[p].r,x,y)) <span class="built_in">solve</span>(x,y,tr[p].l),<span class="built_in">solve</span>(x,y,tr[p].r);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">solve</span>(x,y,tr[p].r),<span class="built_in">solve</span>(x,y,tr[p].l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">char</span> buf[<span class="number">1000000</span>],*p=buf,*q=buf;</span><br><span class="line">	<span class="keyword">return</span> p==q&amp;&amp;(q=(p=buf)+<span class="built_in">fread</span>(buf,<span class="number">1</span>,<span class="number">1000000</span>,stdin),p==q)?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)res=res*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> obuf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p3=obuf; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span>&#123; </span><br><span class="line">	p3-obuf&lt;=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)?(*p3++=c):(<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout),p3=obuf,*p3++=c); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span></span>&#123; </span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">pc</span>(<span class="string">&#x27;-&#x27;</span>),x=-x; </span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">write</span>(x/<span class="number">10</span>); </span><br><span class="line">	<span class="built_in">pc</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">found</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p) <span class="keyword">return</span> ;</span><br><span class="line">	g[++ttt] = p;</span><br><span class="line">	<span class="built_in">found</span>(tr[p].l),<span class="built_in">found</span>(tr[p].r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rebuild</span><span class="params">(<span class="type">int</span> &amp;p)</span></span>&#123;</span><br><span class="line">	ttt=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">found</span>(p);</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,ttt,p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> &amp;p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p)&#123;</span><br><span class="line">		p=++tot,d[tot]=(point)&#123;x,y&#125;;</span><br><span class="line">		<span class="built_in">pushup</span>(p);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(tr[p].d==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&lt;=tr[p].self.x) <span class="built_in">insert</span>(x,y,tr[p].l);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">insert</span>(x,y,tr[p].r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(y&lt;=tr[p].self.y) <span class="built_in">insert</span>(x,y,tr[p].l);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">insert</span>(x,y,tr[p].r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">pushup</span>(p);</span><br><span class="line">	<span class="keyword">if</span>(tr[p].siz*<span class="number">0.75</span>&lt;=<span class="built_in">max</span>(tr[tr[p].l].siz,tr[tr[p].r].siz)) <span class="built_in">rebuild</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//	freopen(&quot;1.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">	n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) d[i].x=<span class="built_in">read</span>(),d[i].y=<span class="built_in">read</span>(),g[i]=i;</span><br><span class="line">	tot=n,ttt=n;</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,ttt,root);</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		opt=<span class="built_in">read</span>(),x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(opt==<span class="number">1</span>) <span class="built_in">insert</span>(x,y,root);</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			ans=INT_MAX;</span><br><span class="line">			<span class="built_in">solve</span>(x,y,root);</span><br><span class="line">			<span class="built_in">write</span>(ans),<span class="built_in">pc</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二进制分组版本：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 600005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;<span class="type">int</span> x,y;&#125;d[N];</span><br><span class="line"><span class="function">point <span class="title">min</span><span class="params">(point a,point b)</span></span>&#123;<span class="keyword">return</span> (point)&#123;<span class="built_in">min</span>(a.x,b.x),<span class="built_in">min</span>(a.y,b.y)&#125;;&#125;</span><br><span class="line"><span class="function">point <span class="title">max</span><span class="params">(point a,point b)</span></span>&#123;<span class="keyword">return</span> (point)&#123;<span class="built_in">max</span>(a.x,b.x),<span class="built_in">max</span>(a.y,b.y)&#125;;&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(point a,point b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a.x==b.x) <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">	<span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span><span class="params">(point a,point b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a.y==b.y) <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">	<span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line">	point self,maxn,minn;</span><br><span class="line">	<span class="type">int</span> d,l,r;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="type">int</span> n,m,i,root[N],tot,root_tot,opt,x,y,ans,l[N],r[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">	tr[p].maxn = tr[p].minn = tr[p].self;</span><br><span class="line">	<span class="keyword">if</span>(tr[p].l) tr[p].maxn = <span class="built_in">max</span>(tr[p].maxn,tr[tr[p].l].maxn),tr[p].minn = <span class="built_in">min</span>(tr[p].minn,tr[tr[p].l].minn);</span><br><span class="line">	<span class="keyword">if</span>(tr[p].r) tr[p].maxn = <span class="built_in">max</span>(tr[p].maxn,tr[tr[p].r].maxn),tr[p].minn = <span class="built_in">min</span>(tr[p].minn,tr[tr[p].r].minn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> &amp;p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;r)&#123;</span><br><span class="line">		p=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">		p=l,tr[p].self=tr[p].maxn=tr[p].minn=d[l],tr[p].l=tr[p].r=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">double</span> p1 = <span class="number">0</span>,p2 = <span class="number">0</span>,f1 = <span class="number">0</span>,f2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++) p1+=d[i].x,p2+=d[i].y;</span><br><span class="line">	p1/=(r-l+<span class="number">1</span>),p2/=(r-l+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++) f1+=(d[i].x-p1)*(d[i].x-p1),f2+=(d[i].y-p2)*(d[i].y-p2);</span><br><span class="line">	<span class="type">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span>(f1&gt;f2) <span class="built_in">nth_element</span>(d+l+<span class="number">1</span>,d+mid+<span class="number">1</span>,d+r+<span class="number">1</span>,cmp1),p = mid,tr[p].d = <span class="number">1</span>,tr[p].self = d[p];</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">nth_element</span>(d+l+<span class="number">1</span>,d+mid+<span class="number">1</span>,d+r+<span class="number">1</span>,cmp2),p = mid,tr[p].d = <span class="number">2</span>,tr[p].self = d[p];</span><br><span class="line">	<span class="built_in">build</span>(l,mid<span class="number">-1</span>,tr[p].l),<span class="built_in">build</span>(mid+<span class="number">1</span>,r,tr[p].r);</span><br><span class="line">	<span class="built_in">pushup</span>(p);</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get_min</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="number">0</span>) <span class="keyword">return</span> INT_MAX;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">max</span>(&#123;tr[p].minn.x-x,x-tr[p].maxn.x,<span class="number">0</span>&#125;)+<span class="built_in">max</span>(&#123;tr[p].minn.y-y,y-tr[p].maxn.y,<span class="number">0</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p) <span class="keyword">return</span> ;</span><br><span class="line">	ans = <span class="built_in">min</span>(ans,<span class="built_in">abs</span>(x-tr[p].self.x)+<span class="built_in">abs</span>(y-tr[p].self.y));</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">get_min</span>(p,x,y)&gt;=ans) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">get_min</span>(tr[p].l,x,y)&lt;<span class="built_in">get_min</span>(tr[p].r,x,y)) <span class="built_in">solve</span>(x,y,tr[p].l),<span class="built_in">solve</span>(x,y,tr[p].r);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">solve</span>(x,y,tr[p].r),<span class="built_in">solve</span>(x,y,tr[p].l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">char</span> buf[<span class="number">1000000</span>],*p=buf,*q=buf;</span><br><span class="line">	<span class="keyword">return</span> p==q&amp;&amp;(q=(p=buf)+<span class="built_in">fread</span>(buf,<span class="number">1</span>,<span class="number">1000000</span>,stdin),p==q)?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)res=res*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> obuf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p3=obuf; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span>&#123; </span><br><span class="line">	p3-obuf&lt;=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)?(*p3++=c):(<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout),p3=obuf,*p3++=c); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span></span>&#123; </span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">pc</span>(<span class="string">&#x27;-&#x27;</span>),x=-x; </span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">write</span>(x/<span class="number">10</span>); </span><br><span class="line">	<span class="built_in">pc</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	d[++tot] = (point)&#123;x,y&#125;,root_tot++;</span><br><span class="line">	l[root_tot] = r[root_tot] = tot,<span class="built_in">build</span>(tot,tot,root[root_tot]);</span><br><span class="line">	<span class="keyword">while</span>(root_tot&gt;=<span class="number">2</span>&amp;&amp;(r[root_tot<span class="number">-1</span>]-l[root_tot<span class="number">-1</span>])==(r[root_tot]-l[root_tot]))&#123;</span><br><span class="line">		root_tot--;</span><br><span class="line">		<span class="built_in">build</span>(l[root_tot],r[root_tot+<span class="number">1</span>],root[root_tot]);</span><br><span class="line">		r[root_tot] = r[root_tot+<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>(),<span class="built_in">insert</span>(x,y);</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		opt=<span class="built_in">read</span>(),x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(opt==<span class="number">1</span>) <span class="built_in">insert</span>(x,y);</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			ans=INT_MAX;</span><br><span class="line">			<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=root_tot;i++) <span class="built_in">solve</span>(x,y,root[i]);</span><br><span class="line">			<span class="built_in">write</span>(ans),<span class="built_in">pc</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="树套树"><a href="#树套树" class="headerlink" title="树套树"></a>树套树</h2><p>树套树就不多说了，常见的是线段树套 K-D Tree，可以参见 <a href="https://www.luogu.com.cn/problem/P4848">P4848 崂山白花蛇草水</a>。</p>
<p>大概就是线段树的每个节点维护一棵 K-D Tree，最后在线段树上二分，二分的过程在 K-D Tree 上查询即可。</p>
<p>修改就暴力替罪羊树重构即可。</p>
<p>时间复杂度 $O(n\sqrt{n}\log n)$，不知道怎么过的。。。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 2600005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;<span class="type">int</span> d,l,r,siz,maxnx,minnx,maxny,minny,selfx,selfy;&#125;tr[N];</span><br><span class="line"><span class="type">int</span> n,m,i,root,ttt,tot,opt,x,y,z,k,l,ans,g[N],las,tr_tot,d[N][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">namespace</span> kdt&#123;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">		tr[p].siz = tr[tr[p].l].siz + tr[tr[p].r].siz + <span class="number">1</span>;</span><br><span class="line">		tr[p].maxny=<span class="built_in">max</span>(&#123;tr[p].selfy,tr[tr[p].l].maxny,tr[tr[p].r].maxny&#125;);</span><br><span class="line">		tr[p].maxnx=<span class="built_in">max</span>(&#123;tr[p].selfx,tr[tr[p].l].maxnx,tr[tr[p].r].maxnx&#125;);</span><br><span class="line">		tr[p].minny=<span class="built_in">min</span>(&#123;tr[p].selfy,tr[tr[p].l].minny,tr[tr[p].r].minny&#125;);</span><br><span class="line">		tr[p].minnx=<span class="built_in">min</span>(&#123;tr[p].selfx,tr[tr[p].l].minnx,tr[tr[p].r].minnx&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> de,<span class="type">int</span> &amp;p)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(l&gt;r)&#123;</span><br><span class="line">			p=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">			p = g[l],tr[p].l = tr[p].r = <span class="number">0</span>,tr[p].siz = <span class="number">1</span>;</span><br><span class="line">			tr[p].maxnx = tr[p].minnx = tr[p].selfx = d[p][<span class="number">0</span>];</span><br><span class="line">			tr[p].maxny = tr[p].minny = tr[p].selfy = d[p][<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">		<span class="built_in">nth_element</span>(g+l,g+mid,g+r+<span class="number">1</span>,[&amp;](<span class="type">int</span> a,<span class="type">int</span> b)&#123;<span class="keyword">return</span> d[a][de]&lt;d[b][de];&#125;);</span><br><span class="line">		p = g[mid],tr[p].d = de,tr[p].selfx = d[p][<span class="number">0</span>],tr[p].selfy = d[p][<span class="number">1</span>];</span><br><span class="line">		<span class="built_in">build</span>(l,mid<span class="number">-1</span>,de^<span class="number">1</span>,tr[p].l),<span class="built_in">build</span>(mid+<span class="number">1</span>,r,de^<span class="number">1</span>,tr[p].r);</span><br><span class="line">		<span class="built_in">pushup</span>(p);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l1,<span class="type">int</span> r1,<span class="type">int</span> l2,<span class="type">int</span> r2,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(l1&lt;=tr[p].minnx&amp;&amp;tr[p].minnx&lt;=r1&amp;&amp;l2&lt;=tr[p].minny&amp;&amp;tr[p].minny&lt;=r2&amp;&amp;l1&lt;=tr[p].maxnx&amp;&amp;tr[p].maxnx&lt;=r1&amp;&amp;l2&lt;=tr[p].maxny&amp;&amp;tr[p].maxny&lt;=r2) <span class="keyword">return</span> tr[p].siz;</span><br><span class="line">		<span class="keyword">if</span>(tr[p].maxny&lt;l2||r2&lt;tr[p].minny||tr[p].maxnx&lt;l1||r1&lt;tr[p].minnx) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(l1&lt;=tr[p].selfx&amp;&amp;tr[p].selfx&lt;=r1&amp;&amp;l2&lt;=tr[p].selfy&amp;&amp;tr[p].selfy&lt;=r2) ans++;</span><br><span class="line">		<span class="keyword">if</span>(tr[p].l) ans += <span class="built_in">solve</span>(l1,r1,l2,r2,tr[p].l);</span><br><span class="line">		<span class="keyword">if</span>(tr[p].r) ans += <span class="built_in">solve</span>(l1,r1,l2,r2,tr[p].r);</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">found</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!p) <span class="keyword">return</span> ;</span><br><span class="line">		g[++ttt] = p,<span class="built_in">found</span>(tr[p].l),<span class="built_in">found</span>(tr[p].r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">rebuild</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">int</span> de)</span></span>&#123;ttt=<span class="number">0</span>,<span class="built_in">found</span>(p),<span class="built_in">build</span>(<span class="number">1</span>,ttt,de,p);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> de,<span class="type">int</span> &amp;p)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!p)&#123;</span><br><span class="line">			p=++tot,tr[p].selfx=d[tot][<span class="number">0</span>]=x,tr[p].selfy=d[tot][<span class="number">1</span>]=y,<span class="built_in">pushup</span>(p);</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(tr[p].d==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(x&lt;=tr[p].selfx) <span class="built_in">insert</span>(x,y,de^<span class="number">1</span>,tr[p].l);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">insert</span>(x,y,de^<span class="number">1</span>,tr[p].r);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(y&lt;=tr[p].selfy) <span class="built_in">insert</span>(x,y,de^<span class="number">1</span>,tr[p].l);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">insert</span>(x,y,de^<span class="number">1</span>,tr[p].r);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">pushup</span>(p);</span><br><span class="line">		<span class="keyword">if</span>(tr[p].siz&gt;=<span class="number">4</span>&amp;&amp;tr[p].siz*<span class="number">4</span>&lt;<span class="built_in">max</span>(tr[tr[p].l].siz,tr[tr[p].r].siz)*<span class="number">5</span>) <span class="built_in">rebuild</span>(p,de);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;<span class="type">int</span> l,r,root;&#125;trr[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">char</span> buf[<span class="number">1000000</span>],*p=buf,*q=buf;</span><br><span class="line">	<span class="keyword">return</span> p==q&amp;&amp;(q=(p=buf)+<span class="built_in">fread</span>(buf,<span class="number">1</span>,<span class="number">1000000</span>,stdin),p==q)?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)res=res*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> obuf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p3=obuf; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span>&#123; </span><br><span class="line">	p3-obuf&lt;=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)?(*p3++=c):(<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout),p3=obuf,*p3++=c); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">write</span>(x/<span class="number">10</span>);</span><br><span class="line">	<span class="built_in">pc</span>(x%<span class="number">10</span>^<span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> s,<span class="type">int</span> t,<span class="type">int</span> &amp;p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p) p=++tr_tot;</span><br><span class="line">	kdt::<span class="built_in">insert</span>(l,r,<span class="number">0</span>,trr[p].root);</span><br><span class="line">	<span class="keyword">if</span>(s==t) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=(s+t)/<span class="number">2</span>) <span class="built_in">add</span>(l,r,x,s,(s+t)/<span class="number">2</span>,trr[p].l);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">add</span>(l,r,x,(s+t)/<span class="number">2</span>+<span class="number">1</span>,t,trr[p].r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l1,<span class="type">int</span> l2,<span class="type">int</span> r1,<span class="type">int</span> r2,<span class="type">int</span> k,<span class="type">int</span> s,<span class="type">int</span> t,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(s==t) <span class="keyword">return</span> s;</span><br><span class="line">	<span class="type">int</span> temp = kdt::<span class="built_in">solve</span>(l1,l2,r1,r2,trr[trr[p].r].root);</span><br><span class="line">	<span class="keyword">if</span>(temp&gt;=k) <span class="keyword">return</span> <span class="built_in">query</span>(l1,l2,r1,r2,k,(s+t)/<span class="number">2</span>+<span class="number">1</span>,t,trr[p].r);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(l1,l2,r1,r2,k-temp,s,(s+t)/<span class="number">2</span>,trr[p].l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	tr[<span class="number">0</span>].minnx = tr[<span class="number">0</span>].minny = INT_MAX,tr[<span class="number">0</span>].maxnx = tr[<span class="number">0</span>].maxny = INT_MIN;</span><br><span class="line">	n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		opt=<span class="built_in">read</span>(),x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>();</span><br><span class="line">		x^=las,y^=las;</span><br><span class="line">		<span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">			z=<span class="built_in">read</span>(),z^=las;</span><br><span class="line">			<span class="built_in">add</span>(x,y,z,<span class="number">0</span>,<span class="number">1e9</span>,root);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			z=<span class="built_in">read</span>(),k=<span class="built_in">read</span>(),l=<span class="built_in">read</span>();</span><br><span class="line">			z^=las,k^=las,l^=las;</span><br><span class="line">			las=<span class="built_in">query</span>(x,z,y,k,l,<span class="number">0</span>,<span class="number">1e9</span>,root);</span><br><span class="line">			<span class="keyword">if</span>(las) <span class="built_in">write</span>(las),<span class="built_in">pc</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">pc</span>(<span class="string">&#x27;N&#x27;</span>),<span class="built_in">pc</span>(<span class="string">&#x27;A&#x27;</span>),<span class="built_in">pc</span>(<span class="string">&#x27;I&#x27;</span>),<span class="built_in">pc</span>(<span class="string">&#x27;V&#x27;</span>),<span class="built_in">pc</span>(<span class="string">&#x27;E&#x27;</span>),<span class="built_in">pc</span>(<span class="string">&#x27;!&#x27;</span>),<span class="built_in">pc</span>(<span class="string">&#x27;O&#x27;</span>),<span class="built_in">pc</span>(<span class="string">&#x27;R&#x27;</span>),<span class="built_in">pc</span>(<span class="string">&#x27;Z&#x27;</span>),<span class="built_in">pc</span>(<span class="string">&#x27;z&#x27;</span>),<span class="built_in">pc</span>(<span class="string">&#x27;y&#x27;</span>),<span class="built_in">pc</span>(<span class="string">&#x27;z&#x27;</span>),<span class="built_in">pc</span>(<span class="string">&#x27;.&#x27;</span>),<span class="built_in">pc</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数据结构</tag>
        <tag>K-D Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>后缀数组 &amp; 后缀自动机</title>
    <url>/2024/04/23/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84-%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="后缀数组（SA）"><a href="#后缀数组（SA）" class="headerlink" title="后缀数组（SA）"></a>后缀数组（SA）</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>给定一个字符串 $S{1 \dots n}$，你需要对这个字符串的 $n$ 个后缀按照字典序排序，排序后的下标数组就是 $sa_i$，也即后缀数组 Suffix-Array，每个后缀在 $sa$ 中的排名就是 $rk_i$，容易发现 $sa_{rk_i}&#x3D;i,rk_{sa_i}&#x3D;i$。</p>
<h2 id="构建方法"><a href="#构建方法" class="headerlink" title="构建方法"></a>构建方法</h2><p>首先，我们可以暴力排序，排序的时间复杂度是 $O(n \log n)$，每次字符串比较为 $O(\log n) \sim O(n)$ 的，总时间复杂度为 $O(n \log^2 n) \sim O(n^2 \log n)$。</p>
<p>这里引出一种基于倍增的 $O(n \log n)$ 解法。</p>
<p>首先我们考虑将长度为 $1$ 的字符串进行排序，得到每个后缀取长度为 $\min(len,1)$ 的前缀的 $rk$ 和 $sa$ 数组，容易发现，此时 $rk$ 可能有重复。</p>
<p>然后我们将长度为 $1$ 的字符串和长度为 $2$ 的字符串拼在一起排序，得到每个后缀取长度为 $\min(len,1+2&#x3D;3)$ 的前缀的 $rk$ 和 $sa$ 数组。</p>
<p>直到 $rk$ 中的数字都不重复即可。</p>
<p>因为 $2^0 + 2^1 +\dots +2^{\log_2 n} \ge n$，所以此过程最多执行 $O(\log n)$ 次，每次因为 $rk$ 的值域不大于 $n$，因此我们可以使用基数排序做到 $O(n \log n)$。</p>
<p>具体的过程参见下图，图片来源于 <a href="https://oi.wiki/">OI-wiki</a>：</p>
<p><img src="/img/sa.png"></p>
<p>代码如下所示，里面有很多卡常的技巧：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> n,i,j,w,m=<span class="string">&#x27;z&#x27;</span>,p,id[N],sa[N],oldrk[N],rk[N],cnt[N],key[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> w)</span></span>&#123;<span class="keyword">return</span> oldrk[a]==oldrk[b]&amp;&amp;oldrk[a+w]==oldrk[b+w];&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;(s+<span class="number">1</span>),n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cnt[rk[i]=s[i]]++;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++) cnt[i]+=cnt[i<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) sa[cnt[s[i]]--]=i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=m;i++) cnt[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(w=<span class="number">1</span>;;w&lt;&lt;=<span class="number">1</span>,m=p)&#123;</span><br><span class="line">		<span class="keyword">for</span>(p=<span class="number">0</span>,i=n-w+<span class="number">1</span>;i&lt;=n;i++) id[++p]=i;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(sa[i]&gt;w) id[++p]=sa[i]-w;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cnt[key[i]=rk[id[i]]]++,oldrk[i]=rk[i];</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++) cnt[i]+=cnt[i<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">for</span>(i=n;i&gt;=<span class="number">1</span>;i--) sa[cnt[key[i]]--]=id[i];</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>,p=<span class="number">0</span>;i&lt;=n;i++) rk[sa[i]]=(<span class="built_in">cmp</span>(sa[i],sa[i<span class="number">-1</span>],w)?p:++p);</span><br><span class="line">		<span class="keyword">if</span>(p==n) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=m;i++) cnt[i]=<span class="number">0</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cout&lt;&lt;sa[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="height-数组"><a href="#height-数组" class="headerlink" title="height 数组"></a>height 数组</h2><p>定义 $s_i$ 为以 $i$ 号元素为开头的后缀，并且定义 $h_i$ 为 $\operatorname{lcp}(s_{sa_i},s_{sa_{i-1}})$，则 $h_1&#x3D;0$。</p>
<p>如何快速获取 $h$ 数组的值呢？</p>
<ul>
<li>引理：$h_{rk_i} \ge h_{rk_{i-1}}+1$。</li>
</ul>
<p>据此，我们可以 $O(n)$ 暴力求出 $h$ 的值。</p>
<blockquote>
<p>证明：<a href="https://oi.wiki/string/sa/#height-%E6%95%B0%E7%BB%84">后缀数组简介 - OI Wiki</a></p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    h[rk[i]]=<span class="built_in">max</span>(<span class="number">0</span>,h[rk[i<span class="number">-1</span>]]<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">while</span>(s[sa[rk[i]]+h[rk[i]]]==s[sa[rk[i]<span class="number">-1</span>]+h[rk[i]]]) h[rk[i]]++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="最小表示法"><a href="#最小表示法" class="headerlink" title="最小表示法"></a>最小表示法</h3><p>直接将字符串 $S$ 拼接两份变成 $SS$ 即可，然后就是模板后缀排序了。</p>
<h3 id="两个后缀的最长公共前缀"><a href="#两个后缀的最长公共前缀" class="headerlink" title="两个后缀的最长公共前缀"></a>两个后缀的最长公共前缀</h3><p>$\operatorname{lcp}(sa_i,sa_j) &#x3D; \min_{k&#x3D;i+1}^j h_k$。</p>
<p>可以感性理解一下，按照后缀排序之后，一个字符变动之后就不会再变回来了，这种情况也可以扩展到两个子串的最长公共前缀。</p>
<h3 id="本质不同子串的数量"><a href="#本质不同子串的数量" class="headerlink" title="本质不同子串的数量"></a>本质不同子串的数量</h3><p>子串就是后缀的前缀，所以可以枚举每个后缀，计算前缀总数，再减掉重复。</p>
<p>相邻两个后缀重复的部分就是 $h_i$，并且因为我们是按照后缀排了序，所以这样减去之后不会再有重复。</p>
<p>所以 $sum&#x3D; \dfrac {n(n-1)}{2}-\sum_{i&#x3D;2}^n h_i$。</p>
<h3 id="出现至少-k-次的子串的最大长度"><a href="#出现至少-k-次的子串的最大长度" class="headerlink" title="出现至少 k 次的子串的最大长度"></a>出现至少 k 次的子串的最大长度</h3><p>根据 $h$ 数组的定义，任取 $h$ 数组中连续的 $k-1$ 段就是一个答案，然后对所有答案取一个 $\max$ 即可。</p>
<h3 id="是否有某字符串在文本串中至少不重叠地出现了两次"><a href="#是否有某字符串在文本串中至少不重叠地出现了两次" class="headerlink" title="是否有某字符串在文本串中至少不重叠地出现了两次"></a>是否有某字符串在文本串中至少不重叠地出现了两次</h3><p>将 $h$ 按照大小为 $|s|$ 分成若干段，每段可以用 RMQ 获得最长的后缀和最短的后缀长度，然后判断这两个长度之差是否大于等于 $|s|$ 即可。</p>
<h3 id="连续的若干个相同子串"><a href="#连续的若干个相同子串" class="headerlink" title="连续的若干个相同子串"></a>连续的若干个相同子串</h3><p>设 $s_i$ 为以 $i$ 开始的后缀，$p_i$ 为以 $i$ 结束的前缀，以两个相同子串为例：</p>
<p>首先枚举长度 $|s|$，如果有连续的若干个相同子串的长度等于 $|s|$，那么其一定跨过所有 $s_i(i \bmod |s|&#x3D;0)$，于是设 $j$ 是枚举的长度，我们可以求出 $s_i$ 与 $s_{i+j}$ 的最长公共前缀 $a$ 和 $p_{i-1}$ 与 $p_{i+j-1}$ 的最长公共后缀 $b$，如果 $a+b &lt;j$，则在 $[i,i+j)$ 内没有这个子串第一次出现的落点，否则有 $a+b-j+1$ 个连续的落点可以。</p>
<p>统计连续落点的答案就可以了，如下图：</p>
<p><img src="/img/sa2.png"></p>
<h3 id="结合数据结构"><a href="#结合数据结构" class="headerlink" title="结合数据结构"></a>结合数据结构</h3><p>例如并查集、线段树、单调队列等，因为 $h$ 数组有较好的性质，所以一些区间上的问题都会涉及到。</p>
<p>例如：<a href="https://loj.ac/p/2064">#2064. 「HAOI2016」找相同字符 - 题目 - LibreOJ (loj.ac)</a>，<a href="https://loj.ac/p/2377">#2377. 「AHOI2013」差异 - 题目 - LibreOJ (loj.ac)</a> 等。</p>
<p>如果是多串匹配，需要用到 SAM（后缀自动机），但是我们可以用 $O(mn\log n)$ 暴力解决此问题。</p>
<h1 id="后缀平衡树"><a href="#后缀平衡树" class="headerlink" title="后缀平衡树"></a>后缀平衡树</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>后缀平衡树的每个节点代表了某字符串的一个后缀，特别的，后缀平衡树的中序遍历就是后缀数组 $sa$。</p>
<p>除此之外，后缀平衡树还支持在字符串前面插入一个字符动态维护后缀数组 $sa$，同时也支持删除一个字符。</p>
<h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>构建可以直接看做挨个插入 $n$ 个字符，首先如果插入一个字符，把它与根节点所代表的后缀比大小，如果第一个字符就能区分胜负，就按照大于小于的关系往左边或者右边走。</p>
<p>如果不能，则去掉第一个字符，剩下的两个字符串一定都在这个后缀平衡树里面，考虑如何 $O(1)$ 比大小。</p>
<p>后缀平衡树的每个节点维护一个值 $val$，满足中序遍历的 $val$ 递增，我们可以每个节点设置一个区间 $(l,r)$，它的 $val$ 就是 $\frac {l+r}{2}$，它的子节点的区间就分别是 $(l,val),(val,r)$，这么递归下去就可以 $O(1)$ 比较大小了。</p>
<p>因此总的时间复杂度是 $O(n \log n)$。</p>
<p>特别的，平衡树要使用好维护的类型，比如替罪羊树，删除和插入都是均摊 $O( \log n)$ 的，如果子树不平衡，特别注意需要拿出来重构。</p>
<h2 id="树上后缀排序"><a href="#树上后缀排序" class="headerlink" title="树上后缀排序"></a>树上后缀排序</h2><p>类比于后缀数组，第 $i$ 个节点代表的字符串是它到根节点路径上的字符连接起来的字符串，我们要维护这个字典序，也可以按照上面的后缀平衡树来处理。</p>
<p>核心思想就是：</p>
<ul>
<li>插入一个字符，先比较它。</li>
<li>如果比较失败，则剩下两个字符串一定在平衡树中出现过，即可 $O(1)$ 比较。</li>
</ul>
<p>所以靠这样，我们总的时间复杂度是 $O(n \log n)$，空间复杂度为 $O(n)$ 解决了树上后缀排序的问题。</p>
<p>这里放一下后缀平衡树的代码：<a href="https://www.luogu.com.cn/problem/P6164">P6164 【模板】后缀平衡树</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 800005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">double</span> val;</span><br><span class="line">	<span class="type">int</span> l,r,siz,pos;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(time(<span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="type">int</span> n,mask,ans,len,i,len2,root,fath[N],tot,id[N];</span><br><span class="line"><span class="type">char</span> s[N],t1[N],t2[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">decode</span><span class="params">(<span class="type">char</span>* s,<span class="type">int</span> len,<span class="type">int</span> mask)</span></span>&#123;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++) mask=(mask*<span class="number">131</span>+i)%len,<span class="built_in">swap</span>(s[i],s[mask]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">upd</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;<span class="keyword">if</span>(p) tr[p].siz = tr[tr[p].l].siz + tr[tr[p].r].siz + <span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(s[a]!=s[b]) <span class="keyword">return</span> s[a]&lt;s[b];</span><br><span class="line">	<span class="keyword">return</span> tr[a<span class="number">-1</span>].val&lt;tr[b<span class="number">-1</span>].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">balance</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">max</span>(tr[tr[p].l].siz,tr[tr[p].r].siz)&lt;=tr[p].siz*<span class="number">0.75</span>;&#125;</span><br><span class="line"><span class="comment">//inline bool balance(int p)&#123;return 1;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pia</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="built_in">pia</span>(tr[p].l),id[++tot]=p,<span class="built_in">pia</span>(tr[p].r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">double</span> ls,<span class="type">double</span> rs)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;r)&#123;</span><br><span class="line">		p = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">	p = id[mid],tr[p].val = (ls+rs)/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">build</span>(tr[p].l,l,mid<span class="number">-1</span>,ls,tr[p].val),<span class="built_in">build</span>(tr[p].r,mid+<span class="number">1</span>,r,tr[p].val,rs);</span><br><span class="line">	<span class="built_in">upd</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rebuild</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">double</span> l,<span class="type">double</span> r)</span></span>&#123;tot=<span class="number">0</span>,<span class="built_in">pia</span>(p),<span class="built_in">build</span>(p,<span class="number">1</span>,tot,l,r);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">int</span> rk,<span class="type">double</span> l,<span class="type">double</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p)&#123;</span><br><span class="line">		p = rk,tr[p].val = (l+r)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">cmp</span>(rk,tr[p].pos)) <span class="built_in">insert</span>(tr[p].l,rk,l,tr[p].val);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">insert</span>(tr[p].r,rk,tr[p].val,r);</span><br><span class="line">	<span class="built_in">upd</span>(p);</span><br><span class="line">	<span class="keyword">if</span>(!<span class="built_in">balance</span>(p)) <span class="built_in">rebuild</span>(p,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> ch)</span></span>&#123;s[++len] = ch,tr[len] = (node)&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,len&#125;,<span class="built_in">insert</span>(root,len,<span class="number">0</span>,<span class="number">1e18</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">erase</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">int</span> rk,<span class="type">double</span> l,<span class="type">double</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(tr[p].pos==rk)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!tr[p].l||!tr[p].r)&#123;</span><br><span class="line">			p = tr[p].l+tr[p].r;</span><br><span class="line">			<span class="built_in">rebuild</span>(p,l,r);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="type">int</span> nrt = tr[p].l;</span><br><span class="line">			<span class="keyword">while</span>(tr[nrt].r) nrt=tr[nrt].r;</span><br><span class="line">			<span class="built_in">erase</span>(tr[p].l,nrt,l,tr[p].val);</span><br><span class="line">			tr[nrt].l = tr[p].l,tr[nrt].r = tr[p].r,p = nrt,tr[p].val = (l+r)/<span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">upd</span>(p);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">cmp</span>(rk,tr[p].pos)) <span class="built_in">erase</span>(tr[p].l,rk,l,tr[p].val);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">erase</span>(tr[p].r,rk,tr[p].val,r);</span><br><span class="line">	<span class="built_in">upd</span>(p);</span><br><span class="line">	<span class="keyword">if</span>(!<span class="built_in">balance</span>(p)) <span class="built_in">rebuild</span>(p,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p,<span class="type">char</span> * t)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="type">bool</span> temp = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tr[p].pos;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[tr[p].pos-i+<span class="number">1</span>]&lt;t[i])&#123;</span><br><span class="line">			temp=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(s[tr[p].pos-i+<span class="number">1</span>]&gt;t[i])&#123;</span><br><span class="line">			temp=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(temp) <span class="keyword">return</span> tr[tr[p].l].siz+<span class="number">1</span>+<span class="built_in">query</span>(tr[p].r,t);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(tr[p].l,t); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//	freopen(&quot;1.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//	freopen(&quot;1.out&quot;,&quot;w&quot;,stdout); </span></span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;(s+<span class="number">1</span>),len2=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=len2;i++) <span class="built_in">insert</span>(s[i]);</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		cin&gt;&gt;(t1+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(t1[<span class="number">1</span>]==<span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">			cin&gt;&gt;(t2+<span class="number">1</span>),len2=<span class="built_in">strlen</span>(t2+<span class="number">1</span>),<span class="built_in">decode</span>(t2+<span class="number">1</span>,len2,mask);</span><br><span class="line">			<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=len2;i++) <span class="built_in">insert</span>(t2[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(t1[<span class="number">1</span>]==<span class="string">&#x27;D&#x27;</span>)&#123;</span><br><span class="line">			cin&gt;&gt;len2;</span><br><span class="line">			<span class="keyword">while</span>(len2--) <span class="built_in">erase</span>(root,len,<span class="number">0</span>,<span class="number">1e18</span>),len--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			ans = <span class="number">0</span>;</span><br><span class="line">			cin&gt;&gt;(t2+<span class="number">1</span>),len2=<span class="built_in">strlen</span>(t2+<span class="number">1</span>),<span class="built_in">decode</span>(t2+<span class="number">1</span>,len2,mask);</span><br><span class="line">			<span class="built_in">reverse</span>(t2+<span class="number">1</span>,t2+len2+<span class="number">1</span>);</span><br><span class="line">			t2[len2+<span class="number">1</span>] = <span class="string">&#x27;Z&#x27;</span>+<span class="number">1</span>,t2[len2+<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">			ans += <span class="built_in">query</span>(root,t2);</span><br><span class="line">			t2[len2]--;</span><br><span class="line">			ans -= <span class="built_in">query</span>(root,t2);</span><br><span class="line">			cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">			mask ^= ans;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="后缀自动机（SAM）"><a href="#后缀自动机（SAM）" class="headerlink" title="后缀自动机（SAM）"></a>后缀自动机（SAM）</h1><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><p>这个自动机由节点和转移边构成，接受且仅接受一个字符串 $S$ 的所有子串。</p>
<p>例如 $S&#x3D;\texttt{abbb}$，其构建的后缀自动机如下：</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/eoptmn3d.png"></p>
<p>容易发现，这个自动机也可以等价于接受且仅接受字符串 $S$ 的所有后缀，故称为后缀自动机。</p>
<h2 id="构建-1"><a href="#构建-1" class="headerlink" title="构建"></a>构建</h2><p>我们考虑增量式构建，即在构建完 $S[1,i-1]$ 的后缀自动机后，添加一个字符 $i$，尝试构造 $s[1,i]$ 的后缀自动机。</p>
<p>为了以后构造的时间复杂度保证，这里引入一个概念 $\text{endpos}$。</p>
<h3 id="终止集合"><a href="#终止集合" class="headerlink" title="终止集合"></a>终止集合</h3><p>一个 $S$ 的子串 $T$ 在 $S$ 中可能出现过很多次，例如 $S&#x3D;\texttt{abaab},T&#x3D;\texttt{ab}$，那么 $T$ 在 $S$ 中出现了 $2$ 次，定义其 $\text{endpos}$ 集合为出现的所有结尾的位置的集合，在这个例子中 $T$ 的 $\text{endpos}$ 集合就是 $2,5$。</p>
<p>在后缀自动机上走到一个点可能有多种不同的路径，定义这个点所代表的字符串集合就是这些所有路径所构成的字符串集合，例如上文中最右边的绿色节点的字符串集合就是 $\texttt{abbb}$ 和 $\texttt{bbb}$。</p>
<p>字符串构建出来的满足要求的后缀自动机可能有多个，我们这里只讨论一种简单的构建方式，并且能够保证这个方法构造出来的后缀自动机满足其定义。</p>
<p>我们此处构造出来的后缀自动机的每个节点代表的字符串集合，设最长的一个为 $S$，最短的一个长度为 $T$，那么 $T$ 一定是 $S$ 的后缀，并且这个字符串集合仅包含 $S$ 的所有后缀（包括自己）中长度大于等于 $|T|$ 的。</p>
<p>例如 $S&#x3D;\texttt{ababb},T&#x3D;\texttt{abb}$，那么这个节点包含 $\texttt{ababb},\texttt{babb},\texttt{abb}$，并且这个节点的所有字符串的 $\text{endpos}$ 集合完全相同，并且所有 $\text{endpos}$ 集合完全相同的字符串一定在一个节点内，我们称这些字符串为一个等价类。容易发现当我们构造了 $S[1,0]$ 的时候满足条件，我们接下来通过后缀链接来使得加进每一个字符之后这个后缀自动机都满足这个条件。</p>
<h2 id="后缀链接"><a href="#后缀链接" class="headerlink" title="后缀链接"></a>后缀链接</h2><p>对于 $pos$，定义它的后缀链接为 $fail_{pos}$，其代表的字符串的最长的长度为 $len_{pos}$，其代表的字符串最短的长度为 $lenm_{pos}$，满足 $len_{fail_{pos}}&#x3D;lenm_{pos}-1$。</p>
<p>当 $pos$ 代表的字符串为空时，它没有后缀链接。容易发现，这些后缀链接构成了一个以空字符串代表节点为根的树。</p>
<p>注意：我们不需要再额外记录 $lenm_{pos}$，它可以通过父亲的信息得到。</p>
<h2 id="增量构造"><a href="#增量构造" class="headerlink" title="增量构造"></a>增量构造</h2><p>设  $S[1,i-1]$ 所在的节点为 $p$，那么新增字符 $S[i]$ 之后，必定会出现一个新的等价类包含 $S[1,i]$，所以新建一个节点 $now$ 表示这个新的包含 $S[1,i]$ 的等价类，我们现在知道 $len_{now}$ 了，接下来就是更新后缀自动机和后缀链接。</p>
<p>首先，如果 $p$ 在后缀自动机上没有字符为 $S[i]$ 的出边，那么新建一条指向 $now$，然后令 $p \gets fail_p$。</p>
<p>如果一直到根都没有，那么 $fail_{now}$ 显然等于 $root$，否则设 $p$ 在后缀自动机上字符为 $S[i]$ 的出边指向 $q$。（这里的 $p$ 只取深度最深的一个节点，因为深度浅的没什么大用，因为肯定不会成为 $now$ 的 $fail$ 并且后缀自动机的形态也不会发生变化）</p>
<p>然后我们发现 $q$ 所代表的字符串中，只有一个的 $\text{endpos}$ 集合会发生更改，就是最短的那个字符串，因此，如果 $len_p+1&#x3D;len_q$，那么 $q$ 所有东西都不变，然后令 $fail_{now}&#x3D;q$ 即可。</p>
<p>如果 $len_p+1 \ne len_q$，那么我们需要把 $len_p+1$ 的字符串从 $q$ 里面分裂出来，于是新建一个节点 $temp$，$len_{temp}&#x3D;len_{p}+1$，并且我们可以发现 $temp$ 和 $q$ 在后缀自动机上的出边根据定义应该完全相同，因此这一部分复制即可。</p>
<p>根据 $fail$ 的定义，$fail_q&#x3D;fail_{now}&#x3D;temp$，于是就完成了构造，时间复杂度为 $O(n)$，空间复杂度为 $O(n)$（字符集大小为常数），证明详见 OI-wiki。</p>
<p>下面给一个构建的伪代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">now=<span class="number">1</span>,tot=<span class="number">1</span>,root=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> ch)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> p = now;len[now=(++tot)]=len[p]+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(p&amp;&amp;!sam[p][ch]) sam[p][ch]=now,p=fath[p];</span><br><span class="line">	<span class="keyword">if</span>(!p) fath[now]=root;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="type">int</span> q = sam[p][ch];</span><br><span class="line">		<span class="keyword">if</span>(len[p]+<span class="number">1</span>==len[q]) fath[now]=q;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="type">int</span> temp = ++tot;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++) sam[temp][i]=sam[q][i];</span><br><span class="line">			fath[temp] = fath[q],len[temp] = len[p]+<span class="number">1</span>,fath[q] = fath[now] = temp;</span><br><span class="line">			<span class="keyword">while</span>(sam[p][ch]==q) sam[p][ch]=temp,p=fath[p];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="后缀树"><a href="#后缀树" class="headerlink" title="后缀树"></a>后缀树</h2><p>后缀树就是把一个字符串 $S$ 的所有后缀放到 Trie 上面形成的树。</p>
<p>但是这样的话节点数量是 $O(n^2)$ 的，因此我们构建出来反串的后缀自动机的 fail 树，然后一条边代表多个字符即可。</p>
<p>因为后缀树一般不常用，此处就不展开讲了。</p>
<h2 id="应用以及性质"><a href="#应用以及性质" class="headerlink" title="应用以及性质"></a>应用以及性质</h2><ul>
<li>不同子串的数量：显然，所有节点的 $len_x-len_{fail_x}$ 的和。</li>
<li>检查字符串是否出现：直接放到后缀自动机上跑，如果跑不了了就没有出现过。</li>
<li>检查字符串出现的次数：首先预处理每个节点 $\text{endpos}$ 的大小，这个可以在每个前缀所代表的节点地方打个标记，然后每个节点 $\text{endpos}$ 的大小就是子树标记数量（我们也可以用线段树合并得到集合），然后找到询问字符串代表的节点，输出标记数量即可。</li>
<li>检查字符串出现的位置：同上，记录最大或者最小即可，有的时候可以用线段树合并维护整个集合。</li>
<li>最短的没有出现的字符串：后缀自动机上 DP 即可，DP 很简单，此处略。</li>
<li>多个字符串间的最长公共子串：首先选取最短的串构建 SAM，然后剩下的串在这个 SAM 上跑，如果有转移边就转移，否则跳 fail 直到有转移边为止，最后在每个节点更新一下其所代表的字符串中最长的公共子串即可，因为长度每次最多加 $1$，所以时间复杂度为 $O(\sum |S|)$。</li>
<li>字典序第 $k$ 大，循环移位等建议使用后缀数组完成。</li>
</ul>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>一个字符串，每次给字符串末尾添加一个字符，或者询问这个字符串第 $l$ 到第 $r$ 个字符有多少个本质不同的子串，强制在线，时间复杂度要求小于等于 $O(n \log^2 n)$。</p>
<h3 id="解法如下"><a href="#解法如下" class="headerlink" title="解法如下"></a>解法如下</h3><p>首先我们考虑求出点对 $(p,q,a,b)$ 的具体值（$1 \le p \le q \le |S|,a \ge b,p-a+1 \ge 1$），这些点对代表：</p>
<blockquote>
<p>对于所有 $S[q-a+1 \sim q-b+1,q]$，其上一个出现的位置一定是 $S[p-a+1 \sim p-b+1,p]$，这个点对可能有 $O(n^2)$ 个，但是我们接下来证明，这个点对可以缩减为 $O(n \log n)$ 个。</p>
</blockquote>
<p>考虑每次构建的过程，如果我们在整个串的 $fail$ 树上，每个节点记录其当前 $\text{endpos}$ 是什么，然后枚举 $i$ 找到 $S[1,i]$ 代表的节点，并且这个节点以及其祖先都可以得到一个点对 $(p,q,a,b)$，$p$ 就是加入之前的 $\text{endpos}$，$q$ 就是 $i$，$b$ 是当前节点代表的字符串中长度最小的字符串的长度，$a$ 就是当前节点的 $len$，并且让这条链上的所有节点的 $\text{endpos}$ 都变成 $i$。</p>
<p>这样做是 $O(n)$ 的，但是我们可以证明相同的 $p$ 在这条链上一定是一个连续段并且 $(a,b)$ 也连续，所以我们可以像 LCT 那样使用 access 来执行操作。</p>
<p>根据 LCT 的 access 操作的时间复杂度，这样的四元组只有 $O(n \log n)$ 个，结论证毕。</p>
<p>这道题中，如果要支持动态加最后一个字符，只需要处理我们复制节点的时候，$fail$ 的更改即可，这个不难处理，处理好 <code>pushup</code> 的顺序即可。然后 LCT 的时候，我们需要记录当前 Splay 的 $p$ 是多少，这个显然是当前 Splay 中 $len$ 最长的节点的 $len$，然后 $b$ 就是这条链链顶父亲的 $len+1$，$a$ 就是当前节点的 $len$，$q$ 就是 $i$。</p>
<p>最后得到了 $(p,q,a,b)$ 的四元组，我们可以用它们来做很多事情，因题而异。这道题中，我们维护主席树，即为当询问的 $r \ge q$ 的时候，这个时候我们对于 $b \le i \le a$ 讨论一下，发现 $l \le p-i+1$ 的时候这个字符串的贡献已经处理了，所以我们需要让 $p-i+1&lt;l \le q-i+1$ 的 $l$ 点加上 $1$，然后我们把它转化为差分+前缀查询，就变成了让 $p-i+2$ 位置 $+1$，让 $q-i+2$ 位置 $-1$，然后考虑 $[b,a]$，问题转化为了让 $p-a+2 \sim p-b+2$ 位置 $+1$，$q-a+2 \sim q-b+2$ 位置 $-1$，这个可以用主席树轻松维护。</p>
<p>最后就是需要注意一下 $p&#x3D;0$ 的情况，这个情况更好处理，此处不再赘述。</p>
<p>下面给一个非强制在线版的提交记录：<a href="https://www.luogu.com.cn/record/156477055">代码 here</a>。</p>
<h3 id="SAM-1-题面"><a href="#SAM-1-题面" class="headerlink" title="SAM 1 题面"></a>SAM 1 题面</h3><p>给出一个字符串 $S$，定义函数 $f(l,r)$ 为 $S[l,r]$ 的每个后缀与 $S[l,r]$ 的 LCP 之和。现在询问 $q$ 次，每次给出 $l,r$，请输出 $f(l,r)$，非强制在线。</p>
<p>数据范围：$|S|,q \le 2 \times 10^5$，时间复杂度要求低于 $O(n \sqrt{n})$。</p>
<h3 id="SAM-1-题解"><a href="#SAM-1-题解" class="headerlink" title="SAM 1 题解"></a>SAM 1 题解</h3><p>把整个串反过来，题目就变成了求 $\sum_{x&#x3D;l}^r \min(x-l+1,len)$，$len$ 表示以 $x$ 为结尾的前缀和 $s[l,r]$ 的 LCS。</p>
<p>首先建立这个字符串的 fail 树，找到 $s[l,r]$ 在 fail 树上的节点，这个部分可以倍增单 $\log$ 解决，同时我们需要处理每个前缀 $[1,i]$ 在 fail 树上的节点编号，这个标记一下就可以了。</p>
<p>那么 $len$ 实际上就是 $[1,x]$ 在 fail 树上的节点和 $[l,r]$ 在 fail 树上的节点的 LCA 的 $len$ 值。</p>
<p>我们首先不管 $x$ 的上下界，那么就要求 $\sum_{x&#x3D;1}^n \min(x-l+1,len)$，这个我们可以先将 fail 树重链剖分一下，然后我们考虑下面这一种剖分方式（先不管轻重儿子，以图片为准，方框是重链）：</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/vzkg96q1.png"></p>
<p>如果 $[l,r]$ 代表的节点是 $5$ 号节点，那么首先我们需要加上 $5$ 号节点子树内部对答案的贡献，然后跳到 $6$ 号节点，加上 $6$ 号节点子树内部对答案的贡献，但是这个时候我们发现 $5$ 号节点子树内部对答案的贡献算重复了，所以要减去 $5$ 号节点子树内部对答案的贡献（这里有一些细节留给读者思考）。再跳到 $2$ 号节点，加上 $1$ 号节点本身以及他附属轻子树中所有节点对答案的贡献，然后加上 $2$ 号节点子树对答案的贡献，减去 $6$ 号节点子树对答案的贡献。</p>
<p>首先子树内部我们可以预处理子树的 endpos 集合（线段树合并），然后对于所有询问一起处理就可以了，因为 $len$ 确定，所以上面的 $\min(x-l+1,len)$ 变成 $\min(x,len+l-1)-l+1$，然后发现 $\min$ 具有单调性，于是用线段树维护区间信息就可以轻松完成，这一部分甚至可以强制令贡献的 $x$ 在 $[l,r]$ 区间内。</p>
<p>然后考虑链上的贡献，轻儿子子树可以暴力遍历，就会得到一部分点对 $x,len$，然后令 $\min(x-l+1,len)$ 变成 $\min(x-len,l-1)-l+1+len$，注意到这个也具有单调性，所以我们可以直接处理 $1 \le x \le n$ 的答案，考虑减去 $1 \le x &lt; l$ 和 $r&lt;x \le n$ 的答案。</p>
<p>当 $1 \le x &lt; l$ 的时候上式一定等于 $x-l+1$，因为 $len \ge 0,x-l+1 \le 0$，这个统计多出来的贡献是简单的。</p>
<p>当 $r&lt;x \le n$ 的时候上式一定等于 $len$，因为 $len \le r-l+1,x-l+1 \ge r-l+1$，这个统计也是简单的。</p>
<p>因此我们这道题就在 $O(n \log^2 n)$ 的时间复杂度内解决了。</p>
<p>同理，这个方法可以适用于 <a href="https://www.luogu.com.cn/problem/P4482">P4482 Border 的四种求法</a>，只不过是把求和符号换了一下，然后强制要求 $x-l+1 \le len$ 求最大的 $x-l+1$，某种意义上来说其实更为简单。</p>
<p>总的来说，时间复杂度为大常数 $O(n \log^2 n)$，差点就 TLE 了。</p>
<h3 id="SAM-2-题面"><a href="#SAM-2-题面" class="headerlink" title="SAM 2 题面"></a>SAM 2 题面</h3><p>给定一个字符串 $S$ 和一个权值数组 $w$，设函数 $f(l,r)$ 表示用 $S[l,r]$ 构建 KMP 前缀 fail 树，其中 $S[l,i]$ 在树上的深度是 $dep_i$，空节点在树上的深度是 $0$，$f(l,r)&#x3D;\sum_{i&#x3D;l}^r dep_iw_i$，询问 $q$ 次，每次输出 $f(l,r)$，非强制在线。</p>
<p>数据范围：$|S|,q \le 2 \times 10^5$，时间复杂度要求低于 $O(n \sqrt{n})$。</p>
<h3 id="SAM-2-题解"><a href="#SAM-2-题解" class="headerlink" title="SAM 2 题解"></a>SAM 2 题解</h3><p>考虑分块求解，首先根据 KMP 的 fail 树的定义把题目要求 $f(l,r)$ 转化为求出 $S[l,r]$ 的每个前缀在 $S[l,r]$ 中所有出现位置的结束位置的 $w$ 之和。</p>
<p>设块长为 $B$，当 $r-l \le 2B$ 的时候可以暴力 KMP 处理。</p>
<p>否则我们首先设 $l$ 右边第一个块的左端点为 $x$，那么我们考虑处理 $S[l,r]$ 长度小于等于 $x-l$ 的前缀所贡献的答案，如果它们的 endpos 在 $S[l,x-1]$ 内，这个可以直接在 $S[l,x-1]$ 上 KMP 暴力处理，然后它们的 endpos 就只能在 $S[x,r]$ 内，于是我们可以用后缀和优化，用 endpos 在 $S[x,n]$ 的答案减去 $S[r+1,n]$ 的答案，这个并不困难，用 dfs 序维护即可。注意此处不能使用树状数组支持链加单点查询，需要使用 $O(\sqrt{n})-O(1)$ 的分块来支持链加单点查询平衡时间复杂度。</p>
<p>最后就是处理 $S[l,r]$ 中前缀长度大于 $x-l$ 对答案造成的贡献了，容易发现，这些贡献一定是形如下面这个样子：</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/j3eab7sz.png"></p>
<p>也就是如果蓝色的是满足题目条件的一个字符串，那么容易发现 $S[X,M]&#x3D;S[P,N]$，即 $S[X,R]$ 的答案一定包含 $S[L,R]$ 中前缀长度大于 $X-L$ 的答案，于是我们先让 $S[L,R]$ 的答案加上 $S[X,R]$ 的答案，再考虑减去不合法的答案。这一部分可以处理出 KMP 用前缀和统计答案。</p>
<p>什么情况不合法呢？即为上面的 $\operatorname{lcs}(X-1,P-1) &lt; X-L$ 就不合法了，那么当 $P$ 固定且假设它合法的时候计算多的答案就是 $ w_{P}+w_{P+1}+w_{P+2}+\dots+w_{\min(P+\operatorname{lcp}(P,X)-1,R)} $。</p>
<p>其中 $\operatorname{lcp}(P,X)$ 可以预处理 Z 函数算出来是多少，然后我们要统计的答案就是 $ \sum_{P&#x3D;X,\operatorname{lcs}(X-1,P-1) &lt; X-L }^R (w_{P}+w_{P+1}+w_{P+2}+\dots+w_{\min(P+\operatorname{lcp}(P,X)-1,R)}) $。</p>
<p>把 $w$ 做一个前缀和就是 $ \sum_{P&#x3D;X,\operatorname{lcs}(X-1,P-1) &lt; X-L}^R (w_{\min(P+\operatorname{lcp}(P,X)-1,R)}-w_{P-1}) $。</p>
<p>于是我们对同一个 $X$ 的所有询问按照 $R$ 双指针即可，然后因为 $X-L \le \sqrt{n}$，前面的可以暴力枚举前缀算，后面的 $\min(P+\operatorname{lcp}(P,X)-1,R)$ 需要打一个标记，再在标记处修改一下答案就可以了。 </p>
<p>总的时间复杂度是 $O(n \sqrt{n})$，有的时候需要卡一下常数才能通过，特别注意的是递归是不能有太多次的。</p>
<h3 id="SAM-3-题面"><a href="#SAM-3-题面" class="headerlink" title="SAM 3 题面"></a>SAM 3 题面</h3><p>给定一个串 $S$，再给 $n$ 个模式串 $S[l_i,r_i]$，还有 $q$ 次询问所有模式串在 $S[a_i,b_i]$ 中出现了多少次。</p>
<p>数据范围：$|S| \le 4 \times 10^5,n \le 10^6,q \le 10^5$，时间复杂度要求小于等于 $O(|S| \log^2 |S|)$。</p>
<h3 id="SAM-3-题解"><a href="#SAM-3-题解" class="headerlink" title="SAM 3 题解"></a>SAM 3 题解</h3><p>考虑基本子串结构，于是问题就变成了平面上 $S[a_i,b_i]$ 右下角出现了多少次模式串。</p>
<p>接下来容斥，首先答案需要加上 $S[a_i,b_i]$ 这个等价类中右下角出现了多少次字符串，这个用二维数点即可解决，因为同一个等价类形态完全相同，所以找最左下角的代表元即可。</p>
<p>然后我们发现答案还需要加上 $S[a_i,b_i]$ 这个等价类下面出现的字符串的次数，根据基本子串结构的性质，就是在反串 Parent 树上这个等价类的后缀的所有节点祖先所包含的模式串的数量，这个因为等价类周长之和为 $O(n)$ 所以可以预处理，然后 $O(1)$ 查询。</p>
<p>答案还有等价类右边的出现的模式串的次数，这一部分我们需要用到容斥，如下图所示：</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/x8em2oup.png"></p>
<p>相当于加上右面绿色的所有答案，容易发现右面的一定是一个等价类的代表元的子串，现在我们处理出来每个代表元的答案就可以了，这个比较好处理，一个代表元所在等价类右边相邻一定只有一个上边界对齐的等价类，于是我们依照这个建立出来拓扑关系，然后递推处理即可，同时需要记得加上等价类下面所有部分的答案。</p>
<p>最后要减去绿色区域不在红框之内的方案数，容易发现这是等价类的一个前缀所代表的节点在正串 Parent 树上的祖先的答案，于是直接像蓝色部分一样维护前缀和就可以了。</p>
<p>总的时间复杂度为 $O(n \log n)$，但是常数较大，实现不好还跑不过 $O(n \log^2 n)$ 的。</p>
<h3 id="SAM-4-题面"><a href="#SAM-4-题面" class="headerlink" title="SAM 4 题面"></a>SAM 4 题面</h3><p>给定 $n$ 个模式串 $S_i$ 和一个文本串 $T$，还有 $m$ 次询问所有模式串在 $T[a_i,b_i]$ 中出现了多少次。</p>
<p>数据范围：$|T| \le 5 \times 10^5,1 \le n,m \le 5 \times 10^5,\sum |S| \le 10^6$，时间复杂度要求小于等于 $O(|S| \log |S|+|T| \log |T|)$。</p>
<h3 id="SAM-4-题解"><a href="#SAM-4-题解" class="headerlink" title="SAM 4 题解"></a>SAM 4 题解</h3><p>首先把这 $n$ 个模式串放到 AC 自动机上建立出来一棵成型的 fail 树，然后考虑计算 $T[a_i,b_i]$ 的贡献。</p>
<p>我们需要处理出在 $T_i$ 结尾的模式串的最长的一个，那么代表 $T[j,i]$ 是相同后缀中最长的一个能够和模式串匹配的。得到了这个东西之后，我们可以预先处理出来 $T[a_i,b_i]$ 中最靠后的 $T[j,i]$ 并且满足 $a_i \le i \le b_i,j&lt;a_i$，找到这个答案之后，容易发现，所有 $i&lt;k \le b_i$ 结尾的模式串左端点一定都不会超过 $a_i$，因此这一部分可以直接计算。</p>
<p>然后就是找到的 $T[j,i]$，那么这个时候问题就变成了求出来这个字符串的某一个后缀出现了多少次模式串，这个也是非常好预处理的，所以这道题就做完了。</p>
<p>时间复杂度是 $O(|T| \log |T|)$ 和小常数，时间是能够通过的。</p>
<h3 id="SAM-5-题面"><a href="#SAM-5-题面" class="headerlink" title="SAM 5 题面"></a>SAM 5 题面</h3><p>给定两个字符串 $S_1$ 和 $S_2$，多次询问字符串 $S_1[L,R]$ 的所有子串的长度乘上它在 $S_2$ 中出现的次数的最大值。</p>
<p>如果长度和询问同阶，要求时间复杂度小于等于 $O(n \sqrt{n})$，$n \le 10^5$。</p>
<h3 id="SAM-5-题解"><a href="#SAM-5-题解" class="headerlink" title="SAM 5 题解"></a>SAM 5 题解</h3><p>考虑一下先分块，设 $L$ 右边第一个块的左端点为 $X$，那么 $S_1[X,R]$ 的答案可以直接双指针计算，$S_1[L,X-1]$ 的答案也可以直接暴力计算，然后接下来需要计算左端点在 $[L,X-1]$ 右端点在 $[X,R]$ 的答案。</p>
<p>这样的话询问可以拆分成 $n\sqrt{n}$ 个，每个形如 $[l,r]$ 表示左端点为 $l$，右端点不能超过 $r$ 的在 $S_2$ 中的权值的最大值。这样的话，我们可以直接用反串的 Parent 树来处理左端点固定的时候的答案，这样的话就可以直接在 SAM 上得到这 $n\sqrt{n}$ 个节点就可以了。</p>
<p>然后 $O(n)$ 遍历计算即可，时间复杂度是 $O(n \sqrt{n})$。</p>
<h3 id="SAM-6-题解"><a href="#SAM-6-题解" class="headerlink" title="SAM 6 题解"></a>SAM 6 题解</h3><p>待补。</p>
<p><a href="/text/t2.zip">代码包（不含 SAM 6）</a></p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>OI</tag>
        <tag>后缀数组</tag>
        <tag>后缀自动机</tag>
        <tag>后缀平衡树</tag>
        <tag>后缀树</tag>
      </tags>
  </entry>
  <entry>
    <title>KTT &amp; Segment Tree Beats</title>
    <url>/2024/02/18/KTT-Segment-Tree-Beats/</url>
    <content><![CDATA[<h1 id="KTT-吉司机线段树"><a href="#KTT-吉司机线段树" class="headerlink" title="KTT &amp; 吉司机线段树"></a>KTT &amp; 吉司机线段树</h1><p>首先，吉司机线段树是一种用来维护区间取 $\max$，区间求和的操作，它的时间复杂度是通过势能分析得到的 $O(n \log n)$，我们也可以在这上面进行一定的扩展，从而达到更加高级的区间操作类型。</p>
<h2 id="KTT-简介"><a href="#KTT-简介" class="headerlink" title="KTT 简介"></a>KTT 简介</h2><p>KTT 本质上是一种类型的吉司机线段树，这个类型的线段树主要还是在于每个节点维护一个 $key$ 键值，当修改的 $c \le key$ 我们可以直接打标记进行修改；否则就一直递归。</p>
<p>这样的时间复杂度视情况而定，最朴素的吉司机线段树就是 $\log$ 级别的，如果加上区间加等操作就是 $\log^2$ 级别的，这里介绍的 KTT 需要维护区间最大子段和，这个代价是 $\log^3$ 级别的，具体证明可以看发明者的博客或者在网上搜索资料。</p>
<h2 id="KTT-构建"><a href="#KTT-构建" class="headerlink" title="KTT 构建"></a>KTT 构建</h2><p>因为每个节点需要维护 $lmax,smax,rmax,sum$ 四个变量，即左边的最大子段和，整个的最大子段和，右边的最大子段和和整个序列的和。</p>
<p>现在我们需要支持：</p>
<ul>
<li>区间加正数。</li>
<li>区间最大子段和。</li>
</ul>
<p>接下来我们考虑维护一个键值 $s$ 表示当一次性加的数  $&gt;s$ 的时候上面四个变量就会有至少一个的转移方程被改动。</p>
<blockquote>
<p>转移方程被改动：以 $smax$ 的转移为例，$smax&#x3D;\max{smax_{ls},smax_{rs},rmax_{ls}+lmax_{rs}}$，当一次性加的数 $&gt;s$ 的时候就有可能不会取某个值，而是转到另外一种转移去取。</p>
</blockquote>
<p>这个时候我们就需要把上面的四个变量看做四个函数 $y&#x3D;kx+b$，$x$ 就是一次性加的值，是不确定的，$k$ 就是区间的长度，如果转移方式不变，那么一次性加 $x$ 就相当于让答案加了 $kx$，$b$ 就是当 $x&#x3D;0$ 的时候的值，就是原本的变量的值。</p>
<p>那么键值 $s$ 怎么维护呢？我们于是把 $lmax,smax,rmax,sum$ 四个函数的转移拿出来，$\max$ 中的任意两个函数都有一个交点，取这些交点最小的 $x$​ 是多少就好。</p>
<p>特别的，$s$ 还要和子树中所有 $s$ 取 $\min$，因为有可能会影响到转移时候的值，当交点 $x&lt;0$ 的时候就不用管它，如果所有交点都小于 $0$，$s \gets \inf$​。</p>
<p>函数的加减法既可以通过意义得出，也可以通过数学推导得出：$k’ \gets k_1+k_2,b’ \gets b_1+b_2$。</p>
<p>还有 <code>pushtag</code> 的时候记得让 $b \gets b+kx$。</p>
<p>题目：<a href="https://www.luogu.com.cn/problem/P5693">P5693 EI 的第六分块</a>，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 400005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">char</span> buf[<span class="number">1000000</span>],*p=buf,*q=buf;</span><br><span class="line">	<span class="keyword">return</span> p==q&amp;&amp;(q=(p=buf)+<span class="built_in">fread</span>(buf,<span class="number">1</span>,<span class="number">1000000</span>,stdin),p==q)?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">0</span>,w = <span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) w=<span class="number">-1</span>;</span><br><span class="line">		c=<span class="built_in">nc</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)res=res*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">return</span> res*w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> obuf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p3=obuf; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span>&#123; </span><br><span class="line">	p3-obuf&lt;=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)?(*p3++=c):(<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout),p3=obuf,*p3++=c); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span></span>&#123; </span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">pc</span>(<span class="string">&#x27;-&#x27;</span>),x=-x; </span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">write</span>(x/<span class="number">10</span>); </span><br><span class="line">	<span class="built_in">pc</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">poly</span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> k,b;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span></span>&#123;b+=k*x;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">inline</span> poly <span class="keyword">operator</span>+(<span class="type">const</span> poly a,<span class="type">const</span> poly b)&#123;<span class="keyword">return</span> (poly)&#123;a.k+b.k,a.b+b.b&#125;;&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(poly a,poly b)&#123;<span class="keyword">return</span> a.b&lt;b.b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">long</span> <span class="type">long</span> <span class="title">get</span><span class="params">(poly a,poly b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a.k==b.k) <span class="keyword">return</span> <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">	<span class="keyword">if</span>(a.k&lt;b.k) <span class="built_in">swap</span>(a,b);</span><br><span class="line">	<span class="keyword">if</span>(b.b&lt;=a.b) <span class="keyword">return</span> <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">	<span class="keyword">return</span> (b.b-a.b)/(a.k-b.k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	poly smax,lmax,rmax,sum;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> s,tag;</span><br><span class="line">&#125;tr[N&lt;&lt;<span class="number">2</span>],c;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> node <span class="title">merge</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line">	c.sum = a.sum + b.sum;</span><br><span class="line">	c.smax = <span class="built_in">max</span>(&#123;a.smax,b.smax,a.rmax+b.lmax&#125;);</span><br><span class="line">	c.lmax = <span class="built_in">max</span>(a.lmax,b.lmax+a.sum);</span><br><span class="line">	c.rmax = <span class="built_in">max</span>(b.rmax,a.rmax+b.sum);</span><br><span class="line">	c.s = <span class="built_in">min</span>(&#123;a.s,b.s,<span class="built_in">get</span>(a.lmax,b.lmax+a.sum),<span class="built_in">get</span>(b.rmax,a.rmax+b.sum),<span class="built_in">get</span>(a.smax,b.smax),<span class="built_in">get</span>(b.smax,a.rmax+b.lmax),<span class="built_in">get</span>(a.smax,a.rmax+b.lmax)&#125;);</span><br><span class="line">	c.tag = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">ll n,m,opt,x,y,z,i,a[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(ll s,ll t,ll p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(s==t)&#123;</span><br><span class="line">		tr[p].sum = tr[p].smax = tr[p].lmax = tr[p].rmax = (poly)&#123;<span class="number">1</span>,a[s]&#125;,tr[p].s = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">build</span>(s,(s+t)/<span class="number">2</span>,<span class="number">2</span>*p),<span class="built_in">build</span>((s+t)/<span class="number">2</span>+<span class="number">1</span>,t,<span class="number">2</span>*p+<span class="number">1</span>);</span><br><span class="line">	tr[p] = <span class="built_in">merge</span>(tr[<span class="number">2</span>*p],tr[<span class="number">2</span>*p+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(ll p,<span class="type">long</span> <span class="type">long</span> c)</span></span>&#123;tr[p].tag+=c,tr[p].s-=c,tr[p].lmax.<span class="built_in">add</span>(c),tr[p].rmax.<span class="built_in">add</span>(c),tr[p].smax.<span class="built_in">add</span>(c),tr[p].sum.<span class="built_in">add</span>(c);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tr[p].tag)&#123;</span><br><span class="line">		<span class="built_in">pushtag</span>(<span class="number">2</span>*p,tr[p].tag),<span class="built_in">pushtag</span>(<span class="number">2</span>*p+<span class="number">1</span>,tr[p].tag);</span><br><span class="line">		tr[p].tag = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">defeat</span><span class="params">(<span class="type">long</span> <span class="type">long</span> c,ll s,ll t,ll p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(c&lt;=tr[p].s) <span class="keyword">return</span> <span class="built_in">pushtag</span>(p,c);</span><br><span class="line">	c += tr[p].tag,tr[p].tag = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">defeat</span>(c,s,(s+t)/<span class="number">2</span>,<span class="number">2</span>*p),<span class="built_in">defeat</span>(c,(s+t)/<span class="number">2</span>+<span class="number">1</span>,t,<span class="number">2</span>*p+<span class="number">1</span>);</span><br><span class="line">	tr[p] = <span class="built_in">merge</span>(tr[<span class="number">2</span>*p],tr[<span class="number">2</span>*p+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">upd</span><span class="params">(ll l,ll r,ll c,ll s,ll t,ll p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=s&amp;&amp;t&lt;=r) <span class="keyword">return</span> <span class="built_in">defeat</span>(c,s,t,p);</span><br><span class="line">	<span class="built_in">pushdown</span>(p);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>&lt;=(s+t)/<span class="number">2</span>) <span class="built_in">upd</span>(l,r,c,s,(s+t)/<span class="number">2</span>,<span class="number">2</span>*p);</span><br><span class="line">	<span class="keyword">if</span>(r&gt;(s+t)/<span class="number">2</span>) <span class="built_in">upd</span>(l,r,c,(s+t)/<span class="number">2</span>+<span class="number">1</span>,t,<span class="number">2</span>*p+<span class="number">1</span>);</span><br><span class="line">	tr[p] = <span class="built_in">merge</span>(tr[<span class="number">2</span>*p],tr[<span class="number">2</span>*p+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> node <span class="title">query</span><span class="params">(ll l,ll r,ll s,ll t,ll p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=s&amp;&amp;t&lt;=r) <span class="keyword">return</span> tr[p];</span><br><span class="line">	<span class="built_in">pushdown</span>(p);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>&lt;=(s+t)/<span class="number">2</span>&amp;&amp;r&gt;(s+t)/<span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">merge</span>(<span class="built_in">query</span>(l,r,s,(s+t)/<span class="number">2</span>,<span class="number">2</span>*p),<span class="built_in">query</span>(l,r,(s+t)/<span class="number">2</span>+<span class="number">1</span>,t,<span class="number">2</span>*p+<span class="number">1</span>));</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(l&lt;=(s+t)/<span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">query</span>(l,r,s,(s+t)/<span class="number">2</span>,<span class="number">2</span>*p);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(l,r,(s+t)/<span class="number">2</span>+<span class="number">1</span>,t,<span class="number">2</span>*p+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) a[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		opt=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">			x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>(),z=<span class="built_in">read</span>();</span><br><span class="line">			<span class="built_in">upd</span>(x,y,z,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>();</span><br><span class="line">			<span class="built_in">write</span>(<span class="built_in">max</span>(<span class="built_in">query</span>(x,y,<span class="number">1</span>,n,<span class="number">1</span>).smax.b,<span class="number">0ll</span>)),<span class="built_in">pc</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="KTT-扩展"><a href="#KTT-扩展" class="headerlink" title="KTT 扩展"></a>KTT 扩展</h2><p>KTT 还可以解决区间取 $\max$，区间求最大子段和的操作，如何实现呢？</p>
<p>方法和上面一样，只不过如果值变动了，一定变动的只有最小值，次小值不会变动，因为我们可以在外面套个吉司机线段树模板。</p>
<p>然后 $y&#x3D;kx+b$ 中 $k$ 的含义变成最小值的数量就可以了，特别注意记录 tag 的顺序以及求交点的时候。</p>
<p><strong>因为这道题是求最小值，而最小值有一些特殊的性质，于是当交点等于 $0$ 的时候也要记录进去答案，严格来说，这么做才是对的。</strong></p>
<p>题目：<a href="https://www.luogu.com.cn/problem/P6792">P6792 [SNOI2020] 区间和</a>，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 400005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">char</span> buf[<span class="number">1000000</span>],*p=buf,*q=buf;</span><br><span class="line">	<span class="keyword">return</span> p==q&amp;&amp;(q=(p=buf)+<span class="built_in">fread</span>(buf,<span class="number">1</span>,<span class="number">1000000</span>,stdin),p==q)?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">0</span>,w = <span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) w=<span class="number">-1</span>;</span><br><span class="line">		c=<span class="built_in">nc</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)res=res*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">return</span> res*w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> obuf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p3=obuf; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span>&#123; </span><br><span class="line">	p3-obuf&lt;=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)?(*p3++=c):(<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout),p3=obuf,*p3++=c); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span></span>&#123; </span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">pc</span>(<span class="string">&#x27;-&#x27;</span>),x=-x; </span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">write</span>(x/<span class="number">10</span>); </span><br><span class="line">	<span class="built_in">pc</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">poly</span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> k,b;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span></span>&#123;b+=k*x;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">inline</span> poly <span class="keyword">operator</span>+(<span class="type">const</span> poly a,<span class="type">const</span> poly b)&#123;<span class="keyword">return</span> (poly)&#123;a.k+b.k,a.b+b.b&#125;;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> poly <span class="title">max</span><span class="params">(poly a,poly b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a.k&lt;b.k||(a.k==b.k&amp;&amp;a.b&lt;b.b)) <span class="built_in">swap</span>(a,b);</span><br><span class="line">	<span class="keyword">if</span>(a.b&gt;=b.b) <span class="keyword">return</span> a;</span><br><span class="line">	<span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">long</span> <span class="type">long</span> <span class="title">get</span><span class="params">(poly a,poly b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a.k==b.k) <span class="keyword">return</span> inf;</span><br><span class="line">	<span class="keyword">if</span>(a.k&lt;b.k) <span class="built_in">swap</span>(a,b);</span><br><span class="line">	<span class="keyword">if</span>(b.b&lt;a.b) <span class="keyword">return</span> inf;</span><br><span class="line">	<span class="keyword">return</span> (b.b-a.b)/(a.k-b.k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	poly smax,lmax,rmax,sum;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> s,tag,minn,sminn;</span><br><span class="line">&#125;tr[N&lt;&lt;<span class="number">2</span>],c;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> node <span class="title">merge</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line">	c.minn = <span class="built_in">min</span>(a.minn,b.minn);</span><br><span class="line">	<span class="keyword">if</span>(c.minn==a.minn&amp;&amp;c.minn==b.minn) c.sminn=<span class="built_in">min</span>(a.sminn,b.sminn);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(c.minn==a.minn) c.sminn=<span class="built_in">min</span>(a.sminn,b.minn);</span><br><span class="line">	<span class="keyword">else</span> c.sminn=<span class="built_in">min</span>(a.minn,b.sminn);</span><br><span class="line">	<span class="keyword">if</span>(c.minn!=a.minn) a.sum.k=a.lmax.k=a.rmax.k=a.smax.k=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(c.minn!=b.minn) b.sum.k=b.lmax.k=b.rmax.k=b.smax.k=<span class="number">0</span>;</span><br><span class="line">	c.sum = a.sum + b.sum;</span><br><span class="line">	c.smax = <span class="built_in">max</span>(a.smax,<span class="built_in">max</span>(b.smax,a.rmax+b.lmax));</span><br><span class="line">	c.lmax = <span class="built_in">max</span>(a.lmax,b.lmax+a.sum);</span><br><span class="line">	c.rmax = <span class="built_in">max</span>(b.rmax,a.rmax+b.sum);</span><br><span class="line">	c.s = <span class="built_in">min</span>(&#123;a.s,b.s,<span class="built_in">get</span>(a.lmax,b.lmax+a.sum),<span class="built_in">get</span>(b.rmax,a.rmax+b.sum),<span class="built_in">get</span>(a.smax,b.smax),<span class="built_in">get</span>(b.smax,a.rmax+b.lmax),<span class="built_in">get</span>(a.smax,a.rmax+b.lmax)&#125;);</span><br><span class="line">	c.tag = -inf;</span><br><span class="line">	<span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">ll n,m,opt,x,y,z,i,a[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(ll s,ll t,ll p)</span></span>&#123;</span><br><span class="line">	tr[p].tag = -inf;</span><br><span class="line">	<span class="keyword">if</span>(s==t)&#123;</span><br><span class="line">		tr[p].sum = tr[p].smax = tr[p].lmax = tr[p].rmax = (poly)&#123;<span class="number">1</span>,a[s]&#125;,tr[p].s = inf;</span><br><span class="line">		tr[p].minn = a[s],tr[p].sminn = inf;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">build</span>(s,(s+t)/<span class="number">2</span>,<span class="number">2</span>*p),<span class="built_in">build</span>((s+t)/<span class="number">2</span>+<span class="number">1</span>,t,<span class="number">2</span>*p+<span class="number">1</span>);</span><br><span class="line">	tr[p] = <span class="built_in">merge</span>(tr[<span class="number">2</span>*p],tr[<span class="number">2</span>*p+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushtag</span><span class="params">(ll p,<span class="type">long</span> <span class="type">long</span> c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(c&lt;=tr[p].minn) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> delta = c-tr[p].minn;</span><br><span class="line">	tr[p].minn=c,tr[p].tag=<span class="built_in">max</span>(tr[p].tag,c),tr[p].s-=delta,tr[p].lmax.<span class="built_in">add</span>(delta),tr[p].rmax.<span class="built_in">add</span>(delta),tr[p].smax.<span class="built_in">add</span>(delta),tr[p].sum.<span class="built_in">add</span>(delta);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tr[p].tag!=-inf)&#123;</span><br><span class="line">		<span class="built_in">pushtag</span>(<span class="number">2</span>*p,tr[p].tag),<span class="built_in">pushtag</span>(<span class="number">2</span>*p+<span class="number">1</span>,tr[p].tag);</span><br><span class="line">		tr[p].tag = -inf;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">defeat</span><span class="params">(<span class="type">long</span> <span class="type">long</span> c,ll s,ll t,ll p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(c-tr[p].minn&lt;=tr[p].s) <span class="keyword">return</span> <span class="built_in">pushtag</span>(p,c);</span><br><span class="line">	<span class="built_in">pushdown</span>(p);</span><br><span class="line">	<span class="built_in">defeat</span>(c,s,(s+t)/<span class="number">2</span>,<span class="number">2</span>*p),<span class="built_in">defeat</span>(c,(s+t)/<span class="number">2</span>+<span class="number">1</span>,t,<span class="number">2</span>*p+<span class="number">1</span>);</span><br><span class="line">	tr[p] = <span class="built_in">merge</span>(tr[<span class="number">2</span>*p],tr[<span class="number">2</span>*p+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">upd</span><span class="params">(ll l,ll r,ll c,ll s,ll t,ll p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tr[p].minn&gt;=c) <span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=s&amp;&amp;t&lt;=r&amp;&amp;c&lt;tr[p].sminn) <span class="keyword">return</span> <span class="built_in">defeat</span>(c,s,t,p);</span><br><span class="line">	<span class="built_in">pushdown</span>(p);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>&lt;=(s+t)/<span class="number">2</span>) <span class="built_in">upd</span>(l,r,c,s,(s+t)/<span class="number">2</span>,<span class="number">2</span>*p);</span><br><span class="line">	<span class="keyword">if</span>(r&gt;(s+t)/<span class="number">2</span>) <span class="built_in">upd</span>(l,r,c,(s+t)/<span class="number">2</span>+<span class="number">1</span>,t,<span class="number">2</span>*p+<span class="number">1</span>);</span><br><span class="line">	tr[p] = <span class="built_in">merge</span>(tr[<span class="number">2</span>*p],tr[<span class="number">2</span>*p+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> node <span class="title">query</span><span class="params">(ll l,ll r,ll s,ll t,ll p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=s&amp;&amp;t&lt;=r) <span class="keyword">return</span> tr[p];</span><br><span class="line">	<span class="built_in">pushdown</span>(p);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>&lt;=(s+t)/<span class="number">2</span>&amp;&amp;r&gt;(s+t)/<span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">merge</span>(<span class="built_in">query</span>(l,r,s,(s+t)/<span class="number">2</span>,<span class="number">2</span>*p),<span class="built_in">query</span>(l,r,(s+t)/<span class="number">2</span>+<span class="number">1</span>,t,<span class="number">2</span>*p+<span class="number">1</span>));</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(l&lt;=(s+t)/<span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">query</span>(l,r,s,(s+t)/<span class="number">2</span>,<span class="number">2</span>*p);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(l,r,(s+t)/<span class="number">2</span>+<span class="number">1</span>,t,<span class="number">2</span>*p+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//	freopen(&quot;hack1.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//	freopen(&quot;1.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">	n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) a[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="comment">//		cout&lt;&lt;m&lt;&lt;endl;</span></span><br><span class="line">		opt=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(opt==<span class="number">0</span>)&#123;</span><br><span class="line">			x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>(),z=<span class="built_in">read</span>();</span><br><span class="line">			<span class="built_in">upd</span>(x,y,z,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>();</span><br><span class="line">			<span class="built_in">write</span>(<span class="built_in">max</span>(<span class="built_in">query</span>(x,y,<span class="number">1</span>,n,<span class="number">1</span>).smax.b,<span class="number">0ll</span>)),<span class="built_in">pc</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="KTT-思想"><a href="#KTT-思想" class="headerlink" title="KTT 思想"></a>KTT 思想</h2><p>重复一次，KTT 的思想是在于维护一个键值，当修改的范围超过键值就暴力递归，否则我们可以 $O(1)$ 处理键值修改所带来的影响。</p>
<p>即：在 <code>pushtag</code> 操作的时候就可以 $O(1)$ 更新当前节点维护的所有区间信息。</p>
<p>很多题目我们都可以这么来做，无疑是一个新的线段树技巧！</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>KTT</tag>
        <tag>吉司机线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>鞅 &amp; 停时定理</title>
    <url>/2024/02/19/%E9%9E%85-%E5%81%9C%E6%97%B6%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<h1 id="鞅-停时定理"><a href="#鞅-停时定理" class="headerlink" title="鞅 &amp; 停时定理"></a>鞅 &amp; 停时定理</h1><h2 id="期望-概率"><a href="#期望-概率" class="headerlink" title="期望 &amp; 概率"></a>期望 &amp; 概率</h2><p>先复习一下期望和概率，设 $P(A)$ 表示 $A$ 时间发生的概率，容易发现 $P(A) \in [0,1]$，并且 $\sum P(A)&#x3D;1$。（对于同一个事件的不同衍生）</p>
<p>设 $E(A)$ 表示 $A$ 事件发生的期望，设 $P_1(A),P_2(A),\dots,P_k(A)$ 表示 $A$ 这个事件所有衍生的概率，每个衍生有一个权值为 $val_i$，则 $E(A)&#x3D; P_1(A)val_1+P_2(A)val_2 + \dots P_k(A)val_k$。</p>
<p>我们也可以把 $A$ 看做一个变量，此时 $E(A)$ 表示 $A$ 最后的带权平均值。</p>
<blockquote>
<p>例如：$A$ 有 $0.3$ 的概率取 $5$，有 $0.7$ 的概率取 $10$，则 $E(A)&#x3D;5 \times 0.3+10 \times 0.7&#x3D;8.5$。</p>
</blockquote>
<p>这时设 $x,y$ 为任意实数，则 $E(Ax+y)&#x3D;xE(A)+y$，$B$ 为另外一个随机变量，则 $E(A+B)&#x3D;E(A)+E(B)$。</p>
<p>上面这条性质叫做 <strong>期望的线性性</strong>。</p>
<p>如果随机变量 $X,Y$ 的期望存在，并且 <strong>$X,Y$ 相互独立</strong>，那么还有 $E(XY)&#x3D;E(X)E(Y)$，这个可以用上面的 $\sum P(A)&#x3D;1$​ 展开证明。</p>
<h2 id="鞅"><a href="#鞅" class="headerlink" title="鞅"></a>鞅</h2><p>对于一组随机的过程，即一步一步执行的各个状态 $X_0,X_1,X_2,\dots,X_k$，也称作<strong>离散型随机变量</strong>，不离散的是什么呢，那需要用到积分，因为积分是研究面积，就是连续的变量取值范围之和，此处不展开讨论。</p>
<p>如果 $E(X_{k+1}|X_0,X_1,\dots,X_k)&#x3D;X_k$，那么我们称 $X$ 这组随机变量为<strong>鞅</strong>。</p>
<p>上面这句话就是说如果我们根据 $X_0,X_1,\dots,X_k$ 这一些变量的取值，算出 $X_{k+1}$（下一个变量）的期望值<strong>恰好等于</strong> $X_k$，那么这就是鞅。</p>
<blockquote>
<p>假设我们抛硬币，正面获得 $1$ 的收益，反面获得 $-1$ 的收益，假设当前收益为 $a$，下一步收益的期望也是 $a$，于是抛硬币各个时间段我们的得分构成的一组离散型随机变量就被称作鞅。</p>
</blockquote>
<p>同时这也被称作<strong>公平博弈游戏</strong>。</p>
<h2 id="停时定理"><a href="#停时定理" class="headerlink" title="停时定理"></a>停时定理</h2><p>因为 $E(X_{k+1}|X_0,X_1,\dots,X_k)&#x3D;X_k$，采用数学归纳法我们可得 $E(X_t)&#x3D;X_0$，这就被称作停时定理。</p>
<p>对于任何一个鞅都有上面的这种定理，可以理解成不论什么时间停止观测（抛硬币）的期望收获都等于自己最开始的代价。</p>
<h2 id="势能函数"><a href="#势能函数" class="headerlink" title="势能函数"></a>势能函数</h2><p>对于一组局面 $(A_0,A_1,A_2,\dots,A_k)$，设 $\phi(A_i)$ 表示 $A_i$ 这个局面的一个函数，这个函数本质上是对每个局面规定了一个键值，用于之后的探讨。</p>
<p>例如当前有 $5$ 堆石子，每堆石子的数量分别是 $1,2,3,4,5$，那么这个局面的 $\phi$ 就可以声明为 $f(1)+f(2)+f(3)+f(4)+f(5)$，值得注意的是，$\phi$ 不仅可以是一个值，还可以是另外的函数的取值之和，我们待会要做的就是解出来 $f$，进而算出 $\phi$ 值。</p>
<p>考虑构造一个势能函数，设 $A_t$ 是终止态，我们需要求出到达终止态的期望时间，也就是 $E(t)$。</p>
<p>构造一个 $\phi$ 函数使得 $E(\phi(A_{i+1})| \phi(A_0),\phi(A_1),\dots,\phi(A_i))&#x3D;A_i-1$，那么我们可以发现：</p>
<ul>
<li>$E(\phi(A_i))$ 随着时间减少，可以理解为，随着时间势能会减少。</li>
</ul>
<p>我们同时需要保证终止态的 $\phi$ 值是唯一的并且是常数，不然我们无法判断哪个是终止态，也就是 $\forall 0 \le i&lt;t,\phi(A_i) \ne \phi(A_t)$。</p>
<p>再次构造序列 $X_i&#x3D;\phi(A_i)+i$，那么我们发现 $E(X_{n+1} | X_0,X_1,\dots,X_n)&#x3D;X_n$，即 $X$ 是一个鞅，那么就有 $E(X_t)&#x3D;E(X_0)$，所以我们得到：<br>$$<br>E(X_t)&#x3D;E(\phi(A_t)+t)&#x3D;E(\phi(A_t))+E(t)<br>$$<br>所以：<br>$$<br>E(t)&#x3D;E(X_0)-E(\phi(A_t))&#x3D;E(\phi(A_0))-E(\phi(A_t))<br>$$<br>因为 $\phi(A_t)$ 和 $\phi(A_0)$ 是定值，所以 $E(\phi(A_0))&#x3D;\phi(A_0),E(\phi(A_t))&#x3D;\phi(A_t)$。</p>
<p>最后得到：<br>$$<br>E(t)&#x3D;\phi(A_0)-\phi(A_t)<br>$$<br>于是我们只需要知道我们定义的 $\phi$ 函数初始局面的值和最终局面的值就可以算出来初始局面到最终局面的期望时间了。</p>
<p><strong>注意：$\phi$ 函数不是随机变量，只有 $X$ 序列是一组随机变量，因为我们不知道 $A_i$ 和 $i$ 具体是多少。</strong></p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题 1"></a>例题 1</h3><p><a href="https://www.luogu.com.cn/problem/CF1025G">CF1025G-Company Acquisitions</a></p>
<p>首先按照上面的形式，设 $\phi(A)$ 表示 $A$ 这个局面的势能函数，因为每次操作跟每个节点后接了多少节点有关，设 $i$ 号节点后接了 $a_i$ 个节点，设 $f(i)$ 表示后接 $i$ 个节点的势能函数，那么 $\phi(A)&#x3D;\sum_{i&#x3D;1}^n f(a_i)$，这里的 $a_i$ 是在 $A$ 局面下的值。</p>
<p>因为 $E(\phi(A’))&#x3D;\phi(A)-1$，那么设两次操作的节点分别后接了 $x,y$ 个节点，那么：<br>$$<br>f(x)+f(y)-1&#x3D; \frac {1}{2}((f(x+1)+yf(0))+(f(y+1)+xf(0)))<br>$$<br>因为 $f$ 和 $\phi$ 函数我们都可以自定义，所以设 $f(0)&#x3D;0$，那么上式变为 $f(x)+f(y)-1&#x3D;\frac 12(f(x+1)+f(y+1))$。</p>
<p>因为 $f(x)$ 和 $f(y)$ 相互独立，所以 $2f(x)-1&#x3D; f(x+1)$，归纳一下就是 $f(x)&#x3D;1-2^x(1 \le x)$​。</p>
<p>$\phi(P_0) &#x3D; \sum_{i&#x3D;1}^n f(d_i)$，$\phi(P_t) &#x3D; f(n-1)$，答案就是 $\phi(P_0)-\phi(P_t)$。</p>
<p>所以这道题 $O(n \log n)$ 做即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 505</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,a[N],x,i,f[N],ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>%p,t=a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); </span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;x,a[<span class="built_in">max</span>(x,<span class="number">0ll</span>)]++;</span><br><span class="line">	f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) f[i]=(<span class="built_in">qmi</span>(<span class="number">2</span>,i,mod)<span class="number">-1</span>+mod)%mod;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) ans=(ans-f[a[i]]+mod)%mod;</span><br><span class="line">	ans=((ans-(<span class="number">1</span>-<span class="built_in">qmi</span>(<span class="number">2</span>,n<span class="number">-1</span>,mod)))%mod+mod)%mod;</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题 2"></a>例题 2</h3><p><a href="https://www.luogu.com.cn/problem/CF850F">CF850F Rainbow Balls</a></p>
<p>设 $\phi(A)&#x3D;\sum_{i&#x3D;1}^n f(a_i)$，然后考虑执行一步之后 $\phi$ 的变化，据此推导出 $f$ 函数的值。</p>
<p>此处 $n$ 为颜色的数量，$a_i$ 为颜色为 $i$ 的球的数量，$m &#x3D; \sum_{i&#x3D;1}^n a_i$。</p>
<p>则 $\phi(A)-1 &#x3D; E(\phi(A’))$，展开一下公式：<br>$$<br>\sum_{i&#x3D;1}^m f(a_i)-1&#x3D; \frac 1{m(m-1)}\sum_{i&#x3D;1}^m ((a_i(a_i-1) +(m-a_i)(m-a_i-1))f(a_i)+a_i(m-a_i)f(a_i-1)f(a_i+1))<br>$$<br>化简之后就可以得到：<br>$$<br>\sum \frac {a_i(m-a_i)}{m(m-1)} (f(a_i-1)+f(a_i+1)-2f(a_i))&#x3D;-1<br>$$<br>因为 $\sum \frac {-a_i}{m}&#x3D;-1$，所以构造 $(f(a_i-1)+f(a_i+1)-2f(a_i))&#x3D;\frac {-m+1}{m-a_i}$ 就可以满足上述条件。</p>
<p>设 $g(i)&#x3D;f(i+1)-f(i)$，那么 $g(a_i)-g(a_i-1)&#x3D;\frac {-m+1}{m-a_i}$，所以递推 $g$ 求出 $f$ 即可，最后输出 $\phi(P_0)-\phi(P_t)$ 即可。</p>
<p>据此不难写出代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,a[N],m,i,begg,endd,f[N],g[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>%p,t = a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i],m+=a[i];</span><br><span class="line">	g[<span class="number">0</span>]=(<span class="number">1</span>+mod-m)*<span class="built_in">qmi</span>(m,mod<span class="number">-2</span>,mod)%mod;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">1e5</span>;i++)&#123;</span><br><span class="line">		g[i]=(g[i<span class="number">-1</span>]+(<span class="number">1</span>+mod-m)*<span class="built_in">qmi</span>(m-i,mod<span class="number">-2</span>,mod))%mod;</span><br><span class="line">		f[i]=(f[i<span class="number">-1</span>]+g[i<span class="number">-1</span>])%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) begg=(begg+f[a[i]])%mod;</span><br><span class="line">	endd=(mod-m*(m<span class="number">-1</span>)%mod)%mod;</span><br><span class="line">	cout&lt;&lt;(begg-endd+mod)%mod&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例题-3"><a href="#例题-3" class="headerlink" title="例题 3"></a>例题 3</h3><p><a href="https://www.luogu.com.cn/problem/CF1479E">CF1479E School Clubs</a></p>
<p>依然是设 $\phi(A)&#x3D;\sum_{i&#x3D;1}^m f(a_i)$，然后考虑执行一步之后 $\phi$ 的变化，据此推导出 $f$ 函数的值。</p>
<p>这道题的公式推导较为复杂，这里就不赘述了，留作之后复习用。</p>
<p>代码如下，特别注意 $O(4 \times 10^8 \log)$ 是不能过的，要优化到 $O(4 \times 10^8)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,i,j,now,sum,a[N],begg,endd,now1,now2,now3,inv=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmi</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>,t = a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%mod;</span><br><span class="line">		t=t*t%mod;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i],sum+=a[i];</span><br><span class="line">	<span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">	now1=<span class="number">0</span>,now2=<span class="number">-2</span>,now3=((<span class="number">3</span>*sum<span class="number">-2</span>)*now2%mod-(<span class="number">2</span>*sum<span class="number">-1</span>)*now1%mod)%mod;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>,now=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">while</span>(now&lt;a[i])&#123;</span><br><span class="line">			now++;</span><br><span class="line">			<span class="keyword">if</span>(sum-now+<span class="number">1</span>&lt;sum) inv=inv*(sum-now+<span class="number">1</span>)%mod;</span><br><span class="line">			now1=now2,now2=now3,now3=((<span class="number">3</span>*sum<span class="number">-2</span>*(now+<span class="number">1</span>))*now2-(<span class="number">2</span>*sum-(now+<span class="number">1</span>))*now1%mod*(sum-now)%mod)%mod;</span><br><span class="line">		&#125;</span><br><span class="line">		begg=(begg+now1*<span class="built_in">qmi</span>(inv,mod<span class="number">-2</span>)%mod+mod)%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(now&lt;sum)&#123;</span><br><span class="line">		now++;</span><br><span class="line">		<span class="keyword">if</span>(sum-now+<span class="number">1</span>&lt;sum) inv=inv*(sum-now+<span class="number">1</span>)%mod;</span><br><span class="line">		now1=now2,now2=now3,now3=((<span class="number">3</span>*sum<span class="number">-2</span>*(now+<span class="number">1</span>))*now2-(<span class="number">2</span>*sum-(now+<span class="number">1</span>))*now1%mod*(sum-now)%mod)%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;(begg-now1*<span class="built_in">qmi</span>(inv,mod<span class="number">-2</span>)%mod+<span class="number">2</span>*mod)%mod&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<script src="https://giscus.app/client.js" 
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <tags>
        <tag>数学</tag>
        <tag>概率</tag>
        <tag>期望</tag>
        <tag>鞅</tag>
        <tag>停时定理</tag>
      </tags>
  </entry>
  <entry>
    <title>数学学习笔记7</title>
    <url>/2024/03/10/%E6%95%B0%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07/</url>
    <content><![CDATA[<h1 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h1><p>备注：多项式基本操作此处不再说明，都比较简略，此处只介绍重要结论以及算法。</p>
<p><strong>Warning：这篇文章有的公式是无法显示的，建议在洛谷 “多项式科技” 中查看。</strong></p>
<h2 id="多项式-ln-exp"><a href="#多项式-ln-exp" class="headerlink" title="多项式 ln&#x2F;exp"></a>多项式 ln&#x2F;exp</h2><h3 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h3><p>首先引入概念设 $A(x)&#x3D;\ln(B(x)),B(x)&#x3D;\exp(A(x))$，那么我们可以看做 $A_x$ 是 $x$ 个点的带标号无向连通图，$B_x$ 是 $x$ 个点的带标号无向普通图，于是我们根据组合意义得到下面的公式：<br>$$<br>n!B_n &#x3D; \sum_{i&#x3D;1}^n C_{n-1}^{i-1}i!A_i(n-i)!B_{n-i}<br>$$</p>
<p>可以化简成：</p>
<p>$$<br>B_n &#x3D; \sum_{i&#x3D;1}^n A_iB_{n-i}\frac in<br>$$</p>
<p>反过来，$A$ 也可以通过 $B$ 得出来：</p>
<p>$$<br>A_n &#x3D; B_n-\sum_{i&#x3D;1}^{n-1} A_iB_{n-i}\frac in<br>$$</p>
<p>当然，还有一种对于 $\ln(1+ax)$ 的化简公式：</p>
<p>$$<br>\ln(1+ax) &#x3D; \sum_{i&#x3D;1}^{\text{inf}}\frac 1i(-1)^{i-1}a^ix^i<br>$$</p>
<p>如果我们需要求出第 $n$ 项在 exp 之后的值，直接保留前 $n$ 项就可以了。</p>
<p><strong>注意：根据 $\ln,\exp$ 的定义，可得 $A_0&#x3D;0,B_0&#x3D;1$。</strong></p>
<h2 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h2><p>给原有的实数集 $R$ 添加一个元素，然后任意元素表出来的所有集合称作复数集 $C$。</p>
<p>添加的元素是 $i&#x3D;\sqrt{-1}$，因此 $C$ 中的每个元素可以唯一使用 $a+bi(a \in R,b \in R)$ 表示，并且这个域中的加法乘法运算具有封闭性。</p>
<p>其中 $a$ 称作这个复数的实部，$b$ 称作这个复数的虚部。</p>
<h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>加&#x2F;减法：$(a+bi)+(c+di)&#x3D;(a+c)+(b+d)i$。</p>
<p>乘法：$(a+bi)(c+di)&#x3D;(ac-bd)+(ad+bc)i$。（乘法分配律展开即可）</p>
<p>除法：$\frac {a+bi}{c+di}&#x3D;\frac {(a+bi)(c-di)}{(c+di)(c-di)}&#x3D;\frac{ac+bd+bci-adi}{c^2+d^2}&#x3D;\frac{ac+bd}{c^2+d^2}+\frac{bc-ad}{c^2+d^2}i$。</p>
<h3 id="平面几何"><a href="#平面几何" class="headerlink" title="平面几何"></a>平面几何</h3><p>因为每个复数可以看作平面上的一个点，于是设平面的 $x$ 轴为实轴；$y$ 轴为虚轴，$a+bi$ 在平面上的坐标就是 $(a,b)$，其模长就是这个向量的长度。</p>
<p>所有模长等于 $1$ 的复数在平面直角坐标系上构成了单位圆，即一个半径为 $1$ 的圆，这些复数也称作单位复数。</p>
<p>单位复数与单位复数的乘积还是单位复数，也就是这些单位复数也构成一个具有运算封闭性的群。</p>
<p>这个平面直角坐标系有一个特殊的名字：<strong>复平面</strong>。</p>
<p>在极坐标的视角下，复数的乘除法变得很简单。<strong>复数乘法，模相乘，辐角相加。复数除法，模相除，辐角相减。</strong></p>
<h3 id="欧拉公式"><a href="#欧拉公式" class="headerlink" title="欧拉公式"></a>欧拉公式</h3><p>对于任意实数 $x$，有：</p>
<p>$$<br>e^{ix}&#x3D;\cos x+i \sin x<br>$$</p>
<p>这个公式我们此处不做证明，感兴趣的可以查一下资料了解。</p>
<h3 id="单位根"><a href="#单位根" class="headerlink" title="单位根"></a>单位根</h3><p>设 $x^n&#x3D;1$ 在复数意义下的解 $x$ 是 $n$ 次复根。根据单位复数的知识，这样的解一共有 $n$ 个，并且平分单位圆，这些解就称作单位根。</p>
<p>设 $\omega_{n}^{k} &#x3D; \exp \frac {2\pi k}{n}$，则 $x^n&#x3D;1$ 的解集就是 $\omega_{n}^{0 \sim n-1}$。（关于 $\frac {2\pi k}{n}$ 的角度表示可以参考 计算几何-极坐标）</p>
<p>并且因为 $\exp (i \theta)&#x3D;\cos \theta + i \sin \theta$，所以我们可以快速得到所有 $\omega_n$。（这个公式的详细推导需要用到三角函数等知识，此处不再赘述）</p>
<p>根据单位圆的性质，容易发现：</p>
<p>$$<br>\omega_{n}^n &#x3D;1,\omega_{2n}^{2k} &#x3D; \omega_n^k,\omega_{2n}^{n+k} &#x3D; -\omega_{2n}^k<br>$$</p>
<p>上面的三个公式会在 FFT（快速傅里叶变换）中得到应用。</p>
<p>并且如果 $k$ 等于 $1$，则所有 $\omega$ 都可以通过 $\omega_{n}^1$ 的次幂表示。（$\omega_n^1$ 是从 $1$ 开始逆时针方向遇到的第一个单位根）</p>
<h3 id="本源单位根"><a href="#本源单位根" class="headerlink" title="本源单位根"></a>本源单位根</h3><p>为什么说，上述 $n$ 个解都是 $n$ 次单位根，而平时说的 $n$ 次单位根一般特指第一个？</p>
<p>特指第一个，是为了在应用时方便。</p>
<p>在解方程的视角看来，满足 $\omega_n$ 性质的不止 $\omega_n$ 一个，对于 $\omega_n$ 的若干次幂也会满足性质。</p>
<p>称集合：${\omega_n^k\mid 0\le k&lt;n, \gcd(n,k)&#x3D;1}$<br>中的元素为<strong>本原单位根</strong>。任意一个本原单位根 $\omega$，与上述 $\omega_n$ 具有相同的性质：对于任意的 $0&lt;k&lt;n$，$\omega$ 的 $k$ 次幂不为 $1$。因此，借助任意一个本原单位根，都可以生成全体单位根。</p>
<p>全体 $n$ 次本原单位根共有 $\varphi(n)$ 个，很好证明。</p>
<h2 id="FFT（快速傅里叶变换）"><a href="#FFT（快速傅里叶变换）" class="headerlink" title="FFT（快速傅里叶变换）"></a>FFT（快速傅里叶变换）</h2><p>如果给了两个多项式 $A(x)$ 和 $B(x)$ 求出 $A \times B$ 的值，时间复杂度是 $O(n^2)$ 的。</p>
<p>如果我们给了两个多项式 $A(x),B(x)$ 在 $x &#x3D; 1 \sim n+1$ 地方的取值，求出 $A \times B$ 在 $x &#x3D; 1 \sim n+1$ 地方的取值，那么可以做到直接相乘 $O(n)$。</p>
<p>最后我们需要根据点值求出系数，又要用到拉格朗日插值，时间复杂度是 $O(n^2)$ 的。</p>
<p>这启发我们使用恰当的 $x$，算出点值之后求出系数，这就是 FFT 的精髓所在。</p>
<p>设 $A$ 的次数为 $n$，$B$ 的次数为 $m$。</p>
<p>FFT 使用了单位根来计算点值并且还原系数，我们设 $N$ 是第一个大于 $n+m$ 的二的次幂，则 FFT 选择的点就是 $\omega_{N}^{1 \sim N}$，并且在 $\log$ 时间范围内计算出点值。</p>
<p>于是我们考虑 $f(x)&#x3D;a_0+a_1x+a_2x^2+a_3x^3+a_4x^4+a_5x^5+a_6x^6+a_7x^7$，我们可以按照奇偶分组：</p>
<p>$$<br>G(x)&#x3D;a_0+a_2x+a_4x^2+a_6x^3 \\<br>H(x)&#x3D;a_1+a_3x^1+a_5x^2+a_7x^3<br>$$</p>
<p>所以 $f(x)&#x3D;G(x^2)+xH(x^2)$，因为 $\omega_{n}^k&#x3D; - \omega_{n}^{k+\frac n2}$，所以 $G({\omega_{n}^k}^2)&#x3D;G({(-\omega_{n}^{k+\frac n2}})^2)$，对于 $H(x^2)$ 同理。</p>
<p>所以我们可以直接进行计算：$f(\omega_{n}^k)&#x3D;G({\omega_{n}^k}^2)+\omega_{n}^kH({\omega_{n}^k}^2),f(\omega_{n}^{k+\frac n2})&#x3D;G({\omega_{n}^k}^2)-\omega_{n}^kH({\omega_{n}^k}^2)$。</p>
<p>于是根据 ${\omega_{n}^k}^2&#x3D;\omega_{n}^{2k}&#x3D;\omega_{\frac n2}^k$ 递归计算即可。</p>
<p>因为每次都必须是 $2$ 的倍数（$n$），所以最开始我们令 $N&#x3D;2^k$，然后就能得到一个常数很大的代码（递归版本）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> std::complex&lt;<span class="type">double</span>&gt; Comp;  <span class="comment">// STL complex</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> Comp <span class="title">I</span><span class="params">(<span class="number">0</span>, <span class="number">1</span>)</span></span>;  <span class="comment">// i</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_N = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">Comp tmp[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// rev=1,DFT; rev=-1,IDFT</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFT</span><span class="params">(Comp* f, <span class="type">int</span> n, <span class="type">int</span> rev)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) tmp[i] = f[i];</span><br><span class="line">  <span class="comment">// 偶数放左边，奇数放右边</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">      f[n / <span class="number">2</span> + i / <span class="number">2</span>] = tmp[i];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      f[i / <span class="number">2</span>] = tmp[i];</span><br><span class="line">  &#125;</span><br><span class="line">  Comp *g = f, *h = f + n / <span class="number">2</span>;</span><br><span class="line">  <span class="comment">// 递归 DFT</span></span><br><span class="line">  <span class="built_in">DFT</span>(g, n / <span class="number">2</span>, rev), <span class="built_in">DFT</span>(h, n / <span class="number">2</span>, rev);</span><br><span class="line">  <span class="comment">// cur 是当前单位复根，对于 k = 0 而言，它对应的单位复根 omega^0_n = 1。</span></span><br><span class="line">  <span class="comment">// step 是两个单位复根的差，即满足 omega^k_n = step*omega^&#123;k-1&#125;*n，</span></span><br><span class="line">  <span class="comment">// 定义等价于 exp(I*(2*M_PI/n*rev))</span></span><br><span class="line">  <span class="function">Comp <span class="title">cur</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span>, <span class="title">step</span><span class="params">(cos(<span class="number">2</span> * M_PI / n), sin(<span class="number">2</span> * M_PI * rev / n))</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n / <span class="number">2</span>;</span><br><span class="line">       ++k) &#123;  <span class="comment">// F(omega^k_n) = G(omega^k*&#123;n/2&#125;) + omega^k*n\*H(omega^k*&#123;n/2&#125;)</span></span><br><span class="line">    tmp[k] = g[k] + cur * h[k];</span><br><span class="line">    <span class="comment">// F(omega^&#123;k+n/2&#125;*n) = G(omega^k*&#123;n/2&#125;) - omega^k_n*H(omega^k\_&#123;n/2&#125;)</span></span><br><span class="line">    tmp[k + n / <span class="number">2</span>] = g[k] - cur * h[k];</span><br><span class="line">    cur *= step;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) f[i] = tmp[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常数优化"><a href="#常数优化" class="headerlink" title="常数优化"></a>常数优化</h3><p>首先考虑最后我们每次按照奇偶分类最后的 $f$ 是什么样子，事实上就是它在 $0 \sim k-1$ 位翻转后的结果，每次递推计算这个翻转后的位置就好：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同样需要保证 len 是 2 的幂</span></span><br><span class="line"><span class="comment">// 记 rev[i] 为 i 翻转后的值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(Complex y[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &amp; <span class="number">1</span>) &#123;  <span class="comment">// 如果最后一位是 1，则翻转成 len/2</span></span><br><span class="line">      rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; rev[i]) &#123;  <span class="comment">// 保证每对数只翻转一次</span></span><br><span class="line">      <span class="built_in">swap</span>(y[i], y[rev[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们每次执行运算 $f(\omega_n) \to f(\omega_{2n})$ 只需要直接在原位置上进行计算就可以了。</p>
<h3 id="点值得到系数"><a href="#点值得到系数" class="headerlink" title="点值得到系数"></a>点值得到系数</h3><p>得到了最终多项式的点值之后我们要知道各个项数的系数是多少，于是我们还得学习快速傅里叶逆变换。</p>
<p>IDFT（傅里叶反变换）的作用，是把目标多项式的点值形式转换成系数形式。而 DFT 本身是个线性变换，可以理解为将目标多项式当作向量，左乘一个矩阵得到变换后的向量。</p>
<p>现在我们已经得到最左边的结果了，中间的 $x$ 值在目标多项式的点值表示中也是一一对应的，所以，根据矩阵的基础知识，我们只要在式子两边左乘中间那个大矩阵的逆矩阵就行了。</p>
<p>由于这个矩阵的元素非常特殊，它的逆矩阵也有特殊的性质，就是每一项取倒数，再除以变换的长度 $n$，就能得到它的逆矩阵。</p>
<p>为了使计算的结果为原来的倒数，根据欧拉公式，可以得到</p>
<p>$$\frac{1}{\omega_k}&#x3D;\omega_k^{-1}&#x3D;e^{-\frac{2\pi i}{k}}&#x3D;\cos\left(\frac{2\pi}{k}\right)+i \sin\left(-\frac{2\pi}{k}\right)$$<br>因此我们可以尝试着把单位根 $\omega_k$ 取成 $e^{-\frac{2\pi \mathrm{i}}{k}}$，这样我们的计算结果就会变成原来的倒数，之后唯一多的操作就只有再除以它的长度 $n$，而其它的操作过程与 DFT 是完全相同的。我们可以定义一个函数，在里面加一个参数 $1$ 或者是 $-1$，然后把它乘到 $\pi$ 上。传入 $1$ 就是 DFT，传入 $-1$ 就是 IDFT。</p>
<p>最后我们以 <a href="https://www.luogu.com.cn/problem/P3803">P3803 【模板】多项式乘法（FFT）</a> 为例子看一下代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 4000005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">char</span> buf[<span class="number">1000000</span>],*p=buf,*q=buf;</span><br><span class="line">	<span class="keyword">return</span> p==q&amp;&amp;(q=(p=buf)+<span class="built_in">fread</span>(buf,<span class="number">1</span>,<span class="number">1000000</span>,stdin),p==q)?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)res=res*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> obuf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p3=obuf; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span>&#123; </span><br><span class="line">	p3-obuf&lt;=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)?(*p3++=c):(<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout),p3=obuf,*p3++=c); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span></span>&#123; </span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">pc</span>(<span class="string">&#x27;-&#x27;</span>),x=-x; </span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">write</span>(x/<span class="number">10</span>); </span><br><span class="line">	<span class="built_in">pc</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-8</span>,pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">poly</span>&#123;db re,im;&#125;a[N],b[N],c[N];</span><br><span class="line"><span class="keyword">inline</span> poly <span class="keyword">operator</span>+(poly &amp;a,poly &amp;b)&#123;<span class="keyword">return</span> (poly)&#123;a.re+b.re,a.im+b.im&#125;;&#125;</span><br><span class="line"><span class="keyword">inline</span> poly <span class="keyword">operator</span>-(poly &amp;a,poly &amp;b)&#123;<span class="keyword">return</span> (poly)&#123;a.re-b.re,a.im-b.im&#125;;&#125;</span><br><span class="line"><span class="keyword">inline</span> poly <span class="keyword">operator</span>*(poly &amp;a,poly &amp;b)&#123;<span class="keyword">return</span> (poly)&#123;a.re*b.re-a.im*b.im,a.re*b.im+a.im*b.re&#125;;&#125;</span><br><span class="line"><span class="type">int</span> n,m,i,res[N],las;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">fft</span><span class="params">(poly *f,<span class="type">int</span> n,<span class="type">int</span> type)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(i&lt;res[i]) <span class="built_in">swap</span>(f[i],f[res[i]]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i*=<span class="number">2</span>)&#123;</span><br><span class="line">		poly wn = (poly)&#123;<span class="built_in">cos</span>(pi/i),<span class="built_in">sin</span>(pi/i)*type&#125;;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> r=i*<span class="number">2</span>,j=<span class="number">0</span>;j&lt;n;j+=r)&#123;</span><br><span class="line">			poly w = (poly)&#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++,w=w*wn)&#123;</span><br><span class="line">				poly x = f[j+k],y = w*f[j+k+i];</span><br><span class="line">				f[j+k] = x+y,f[j+k+i] = x-y;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//	freopen(&quot;22.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">	n=<span class="built_in">read</span>()+<span class="number">1</span>,m=<span class="built_in">read</span>()+<span class="number">1</span>;</span><br><span class="line">	las=n+m<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) a[i].re=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++) b[i].re=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">while</span>((n&amp;(-n))!=n) n++;</span><br><span class="line">	<span class="keyword">while</span>((m&amp;(-m))!=m) m++;</span><br><span class="line">	<span class="keyword">while</span>(n&lt;m) n++;</span><br><span class="line">	<span class="keyword">while</span>(m&lt;n) m++;</span><br><span class="line">	n*=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		res[i]=(res[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(i&amp;<span class="number">1</span>) res[i]|=(n&gt;&gt;<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fft</span>(a,n,<span class="number">1</span>),<span class="built_in">fft</span>(b,n,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) c[i]=a[i]*b[i];</span><br><span class="line">	<span class="built_in">fft</span>(c,n,<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;las;i++) <span class="built_in">write</span>(<span class="built_in">round</span>(c[i].re/n)),<span class="built_in">pc</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	<span class="built_in">pc</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后记得因为精度有误差，必须要四舍五入一下，并且 $\frac 1n$ 需要写在四舍五入函数的里面。</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>FFT 用于快速求解：</p>
<p>$$<br>C_i &#x3D; \sum_{j&#x3D;0}^i A_jB_{i-j}<br>$$</p>
<p>的所有 $C$ 的值，与此相同，如果 $A,B$ 的系数是凸的，那么闵可夫斯基和求的就是：</p>
<p>$$<br>C_i &#x3D; \max_{j&#x3D;0}^i A_j+B_{i-j}<br>$$</p>
<p>同时我们还可以想到迪利克雷卷积（上面那个一般称作循环卷积）：</p>
<p>$$<br>C_i &#x3D; \sum_{j \mid i} A_jB_{\frac ij}<br>$$</p>
<p>上面这几个可以在 $O(n \log n),O(n),O(n \log n)$ 范围内解决，都很优秀，做题的时候偏重在于转化模型得到上面的答案，再应用工具输出最终结果。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>FFT 同时可以利用一些循环的性质来解决（证明用到了单位根的循环性质，自证不难）</p>
<p>如果我们前两遍 FFT 的时候长度为 $N(N&gt;n,N&gt;m)$ 但是 $N&lt;n+m-1$，即第三遍合并的时候项数不够，那么最后的结果就是一个循环移位的结果，设标准结果为 $C$，此方法得到的结果为 $C’$，则有：</p>
<p>$$<br>D_i &#x3D; \sum_{k \ge 0} C_{i+kN}<br>$$</p>
<p>于是我们可以通过这个方法来去掉不需要的项来减少常数消耗。</p>
<h2 id="NTT-（快速数论变换）"><a href="#NTT-（快速数论变换）" class="headerlink" title="NTT （快速数论变换）"></a>NTT （快速数论变换）</h2><p>相比于 FFT，每个数值都需要对 $mod$ 取模，这个的处理方式也很简单。</p>
<p>$mod$ 如果是质数就可以找到一个原根，满足原根的 $\varphi$ 次方对 $mod$ 取模后是 $1$ 和一些其它的性质。</p>
<p>因此我们就可以仿照单位根那样进行计算，原根基本上具有单位根的所有性质，所以这样做是对的。</p>
<p>接下来我们需要考虑一下哪些模数可以作为 NTT 模数，因为原根的循环节是 $\varphi$ 长度的，所以 $N$ 一定要整数 $\varphi$ 即 $mod-1$，并且 $N&#x3D;2^k$，所以一个模数可以作为 NTT 模数当且仅当它分解为 $2^t \times p+q$ 之后 $2^t$ 大于等于 $N$。</p>
<p>常见的 NTT 模数就是 $998244353$，下面提供了一份 NTT 模板，把复数类换成整数类，把单位根换成原根就可以了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		res[i]=((res[i&gt;&gt;<span class="number">1</span>])&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(i&amp;<span class="number">1</span>) res[i]+=(n&gt;&gt;<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">clear</span><span class="params">(ll n)</span></span>&#123;<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) a[i]=b[i]=c[i]=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *f,ll n,ll type)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(i&lt;res[i]) <span class="built_in">swap</span>(f[i],f[res[i]]);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i*=<span class="number">2</span>)&#123;</span><br><span class="line">		ll wn = <span class="built_in">qmi</span>((type==<span class="number">1</span>?G:invG),(mod<span class="number">-1</span>)/(i*<span class="number">2</span>),mod);</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;i;j++) qm[j]=qm[j<span class="number">-1</span>]*wn%mod;</span><br><span class="line">		<span class="keyword">for</span>(ll r=i*<span class="number">2</span>,j=<span class="number">0</span>;j&lt;n;j+=r)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll k=<span class="number">0</span>;k&lt;i;k++)&#123;</span><br><span class="line">				ll x = f[j+k],y = qm[k]*f[j+k+i]%mod;</span><br><span class="line">				f[j+k] = (x+y)%mod,f[j+k+i] = (x-y+mod)%mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>补充：据说还有任意模数多项式乘法，但是并不常见，下面列举一种常见的解法：</p>
<ul>
<li>找 $3$ 个质数，满足其 $\operatorname{lcm}$ 大于等于最大的数，然后用 CRT 合并起来对要求的数取模就可以了。</li>
</ul>
<p>这样的写法需要用 <code>long double</code> 合并并且常数是 $9$ 倍 NTT，如果代码写得比较好看的话，对于 $n \le 10^5$ 完全足够了。</p>
<h2 id="多项式相关操作"><a href="#多项式相关操作" class="headerlink" title="多项式相关操作"></a>多项式相关操作</h2><h3 id="多项式乘法"><a href="#多项式乘法" class="headerlink" title="多项式乘法"></a>多项式乘法</h3><p>取模：NTT&#x2F;CRT+NTT。</p>
<p>不取模：FFT&#x2F;CRT+NTT。</p>
<h3 id="多项式逆元"><a href="#多项式逆元" class="headerlink" title="多项式逆元"></a>多项式逆元</h3><p>设 $A(x) \cdot B(x) \equiv 1 \pmod {x^n}$（后面的 $\bmod \ x^n$ 表示保留 $0 \sim n-1$ 次项的系数）</p>
<p>我们考虑化一下公式：</p>
<p>$$<br>\begin{aligned}<br>A(x) \cdot B(x) \equiv 1 \pmod {x^n}<br>\end{aligned}<br>$$</p>
<p>设 $A(x) \cdot B’(x) \equiv 1 \pmod {x^{\lceil \frac n2 \rceil}}$，则有：</p>
<p>$$<br>A(x) \cdot (B(x)-B_0(x)) \equiv 0 \pmod {x^{\lceil \frac n2 \rceil}} \\<br>(B(x)-B_0(x)) \equiv 0 \pmod {x^{\lceil \frac n2 \rceil}} \\</p>
<p>(B(x)-B_0(x))^2 \equiv 0 \pmod {x^n} \\</p>
<p>B(x)^2+B_0(x)^2-2B(x)B_0(x) \equiv 0 \pmod {x^n} \\</p>
<p>B(x)+A(x)B_0(x)^2-2B_0(x) \equiv 0 \pmod {x^n} \\</p>
<p>B(x) \equiv 2B_0(x)-A(x)B_0(x)^2 \pmod {x^n} \\<br>$$</p>
<p>于是我们就得到了 $B(x)$ 的递归式，每一层递归式使用 NTT 求解即可，时间复杂度为 $T(n)&#x3D;T(\frac n2)+O(n \log n)$，所以 $T(n)&#x3D;O(n \log n)$。</p>
<p>边界条件就是常数项 $B(0)&#x3D;A(0)^{-1}$。</p>
<p>以 <a href="https://www.luogu.com.cn/problem/P4238">P4238 【模板】多项式乘法逆</a> 参考一下代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 500005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,G,invG,i,res[N],qm[N],val[N],val2[N],temp[N],tempa[N],tempb[N],sqval[N],valq[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>,t = a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		res[i]=((res[i&gt;&gt;<span class="number">1</span>])&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(i&amp;<span class="number">1</span>) res[i]+=(n&gt;&gt;<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *f,ll n,ll type)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(i&lt;res[i]) <span class="built_in">swap</span>(f[i],f[res[i]]);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i*=<span class="number">2</span>)&#123;</span><br><span class="line">		ll wn = <span class="built_in">qmi</span>((type==<span class="number">1</span>?G:invG),(mod<span class="number">-1</span>)/(i*<span class="number">2</span>),mod);</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;i;j++) qm[j]=qm[j<span class="number">-1</span>]*wn%mod;</span><br><span class="line">		<span class="keyword">for</span>(ll r=i*<span class="number">2</span>,j=<span class="number">0</span>;j&lt;n;j+=r)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll k=<span class="number">0</span>;k&lt;i;k++)&#123;</span><br><span class="line">				ll x = f[j+k],y = qm[k]*f[j+k+i]%mod;</span><br><span class="line">				f[j+k] = (x+y)%mod,f[j+k+i] = (x-y+mod)%mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">char</span> buf[<span class="number">1000000</span>],*p=buf,*q=buf;</span><br><span class="line">	<span class="keyword">return</span> p==q&amp;&amp;(q=(p=buf)+<span class="built_in">fread</span>(buf,<span class="number">1</span>,<span class="number">1000000</span>,stdin),p==q)?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)res=res*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> obuf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p3=obuf; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span>&#123; </span><br><span class="line">	p3-obuf&lt;=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)?(*p3++=c):(<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout),p3=obuf,*p3++=c); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(ll x)</span></span>&#123; </span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">pc</span>(<span class="string">&#x27;-&#x27;</span>),x=-x; </span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">write</span>(x/<span class="number">10</span>); </span><br><span class="line">	<span class="built_in">pc</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">times</span><span class="params">(ll *a,ll *b,ll *c,ll n,ll tim)</span></span>&#123;</span><br><span class="line">	ll nn = n;</span><br><span class="line">	<span class="keyword">while</span>((n&amp;(-n))!=n) n++;</span><br><span class="line">	n*=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) tempa[i]=(i&gt;=nn?<span class="number">0</span>:a[i]),tempb[i]=(i&gt;=nn?<span class="number">0</span>:b[i]);</span><br><span class="line">	<span class="built_in">init</span>(n),<span class="built_in">ntt</span>(tempa,n,<span class="number">1</span>),<span class="built_in">ntt</span>(tempb,n,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(tim==<span class="number">1</span>) c[i]=tempa[i]*tempb[i]%mod;</span><br><span class="line">		<span class="keyword">else</span> c[i]=tempa[i]*tempb[i]%mod*tempb[i]%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ntt</span>(c,n,<span class="number">-1</span>);</span><br><span class="line">	ll invn = <span class="built_in">qmi</span>(n,mod<span class="number">-2</span>,mod);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) c[i]=c[i]*invn%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">		val2[<span class="number">0</span>] = <span class="built_in">qmi</span>(val[<span class="number">0</span>],mod<span class="number">-2</span>,mod);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	ll len = (x+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">solve</span>(len);</span><br><span class="line">	<span class="built_in">times</span>(val,val2,temp,x,<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) val2[i]=((<span class="number">2</span>*val2[i]-temp[i])%mod+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	G=<span class="number">3</span>,invG=<span class="built_in">qmi</span>(G,mod<span class="number">-2</span>,mod),qm[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) val[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">solve</span>(n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">write</span>(val2[i]),<span class="built_in">pc</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多项式除法"><a href="#多项式除法" class="headerlink" title="多项式除法"></a>多项式除法</h3><p>我们要求出 $F(x)$ 除以 $G(x)$ 的商 $R(x)$ 和余数 $Q(x)$。</p>
<p>其中 $F(x)$ 的次数是 $n$，$G(x)$ 的次数是 $m$，$R(x)$ 的次数是 $n-m$，$Q(x)$ 的次数不超过 $m-1$，这里可以看作 $m-1$（高次项补零）。</p>
<p>设 $F_R(x)$ 表示将 $F(x)$ 的系数翻转（次数）后形成的函数。</p>
<p>那么就有下面的公式：</p>
<p>$$<br>\begin{aligned}<br>F(x)&amp;&#x3D;G(x)R(x)+Q(x) \\<br>F(\frac 1x) &amp;&#x3D; G(\frac 1x)R(\frac 1x)+Q(\frac 1x) \\<br>F(\frac 1x)x^n &amp;&#x3D; G(\frac 1x)x^mR(\frac 1x)x^{n-m}+Q(\frac 1x)x^{m-1}x^{n-m+1} \\<br>F(\frac 1x)x^n &amp;&#x3D; G(\frac 1x)x^mR(\frac 1x)x^{n-m}+Q(\frac 1x)x^{m-1}x^{n-m+1} \\<br>F_R(x) &amp;&#x3D; G_R(x)R_R(x)+Q_R(x)x^{n-m+1} \\<br>F_R(x) &amp;\equiv G_R(x)R_R(x) \pmod {x^{n-m+1}}</p>
<p>\end{aligned}<br>$$</p>
<p>于是对 $G_R(x)$ 求逆之后 NTT 就可以求出 $R_R(x)$ 和 $R(x)$，顺便还可以求出 $Q(x)&#x3D;F(x)-G(x)R(x)$。</p>
<p>因为 $R$ 的次数是 $n-m$ 所以我们这么求出来的 $R$ 是对的，又因为 $Q(x)x^{n-m+1}$ 不超过 $n$ 次项，所以 $Q(x)$ 最后的结果也是不超过 $m-1$ 次项的。</p>
<p>以 <a href="https://www.luogu.com.cn/problem/P4512">P4512 【模板】多项式除法</a> 为例，参考如下代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 2000005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,m,nn,G,invG,invn,i,res[N],qm[N],aval[N],bval[N],cval[N],val[N],val2[N],temp[N],tempp[N],len;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>,t = a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		res[i]=((res[i&gt;&gt;<span class="number">1</span>])&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(i&amp;<span class="number">1</span>) res[i]+=(n&gt;&gt;<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *f,ll n,ll type)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(i&lt;res[i]) <span class="built_in">swap</span>(f[i],f[res[i]]);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i*=<span class="number">2</span>)&#123;</span><br><span class="line">		ll wn = <span class="built_in">qmi</span>((type==<span class="number">1</span>?G:invG),(mod<span class="number">-1</span>)/(i*<span class="number">2</span>),mod);</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;i;j++) qm[j]=qm[j<span class="number">-1</span>]*wn%mod;</span><br><span class="line">		<span class="keyword">for</span>(ll r=i*<span class="number">2</span>,j=<span class="number">0</span>;j&lt;n;j+=r)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll k=<span class="number">0</span>;k&lt;i;k++)&#123;</span><br><span class="line">				ll x = f[j+k],y = qm[k]*f[j+k+i]%mod;</span><br><span class="line">				f[j+k] = (x+y)%mod,f[j+k+i] = (x-y+mod)%mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">char</span> buf[<span class="number">1000000</span>],*p=buf,*q=buf;</span><br><span class="line">	<span class="keyword">return</span> p==q&amp;&amp;(q=(p=buf)+<span class="built_in">fread</span>(buf,<span class="number">1</span>,<span class="number">1000000</span>,stdin),p==q)?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">0</span>,w = <span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)w=(c==<span class="string">&#x27;-&#x27;</span>?<span class="number">-1</span>:w),c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)res=res*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">return</span> res*w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> obuf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p3=obuf; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span>&#123; </span><br><span class="line">	p3-obuf&lt;=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)?(*p3++=c):(<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout),p3=obuf,*p3++=c); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(ll x)</span></span>&#123; </span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">pc</span>(<span class="string">&#x27;-&#x27;</span>),x=-x; </span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">write</span>(x/<span class="number">10</span>); </span><br><span class="line">	<span class="built_in">pc</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">		val2[<span class="number">0</span>] = <span class="built_in">qmi</span>(val[<span class="number">0</span>],mod<span class="number">-2</span>,mod);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">solve</span>((x+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) temp[i]=val[i],tempp[i]=val2[i];</span><br><span class="line">	ll len = x;</span><br><span class="line">	<span class="keyword">while</span>((len&amp;(-len))!=len) temp[len]=tempp[len]=<span class="number">0</span>,len++;</span><br><span class="line">	temp[len]=tempp[len]=<span class="number">0</span>,len++;</span><br><span class="line">	<span class="keyword">while</span>((len&amp;(-len))!=len) temp[len]=tempp[len]=<span class="number">0</span>,len++;</span><br><span class="line">	ll invn = <span class="built_in">qmi</span>(len,mod<span class="number">-2</span>,mod);</span><br><span class="line">	<span class="built_in">init</span>(len);</span><br><span class="line">	<span class="built_in">ntt</span>(temp,len,<span class="number">1</span>),<span class="built_in">ntt</span>(tempp,len,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;len;i++) temp[i]=temp[i]*tempp[i]%mod*tempp[i]%mod;</span><br><span class="line">	<span class="built_in">ntt</span>(temp,len,<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;len;i++) temp[i]=temp[i]*invn%mod;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) val2[i]=((<span class="number">2</span>*val2[i]-temp[i])%mod+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	G=<span class="number">3</span>,invG=<span class="built_in">qmi</span>(G,mod<span class="number">-2</span>,mod),qm[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line">	n++,m++;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) aval[i]=<span class="built_in">read</span>(),cval[i]=aval[i];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++) val[i]=<span class="built_in">read</span>(),bval[i]=val[i];</span><br><span class="line">	<span class="built_in">reverse</span>(aval,aval+n),<span class="built_in">reverse</span>(val,val+m);</span><br><span class="line">	<span class="built_in">solve</span>(n);</span><br><span class="line">	nn=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(nn&lt;n*<span class="number">2</span>) nn*=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=n;i&lt;nn;i++) aval[i]=<span class="number">0</span>,val2[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">init</span>(nn),<span class="built_in">ntt</span>(aval,nn,<span class="number">1</span>),<span class="built_in">ntt</span>(val2,nn,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nn;i++) aval[i]=aval[i]*val2[i]%mod;</span><br><span class="line">	<span class="built_in">ntt</span>(aval,nn,<span class="number">-1</span>),invn=<span class="built_in">qmi</span>(nn,mod<span class="number">-2</span>,mod);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nn;i++) aval[i]=aval[i]*invn%mod;</span><br><span class="line">	<span class="keyword">for</span>(i=n-m;i&gt;=<span class="number">0</span>;i--) <span class="built_in">write</span>(aval[i]),<span class="built_in">pc</span>(<span class="string">&#x27; &#x27;</span>),val2[len++]=aval[i];</span><br><span class="line">	<span class="built_in">pc</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=len;i&lt;nn;i++) val2[i]=<span class="number">0</span>; </span><br><span class="line">	<span class="built_in">ntt</span>(bval,nn,<span class="number">1</span>),<span class="built_in">ntt</span>(val2,nn,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nn;i++) bval[i]=bval[i]*val2[i]%mod;</span><br><span class="line">	<span class="built_in">ntt</span>(bval,nn,<span class="number">-1</span>),invn=<span class="built_in">qmi</span>(nn,mod<span class="number">-2</span>,mod);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nn;i++) bval[i]=bval[i]*invn%mod;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m<span class="number">-1</span>;i++) <span class="built_in">write</span>((cval[i]-bval[i]+mod)%mod),<span class="built_in">pc</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	<span class="built_in">pc</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多项式开方"><a href="#多项式开方" class="headerlink" title="多项式开方"></a>多项式开方</h3><p>考虑像求逆元那样倍增，那么设 $H(x)^2 \equiv F(x) \pmod {x^{\lceil \frac n2 \rceil}}$，有：</p>
<p>$$<br>\begin{aligned}<br>G(x) &amp;\equiv H(x) \pmod {x^{\lceil \frac n2 \rceil}} \\<br>G(x)-H(x) &amp;\equiv 0 \pmod {x^{\lceil \frac n2 \rceil}} \\<br>(G(x)-H(x))^2 &amp;\equiv  0\pmod {x^n} \\<br>G(x)^2+H(x)^2-2G(x)H(x) &amp;\equiv  0\pmod {x^n} \\<br>H(x)^2+H(x)^2-2G(x)H(x) &amp;\equiv  0\pmod {x^n} \\<br>F(x)^2+H(x)^2-2G(x)H(x) &amp;\equiv  0\pmod {x^n} \\<br>G(x) &amp;\equiv \frac {F(x)+H(x)^2}{2H(x)}  \pmod {x^n}<br>\end{aligned}<br>$$</p>
<p>边界情况需要注意 $G(0)$ 是 $F(0)$ 的二次剩余！</p>
<p>因此我们直接 $O(n \log n)$ 求即可，下面以 <a href="https://www.luogu.com.cn/problem/P5205">P5205 【模板】多项式开根</a> 欣赏一下代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 500005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,G,invG,inv2,i,res[N],qm[N],val[N],val2[N],temp[N],temp2[N],tempa[N],tempb[N],sqval[N],valq[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>,t = a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		res[i]=((res[i&gt;&gt;<span class="number">1</span>])&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(i&amp;<span class="number">1</span>) res[i]+=(n&gt;&gt;<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *f,ll n,ll type)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(i&lt;res[i]) <span class="built_in">swap</span>(f[i],f[res[i]]);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i*=<span class="number">2</span>)&#123;</span><br><span class="line">		ll wn = <span class="built_in">qmi</span>((type==<span class="number">1</span>?G:invG),(mod<span class="number">-1</span>)/(i*<span class="number">2</span>),mod);</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;i;j++) qm[j]=qm[j<span class="number">-1</span>]*wn%mod;</span><br><span class="line">		<span class="keyword">for</span>(ll r=i*<span class="number">2</span>,j=<span class="number">0</span>;j&lt;n;j+=r)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll k=<span class="number">0</span>;k&lt;i;k++)&#123;</span><br><span class="line">				ll x = f[j+k],y = qm[k]*f[j+k+i]%mod;</span><br><span class="line">				f[j+k] = (x+y)%mod,f[j+k+i] = (x-y+mod)%mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">char</span> buf[<span class="number">1000000</span>],*p=buf,*q=buf;</span><br><span class="line">	<span class="keyword">return</span> p==q&amp;&amp;(q=(p=buf)+<span class="built_in">fread</span>(buf,<span class="number">1</span>,<span class="number">1000000</span>,stdin),p==q)?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)res=res*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> obuf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p3=obuf; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span>&#123; </span><br><span class="line">	p3-obuf&lt;=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)?(*p3++=c):(<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout),p3=obuf,*p3++=c); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(ll x)</span></span>&#123; </span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">pc</span>(<span class="string">&#x27;-&#x27;</span>),x=-x; </span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">write</span>(x/<span class="number">10</span>); </span><br><span class="line">	<span class="built_in">pc</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">times</span><span class="params">(ll *a,ll *b,ll *c,ll n,ll tim)</span></span>&#123;</span><br><span class="line">	ll nn = n;</span><br><span class="line">	<span class="keyword">while</span>((n&amp;(-n))!=n) n++;</span><br><span class="line">	n*=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) tempa[i]=(i&gt;=nn?<span class="number">0</span>:a[i]),tempb[i]=(i&gt;=nn?<span class="number">0</span>:b[i]);</span><br><span class="line">	<span class="built_in">init</span>(n),<span class="built_in">ntt</span>(tempa,n,<span class="number">1</span>),<span class="built_in">ntt</span>(tempb,n,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(tim==<span class="number">1</span>) c[i]=tempa[i]*tempb[i]%mod;</span><br><span class="line">		<span class="keyword">else</span> c[i]=tempa[i]*tempb[i]%mod*tempb[i]%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ntt</span>(c,n,<span class="number">-1</span>);</span><br><span class="line">	ll invn = <span class="built_in">qmi</span>(n,mod<span class="number">-2</span>,mod);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) c[i]=c[i]*invn%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">		val2[<span class="number">0</span>] = <span class="built_in">qmi</span>(val[<span class="number">0</span>],mod<span class="number">-2</span>,mod);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	ll len = (x+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">solve</span>(len);</span><br><span class="line">	<span class="built_in">times</span>(val,val2,temp2,x,<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) val2[i]=((<span class="number">2</span>*val2[i]-temp2[i])%mod+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">sqr</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">		sqval[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sqr</span>((x+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">times</span>(sqval,sqval,temp,x,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) temp[i]=(temp[i]+valq[i])%mod;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) val[i]=sqval[i],val2[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">solve</span>(x);</span><br><span class="line">	<span class="built_in">times</span>(temp,val2,temp,x,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) sqval[i]=temp[i]*inv2%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	G=<span class="number">3</span>,invG=<span class="built_in">qmi</span>(G,mod<span class="number">-2</span>,mod),qm[<span class="number">0</span>]=<span class="number">1</span>,inv2=<span class="built_in">qmi</span>(<span class="number">2</span>,mod<span class="number">-2</span>,mod);</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) valq[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">sqr</span>(n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">write</span>(sqval[i]),<span class="built_in">pc</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>推荐多项式求逆写一个比较好看的函数，这样的话方便调试。</p>
<h3 id="多项式对数函数-ln"><a href="#多项式对数函数-ln" class="headerlink" title="多项式对数函数 ln"></a>多项式对数函数 ln</h3><p>首先设 $f’(x) &#x3D; \lim_{x \to 0} \frac {\Delta f(x)}{\Delta x}$，说人话就是斜率。</p>
<p>那么多项式 ln 需要用到的公式就是：$(\ln x)’&#x3D; \frac 1x$，$(x^a)’&#x3D;ax^{a-1}$，$(f(g(x)))’&#x3D;f’(g(x))g’(x)$。</p>
<p>那么就有 $G(x)&#x3D;F(A(x)),F(x)&#x3D;\ln(x)$，两边求导得 $G’(x)&#x3D;F’(A(x))A’(x)&#x3D;\frac {A’(x)}{A(x)}$，于是直接求导乘上逆元就可以了。</p>
<p>最后我们要通过 $G’(x)$ 还原出 $G(x)$，于是进行求导的逆运算——积分就可以了。</p>
<p>这里的积分就是 $\int x^adx&#x3D;\frac{1}{a+1}x^{a+1}$ 这一个公式。</p>
<p>代码以 <a href="https://www.luogu.com.cn/problem/P4725">P4725 【模板】多项式对数函数（多项式 ln）</a> 为例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 500005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,m,x,G,invG,inv2,i,res[N],qm[N],val[N],val2[N],temp[N],temp2[N],tempas[N],tempa[N],tempb[N],sqval[N],valqs[N],valq[N],ans[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>,t = a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		res[i]=((res[i&gt;&gt;<span class="number">1</span>])&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(i&amp;<span class="number">1</span>) res[i]+=(n&gt;&gt;<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *f,ll n,ll type)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(i&lt;res[i]) <span class="built_in">swap</span>(f[i],f[res[i]]);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i*=<span class="number">2</span>)&#123;</span><br><span class="line">		ll wn = <span class="built_in">qmi</span>((type==<span class="number">1</span>?G:invG),(mod<span class="number">-1</span>)/(i*<span class="number">2</span>),mod);</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;i;j++) qm[j]=qm[j<span class="number">-1</span>]*wn%mod;</span><br><span class="line">		<span class="keyword">for</span>(ll r=i*<span class="number">2</span>,j=<span class="number">0</span>;j&lt;n;j+=r)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll k=<span class="number">0</span>;k&lt;i;k++)&#123;</span><br><span class="line">				ll x = f[j+k],y = qm[k]*f[j+k+i]%mod;</span><br><span class="line">				f[j+k] = (x+y)%mod,f[j+k+i] = (x-y+mod)%mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">char</span> buf[<span class="number">1000000</span>],*p=buf,*q=buf;</span><br><span class="line">	<span class="keyword">return</span> p==q&amp;&amp;(q=(p=buf)+<span class="built_in">fread</span>(buf,<span class="number">1</span>,<span class="number">1000000</span>,stdin),p==q)?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)res=res*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> obuf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p3=obuf; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span>&#123; </span><br><span class="line">	p3-obuf&lt;=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)?(*p3++=c):(<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout),p3=obuf,*p3++=c); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(ll x)</span></span>&#123; </span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">pc</span>(<span class="string">&#x27;-&#x27;</span>),x=-x; </span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">write</span>(x/<span class="number">10</span>); </span><br><span class="line">	<span class="built_in">pc</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">times</span><span class="params">(ll *a,ll *b,ll *c,ll n,ll tim)</span></span>&#123;</span><br><span class="line">	ll nn = n;</span><br><span class="line">	<span class="keyword">while</span>((n&amp;(-n))!=n) n++;</span><br><span class="line">	n*=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) tempa[i]=(i&gt;=nn?<span class="number">0</span>:a[i]),tempb[i]=(i&gt;=nn?<span class="number">0</span>:b[i]);</span><br><span class="line">	<span class="built_in">init</span>(n),<span class="built_in">ntt</span>(tempa,n,<span class="number">1</span>),<span class="built_in">ntt</span>(tempb,n,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(tim==<span class="number">1</span>) c[i]=tempa[i]*tempb[i]%mod;</span><br><span class="line">		<span class="keyword">else</span> c[i]=tempa[i]*tempb[i]%mod*tempb[i]%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ntt</span>(c,n,<span class="number">-1</span>);</span><br><span class="line">	ll invn = <span class="built_in">qmi</span>(n,mod<span class="number">-2</span>,mod);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) c[i]=c[i]*invn%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">		val2[<span class="number">0</span>] = <span class="built_in">qmi</span>(val[<span class="number">0</span>],mod<span class="number">-2</span>,mod);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	ll len = (x+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">solve</span>(len);</span><br><span class="line">	<span class="built_in">times</span>(val,val2,temp2,x,<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) val2[i]=((<span class="number">2</span>*val2[i]-temp2[i])%mod+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">sqr</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">		sqval[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sqr</span>((x+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">times</span>(sqval,sqval,temp,x,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) temp[i]=(temp[i]+valq[i])%mod;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) val[i]=sqval[i],val2[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">solve</span>(x);</span><br><span class="line">	<span class="built_in">times</span>(temp,val2,temp,x,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) sqval[i]=temp[i]*inv2%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">qd</span><span class="params">(ll *f,ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;x;i++) f[i<span class="number">-1</span>]=f[i]*i;</span><br><span class="line">	f[x<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">jf</span><span class="params">(ll *f,ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=x<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--) f[i]=f[i<span class="number">-1</span>]*<span class="built_in">qmi</span>(i,mod<span class="number">-2</span>,mod)%mod;</span><br><span class="line">	f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ln</span><span class="params">(ll *f,ll *ans,ll n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) val[i]=f[i];</span><br><span class="line">	<span class="built_in">solve</span>(n),<span class="built_in">qd</span>(f,n);</span><br><span class="line">	<span class="built_in">times</span>(f,val2,ans,n,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">jf</span>(ans,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	G=<span class="number">3</span>,invG=<span class="built_in">qmi</span>(G,mod<span class="number">-2</span>,mod),qm[<span class="number">0</span>]=<span class="number">1</span>,inv2=<span class="built_in">qmi</span>(<span class="number">2</span>,mod<span class="number">-2</span>,mod);</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) tempas[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">ln</span>(tempas,ans,n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">write</span>(ans[i]),<span class="built_in">pc</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多项式指数函数-exp"><a href="#多项式指数函数-exp" class="headerlink" title="多项式指数函数 exp"></a>多项式指数函数 exp</h3><h4 id="牛顿迭代"><a href="#牛顿迭代" class="headerlink" title="牛顿迭代"></a>牛顿迭代</h4><p>牛顿迭代主要用来求解一个函数的零点的整数值（不用精确到小数），首先我们随机取一个点 $x$ 算出其函数值 $y&#x3D;f(x)$，然后我们要得到过点 $(x,y)$ 并且切函数 $f(x)$ 的直线。</p>
<p>这个很好办，首先求出导数，即点上的斜率 $f’(x)$，那么直线表达式就是 $y&#x3D;f’(x)(x_0-x)+f(x)$（$x_0$ 是带进去的值）。</p>
<p>然后找到其与 $x$ 轴的交点，令交点为下一次随机选择的点处理即可，即 $y&#x3D;0$，然后得到 $x_0&#x3D;x-\frac{f(x)}{f’(x)}$，放到多项式上也是同理。</p>
<p>那么我们要找到一个函数 $G(x)$ 满足 $F(G(x))&#x3D;0$，那么每次令 $G_0(x)&#x3D;G(x)-\frac {F(G(x))}{(F’(G(x)))}$ 就可以了，事实上每次执行精度都会翻倍，即若 $F(G(x)) \equiv 0 \pmod {x^n}$ 那么 $F(G_0(x)) \equiv 0 \pmod {x^{2n}}$。</p>
<h4 id="牛顿迭代-to-多项式-exp"><a href="#牛顿迭代-to-多项式-exp" class="headerlink" title="牛顿迭代 $\to$ 多项式 exp"></a>牛顿迭代 $\to$ 多项式 exp</h4><p>题目给定 $A(x)$ 求 $B(x) \equiv e^{A(x)} \pmod {x^n}$，那么就有 $\ln B(x)-A(x) \equiv 0 \pmod {x^n}$，我们需要构造函数 $F(G(x))&#x3D;\ln G(x)-A(x) \equiv 0 \pmod {x^n}$。</p>
<p>则 $F’(G(x))&#x3D;(\ln(G(x))’-A(x)’)&#x3D;\frac{1}{G(x)}$，所以 $G_0(x)&#x3D;G(x)-\frac{\ln G(x)-A(x)}{\frac{1}{G(x)}}&#x3D;G(x)-\frac{G(x)(\ln G(x)-A(x))}{1}&#x3D;G(x)(1-\ln G(x)+A(x))$。</p>
<p>所以每次牛顿迭代求解即可，时间复杂度依然是大常数 $O(n \log n)$，边界情况就是 $B(0)&#x3D;G(0)&#x3D;1$。</p>
<p><strong>特别地：只有当 $A(0)&#x3D;0$ 的时候才能用 exp，当 $A(0)&#x3D;1$ 的时候才能用 ln，两者的关系是相互的！</strong></p>
<p>代码以 <a href="https://www.luogu.com.cn/problem/P4726">P4726 【模板】多项式指数函数（多项式 exp） </a> 为例参考：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 500005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,m,x,G,invG,inv2,i,res[N],qm[N],val[N],val2[N],temp[N],temp2[N],nexp[N],expx[N],tempa[N],tempb[N],sqval[N],valqs[N],valq[N],ans[N];</span><br><span class="line">ll tempas[N],tempbs[N],tempcs[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>,t = a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		res[i]=((res[i&gt;&gt;<span class="number">1</span>])&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(i&amp;<span class="number">1</span>) res[i]+=(n&gt;&gt;<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *f,ll n,ll type)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(i&lt;res[i]) <span class="built_in">swap</span>(f[i],f[res[i]]);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i*=<span class="number">2</span>)&#123;</span><br><span class="line">		ll wn = <span class="built_in">qmi</span>((type==<span class="number">1</span>?G:invG),(mod<span class="number">-1</span>)/(i*<span class="number">2</span>),mod);</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;i;j++) qm[j]=qm[j<span class="number">-1</span>]*wn%mod;</span><br><span class="line">		<span class="keyword">for</span>(ll r=i*<span class="number">2</span>,j=<span class="number">0</span>;j&lt;n;j+=r)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll k=<span class="number">0</span>;k&lt;i;k++)&#123;</span><br><span class="line">				ll x = f[j+k],y = qm[k]*f[j+k+i]%mod;</span><br><span class="line">				f[j+k] = (x+y)%mod,f[j+k+i] = (x-y+mod)%mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">char</span> buf[<span class="number">1000000</span>],*p=buf,*q=buf;</span><br><span class="line">	<span class="keyword">return</span> p==q&amp;&amp;(q=(p=buf)+<span class="built_in">fread</span>(buf,<span class="number">1</span>,<span class="number">1000000</span>,stdin),p==q)?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)res=res*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> obuf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p3=obuf; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span>&#123; </span><br><span class="line">	p3-obuf&lt;=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)?(*p3++=c):(<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout),p3=obuf,*p3++=c); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(ll x)</span></span>&#123; </span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">pc</span>(<span class="string">&#x27;-&#x27;</span>),x=-x; </span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">write</span>(x/<span class="number">10</span>); </span><br><span class="line">	<span class="built_in">pc</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">times</span><span class="params">(ll *a,ll *b,ll *c,ll n,ll tim)</span></span>&#123;</span><br><span class="line">	ll nn = n;</span><br><span class="line">	<span class="keyword">while</span>((n&amp;(-n))!=n) n++;</span><br><span class="line">	n*=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) tempa[i]=(i&gt;=nn?<span class="number">0</span>:a[i]),tempb[i]=(i&gt;=nn?<span class="number">0</span>:b[i]);</span><br><span class="line">	<span class="built_in">init</span>(n),<span class="built_in">ntt</span>(tempa,n,<span class="number">1</span>),<span class="built_in">ntt</span>(tempb,n,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(tim==<span class="number">1</span>) c[i]=tempa[i]*tempb[i]%mod;</span><br><span class="line">		<span class="keyword">else</span> c[i]=tempa[i]*tempb[i]%mod*tempb[i]%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ntt</span>(c,n,<span class="number">-1</span>);</span><br><span class="line">	ll invn = <span class="built_in">qmi</span>(n,mod<span class="number">-2</span>,mod);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) c[i]=c[i]*invn%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">		val2[<span class="number">0</span>] = <span class="built_in">qmi</span>(val[<span class="number">0</span>],mod<span class="number">-2</span>,mod);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	ll len = (x+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">solve</span>(len);</span><br><span class="line">	<span class="keyword">for</span>(ll i=len;i&lt;x;i++) val2[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">times</span>(val,val2,temp2,x,<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) val2[i]=((<span class="number">2</span>*val2[i]-temp2[i])%mod+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">poly</span>&#123;ll a,b;&#125;ress,t;</span><br><span class="line">ll nk,nks;</span><br><span class="line">poly <span class="keyword">operator</span>*(poly a,poly b)&#123;<span class="keyword">return</span> (poly)&#123;((a.a*b.a+a.b*b.b%mod*((nks*nks-nk)%mod))+mod)%mod,(a.b*b.a+a.a*b.b)%mod&#125;;&#125;</span><br><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(time(<span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">cipolla</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	nk=n;</span><br><span class="line">	ll x,y;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		x=<span class="built_in">rnd</span>()%mod;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">qmi</span>((((x*x-n)%mod)+mod)%mod,(mod<span class="number">-1</span>)/<span class="number">2</span>,mod)==mod<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ress.a = <span class="number">1</span>,ress.b = <span class="number">0</span>,t.a = x,t.b = <span class="number">1</span>,nks = x;</span><br><span class="line">	y = (mod+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">while</span>(y)&#123;</span><br><span class="line">		<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ress=ress*t;</span><br><span class="line">		t=t*t;</span><br><span class="line">		y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">min</span>(ress.a,mod-ress.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">sqr</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">		sqval[<span class="number">0</span>]=<span class="built_in">cipolla</span>(valq[<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sqr</span>((x+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">times</span>(sqval,sqval,temp,x,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) temp[i]=(temp[i]+valq[i])%mod;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) val[i]=sqval[i];</span><br><span class="line">	<span class="built_in">solve</span>(x);</span><br><span class="line">	<span class="built_in">times</span>(temp,val2,temp,x,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) sqval[i]=temp[i]*inv2%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">qd</span><span class="params">(ll *f,ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;x;i++) f[i<span class="number">-1</span>]=f[i]*i;</span><br><span class="line">	f[x<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">jf</span><span class="params">(ll *f,ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=x<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--) f[i]=f[i<span class="number">-1</span>]*<span class="built_in">qmi</span>(i,mod<span class="number">-2</span>,mod)%mod;</span><br><span class="line">	f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ln</span><span class="params">(ll *f,ll *ans,ll n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) val[i]=f[i],val2[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">solve</span>(n),<span class="built_in">qd</span>(f,n);</span><br><span class="line">	<span class="built_in">times</span>(f,val2,ans,n,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">jf</span>(ans,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;G=<span class="number">3</span>,invG=<span class="built_in">qmi</span>(G,mod<span class="number">-2</span>,mod),qm[<span class="number">0</span>]=<span class="number">1</span>,inv2=<span class="built_in">qmi</span>(<span class="number">2</span>,mod<span class="number">-2</span>,mod);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">newton</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">		expx[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">newton</span>((x+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) tempcs[i]=expx[i];</span><br><span class="line">	<span class="built_in">ln</span>(tempcs,tempas,x);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) tempas[i]=(mod-tempas[i]+nexp[i])%mod;</span><br><span class="line">	tempas[<span class="number">0</span>]=(tempas[<span class="number">0</span>]+<span class="number">1</span>)%mod;</span><br><span class="line">	<span class="built_in">times</span>(tempas,expx,tempbs,x,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) expx[i]=tempbs[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) nexp[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">newton</span>(n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">write</span>(expx[i]),<span class="built_in">pc</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多项式快速幂"><a href="#多项式快速幂" class="headerlink" title="多项式快速幂"></a>多项式快速幂</h3><p>求 $A(x)^k$ 的值，首先取 $\ln$，然后在 $\ln$ 下乘上 $k$，最后再 $\exp$ 回去就可以了。</p>
<p>代码以 <a href="https://www.luogu.com.cn/problem/P5273">P5273 【模板】多项式幂函数（加强版） </a> 为例参考：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 500005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,m,k,x,G,invG,inv2,i,j,valll[N],res[N],qm[N],val[N],val2[N],temp[N],temp2[N],nexp[N],expx[N],tempa[N],tempb[N],sqval[N],valqs[N],valq[N],ans[N];</span><br><span class="line">ll tempas[N],tempbs[N],tempcs[N],vall[N],pos,qms,modphi,ks,ifdy;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>,t = a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		res[i]=((res[i&gt;&gt;<span class="number">1</span>])&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(i&amp;<span class="number">1</span>) res[i]+=(n&gt;&gt;<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *f,ll n,ll type)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(i&lt;res[i]) <span class="built_in">swap</span>(f[i],f[res[i]]);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i*=<span class="number">2</span>)&#123;</span><br><span class="line">		ll wn = <span class="built_in">qmi</span>((type==<span class="number">1</span>?G:invG),(mod<span class="number">-1</span>)/(i*<span class="number">2</span>),mod);</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;i;j++) qm[j]=qm[j<span class="number">-1</span>]*wn%mod;</span><br><span class="line">		<span class="keyword">for</span>(ll r=i*<span class="number">2</span>,j=<span class="number">0</span>;j&lt;n;j+=r)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll k=<span class="number">0</span>;k&lt;i;k++)&#123;</span><br><span class="line">				ll x = f[j+k],y = qm[k]*f[j+k+i]%mod;</span><br><span class="line">				f[j+k] = (x+y)%mod,f[j+k+i] = (x-y+mod)%mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">char</span> buf[<span class="number">1000000</span>],*p=buf,*q=buf;</span><br><span class="line">	<span class="keyword">return</span> p==q&amp;&amp;(q=(p=buf)+<span class="built_in">fread</span>(buf,<span class="number">1</span>,<span class="number">1000000</span>,stdin),p==q)?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">0</span>;</span><br><span class="line">	modphi = <span class="number">0</span>;</span><br><span class="line">	ifdy = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)c=<span class="built_in">nc</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)res=res*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,ifdy|=(res&gt;=mod),modphi=modphi*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=<span class="built_in">nc</span>(),res%=mod,modphi%=(mod<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> obuf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p3=obuf; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span>&#123; </span><br><span class="line">	p3-obuf&lt;=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)?(*p3++=c):(<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout),p3=obuf,*p3++=c); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(ll x)</span></span>&#123; </span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">pc</span>(<span class="string">&#x27;-&#x27;</span>),x=-x; </span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">write</span>(x/<span class="number">10</span>); </span><br><span class="line">	<span class="built_in">pc</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">times</span><span class="params">(ll *a,ll *b,ll *c,ll n,ll tim)</span></span>&#123;</span><br><span class="line">	ll nn = n;</span><br><span class="line">	<span class="keyword">while</span>((n&amp;(-n))!=n) n++;</span><br><span class="line">	n*=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) tempa[i]=(i&gt;=nn?<span class="number">0</span>:a[i]),tempb[i]=(i&gt;=nn?<span class="number">0</span>:b[i]);</span><br><span class="line">	<span class="built_in">init</span>(n),<span class="built_in">ntt</span>(tempa,n,<span class="number">1</span>),<span class="built_in">ntt</span>(tempb,n,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(tim==<span class="number">1</span>) c[i]=tempa[i]*tempb[i]%mod;</span><br><span class="line">		<span class="keyword">else</span> c[i]=tempa[i]*tempb[i]%mod*tempb[i]%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ntt</span>(c,n,<span class="number">-1</span>);</span><br><span class="line">	ll invn = <span class="built_in">qmi</span>(n,mod<span class="number">-2</span>,mod);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) c[i]=c[i]*invn%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">		val2[<span class="number">0</span>] = <span class="built_in">qmi</span>(val[<span class="number">0</span>],mod<span class="number">-2</span>,mod);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	ll len = (x+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">solve</span>(len);</span><br><span class="line">	<span class="keyword">for</span>(ll i=len;i&lt;x;i++) val2[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">times</span>(val,val2,temp2,x,<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) val2[i]=((<span class="number">2</span>*val2[i]-temp2[i])%mod+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">poly</span>&#123;ll a,b;&#125;ress,t;</span><br><span class="line">ll nk,nks,kifdy;</span><br><span class="line">poly <span class="keyword">operator</span>*(poly a,poly b)&#123;<span class="keyword">return</span> (poly)&#123;((a.a*b.a+a.b*b.b%mod*((nks*nks-nk)%mod))+mod)%mod,(a.b*b.a+a.a*b.b)%mod&#125;;&#125;</span><br><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(time(<span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">cipolla</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	nk=n;</span><br><span class="line">	ll x,y;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		x=<span class="built_in">rnd</span>()%mod;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">qmi</span>((((x*x-n)%mod)+mod)%mod,(mod<span class="number">-1</span>)/<span class="number">2</span>,mod)==mod<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ress.a = <span class="number">1</span>,ress.b = <span class="number">0</span>,t.a = x,t.b = <span class="number">1</span>,nks = x;</span><br><span class="line">	y = (mod+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">while</span>(y)&#123;</span><br><span class="line">		<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ress=ress*t;</span><br><span class="line">		t=t*t;</span><br><span class="line">		y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">min</span>(ress.a,mod-ress.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">sqr</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">		sqval[<span class="number">0</span>]=<span class="built_in">cipolla</span>(valq[<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sqr</span>((x+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">times</span>(sqval,sqval,temp,x,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) temp[i]=(temp[i]+valq[i])%mod;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) val[i]=sqval[i];</span><br><span class="line">	<span class="built_in">solve</span>(x);</span><br><span class="line">	<span class="built_in">times</span>(temp,val2,temp,x,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) sqval[i]=temp[i]*inv2%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">qd</span><span class="params">(ll *f,ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;x;i++) f[i<span class="number">-1</span>]=f[i]*i;</span><br><span class="line">	f[x<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">jf</span><span class="params">(ll *f,ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=x<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--) f[i]=f[i<span class="number">-1</span>]*<span class="built_in">qmi</span>(i,mod<span class="number">-2</span>,mod)%mod;</span><br><span class="line">	f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ln</span><span class="params">(ll *f,ll *ans,ll n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) val[i]=f[i],val2[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">solve</span>(n),<span class="built_in">qd</span>(f,n);</span><br><span class="line">	<span class="built_in">times</span>(f,val2,ans,n,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">jf</span>(ans,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;G=<span class="number">3</span>,invG=<span class="built_in">qmi</span>(G,mod<span class="number">-2</span>,mod),qm[<span class="number">0</span>]=<span class="number">1</span>,inv2=<span class="built_in">qmi</span>(<span class="number">2</span>,mod<span class="number">-2</span>,mod);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">newton</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">		expx[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">newton</span>((x+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) tempcs[i]=expx[i];</span><br><span class="line">	<span class="built_in">ln</span>(tempcs,tempas,x);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) tempas[i]=(mod-tempas[i]+nexp[i])%mod;</span><br><span class="line">	tempas[<span class="number">0</span>]=(tempas[<span class="number">0</span>]+<span class="number">1</span>)%mod;</span><br><span class="line">	<span class="built_in">times</span>(tempas,expx,tempbs,x,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) expx[i]=tempbs[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	n++;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) vall[i]=<span class="built_in">read</span>(),valll[i]=vall[i];</span><br><span class="line">	k=<span class="built_in">read</span>(),ks=modphi,kifdy=ifdy;</span><br><span class="line">	m=<span class="built_in">read</span>();</span><br><span class="line">	n=<span class="built_in">max</span>(n,m);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(vall[i]!=<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">	pos=i;</span><br><span class="line">	<span class="keyword">for</span>(j=i;j&lt;n;j++) vall[j-i]=valll[j];</span><br><span class="line">	n-=pos,qms=valll[pos];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) vall[i]=vall[i]*<span class="built_in">qmi</span>(qms,mod<span class="number">-2</span>,mod)%mod;</span><br><span class="line">	<span class="built_in">ln</span>(vall,nexp,n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) nexp[i]=nexp[i]*k%mod;</span><br><span class="line">	<span class="built_in">newton</span>(n);</span><br><span class="line">	<span class="keyword">if</span>(pos&gt;<span class="number">0</span>&amp;&amp;kifdy)&#123;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n+pos;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i&gt;=m) <span class="keyword">break</span>;</span><br><span class="line">			<span class="built_in">write</span>(<span class="number">0</span>),<span class="built_in">pc</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="built_in">min</span>(n+pos,pos*k);i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i&gt;=m) <span class="keyword">break</span>;</span><br><span class="line">		<span class="built_in">write</span>(<span class="number">0</span>),<span class="built_in">pc</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=pos*k;i&lt;n+pos;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i&gt;=m) <span class="keyword">break</span>;</span><br><span class="line">		<span class="built_in">write</span>(expx[i-pos*k]*<span class="built_in">qmi</span>(qms,ks,mod)%mod),<span class="built_in">pc</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10 3</span></span><br><span class="line"><span class="comment">0 0 4 2 1 5 6 7 9 5</span></span><br><span class="line"><span class="comment">0 0 0 27 108 198</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>代码中添加了加强版的数据判断，因为有可能不保证 $A(0)&#x3D;1$，所以要找到一个最小的 $i$ 使得 $\forall 0 \le j&lt;i,A(j)&#x3D;0,A(i) \ne 0$，然后全部除以 $A(i)x^i$，这样的话 $A(0)$ 就是 $1$ 了。</p>
<p>最后答案需要乘上 $A(i)^k x^{ik}$，特别注意，输入的 $k$ 次方满足 $A(x)^k \equiv A(x)^{k \ \bmod \ p} \pmod{p}$，$p$ 足够大，这道题 $p&#x3D;998244353$ 已经足够大了。</p>
<p>但是 $A(i)^k$ 却不满足上述公式，它满足的是欧拉公式，即 $A(i)^k \equiv A(i)^{k \ \bmod \ \varphi(p)} \pmod p$，所以还要新建一个变量表示 $k \bmod \varphi(p)$。（前提是 $\gcd(p,k)$ 互质，因为 $p&#x3D;998244353$，所以也可以使用）</p>
<p>最后记得特判一下 $x^{ik} \ge x^n$ 的情况。</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>拉格朗日插值</tag>
        <tag>多项式</tag>
        <tag>FFT</tag>
        <tag>NTT</tag>
        <tag>FWT</tag>
      </tags>
  </entry>
  <entry>
    <title>计算几何</title>
    <url>/2024/03/10/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/</url>
    <content><![CDATA[<h1 id="计算几何"><a href="#计算几何" class="headerlink" title="计算几何"></a>计算几何</h1><h2 id="点和向量"><a href="#点和向量" class="headerlink" title="点和向量"></a>点和向量</h2><p>首先二维平面的点用 $(x,y)$ 表示，向量是一个具有方向和大小的线段，向量 $(x,y)$ 可以理解为从原点 $O(0,0)$ 向 $(x,y)$ 连接出去的一条线段，同时具有方向。</p>
<p>当然，向量可以平移，平移后的向量用 $(A,B)$ 表示，$A,B$ 均为点，此时的向量等同于之前的 $(B_x-A_x,B_y-A_y)$（即把 $A$ 平移到原点的位置）</p>
<p><strong>两点之间距离公式：$\sqrt{(A_x-B_x)^2+(A_y-B_y)^2}$，这就是一个向量的大小。</strong></p>
<h3 id="向量的运算"><a href="#向量的运算" class="headerlink" title="向量的运算"></a>向量的运算</h3><ul>
<li><p>向量 $(x,y)$ 加点 $A$，这个可以理解为将 $A$ 点顺着向量的方向移动，结果就是一个新的点 $(x+A_x,y+A_y)$。</p>
</li>
<li><p>向量 $(x,y)$ 加&#x2F;减向量 $(x’,y’)$，得到 $(x+x’,y+y’)$，这个没有太大的几何意义。</p>
</li>
<li><p>向量 $(x,y)$ 乘&#x2F;除实数 $k$ 得到 $(xk,yk)$，得到等比例放大&#x2F;缩小的向量。</p>
</li>
</ul>
<h3 id="点积"><a href="#点积" class="headerlink" title="点积"></a>点积</h3><p>设 $|A|$ 表示向量 $A$ 的大小，那么定义向量 $A$ 和向量 $B$ 的点积是 $A\cdot B&#x3D; |A||B|\cos \theta$，其中 $\theta$ 是 $A,B$ 之间的夹角。</p>
<p>点积的几何意义就是 $A$ 在 $B$ 上的投影长度乘以 $B$ 的模长。</p>
<p>点积并不是很常用，计算它也不需要得到 $\theta$，只需要 $A_xB_x+A_yB_y$ 就好，公式推导需要用到三角函数，此处不再赘述。</p>
<p>应用：若 $A \cdot B&gt;0$，则 $\theta$ 为锐角；若 $A \cdot B&#x3D;0$，则 $\theta$ 为直角，否则 $\theta$ 为钝角。</p>
<h3 id="叉积"><a href="#叉积" class="headerlink" title="叉积"></a>叉积</h3><p>设 $|A|$ 表示向量 $A$ 的大小，那么定义向量 $A$ 和向量 $B$ 的叉积是 $A\times B&#x3D; |A||B|\sin \theta$，其中 $\theta$ 是 $A,B$ 之间的夹角。</p>
<p>叉积的几何意义就是 $A$ 和 $B$ 两个向量形成的平行四边形的<strong>有向</strong>面积，即如果 $A$ 在 $B$ 的上方，它就是负数；否则是正数。（逆时针围成的图形面积）</p>
<p>如果 $A$ 和 $B$ 在同一直线（方向可能不同），那么 $A \times B&#x3D;0$。</p>
<p>计算叉积也不需要得到 $\theta$，只需要 $A_xB_y-A_yB_x$ 就好，公式推导需要用到三角函数，此处不再赘述。</p>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>如果 $A \times B&gt;0$，则 $B$ 在 $A$ 的逆时针方向，如果 $A \times B&lt;0$，则 $B$ 在 $A$ 的顺时针方向；否则 $A,B$ 共线。</p>
<p>如果计算三个点构成的有向平行四边形的面积，那就让其中某个点作为原点，然后计算新的向量 $A’ \times B’$ 即可。</p>
<p>如果是计算三角形，答案取绝对值然后除以 $2$ 就可以了。</p>
<p>因为向量可以平移，我们还可以用叉积来判断两个向量是否平行或者重合。</p>
<h4 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h4><p>向量 $A$ 逆时针旋转 $\theta$，则得到新的向量 $A’&#x3D;(x \cos \theta-y \sin \theta,x \sin \theta+y \cos \theta)$。</p>
<p>如果是旋转 $\frac {\pi}{2}$ 的倍数，那么交换 $x,y$ 再视情况取反就可以了，这个分类讨论不难。</p>
<h2 id="直线、射线和线段"><a href="#直线、射线和线段" class="headerlink" title="直线、射线和线段"></a>直线、射线和线段</h2><p>直线表达式常用的有两种写法 $ax+by+c&#x3D;0$ 和 $y&#x3D;kx+b$，两种写法都比较好用，但是我更喜欢后面的一种写法。</p>
<p>线段可以用两个点直接表示，同时也可以写出包含此线段的直线。</p>
<p>下面设直线 $l(A,B)$ 表示包含两个点 $A,B$ 的直线 $l$，则我们可以得到：</p>
<h3 id="点和直线的位置关系"><a href="#点和直线的位置关系" class="headerlink" title="点和直线的位置关系"></a>点和直线的位置关系</h3><p>直线上任取两个点 $A,B$，与另外的点 $P$ 构成两个向量 $(B,P),(A,B)$，如果这两个向量的叉积 $&gt;0$，代表 $P$ 在直线右侧；$&lt;0$ $P$ 在直线左侧；否则 $P$ 在直线上。</p>
<p>同理可以定义点和线段的位置关系，这个用上面的分类讨论一下就可以了。</p>
<h3 id="点到直线距离"><a href="#点到直线距离" class="headerlink" title="点到直线距离"></a>点到直线距离</h3><p>已知点 $P$ 和直线 $l(A,B)$，可以求出 $AB$ 线段的长度，和 $P,A,B$ 用叉积求出平行四边形面积，除以 $AB$ 长度就是高，即点 $P$ 到 $l$ 的距离。</p>
<h3 id="点在直线上的投影"><a href="#点在直线上的投影" class="headerlink" title="点在直线上的投影"></a>点在直线上的投影</h3><p>已知直线上两个点 $p_1,p_2$，以及直线外一个点 $p$ 求 $p$ 在 $l$ 上的投影 $p_0$。</p>
<p>设 $k&#x3D;\dfrac {|p_0-p_1|}{|p_2-p_1|}$，那么求得 $k$ 就知道了 $p_0$ 的位置，因为 $k$ 是这两条线段的比值。</p>
<p>根据点积的概念有 $A(p_1,p) \cdot B(p_1,p_2)&#x3D;A(p_1,p_0) \cdot B(p_1,p_2)$，所以 $|p_0-p_1|&#x3D;\dfrac {(p-p_1)\cdot (p_2-p_1)}{|p_2-p_1|}$，带入 $k$ 得到 $k&#x3D;\dfrac {(p-p_1)\cdot (p_2-p_1)}{|p_2-p_1||p_2-p_1|}$，所以 $p_0&#x3D;p_1+k(p_2-p_1)&#x3D;p_1+\dfrac {(p-p_1)\cdot (p_2-p_1)}{|p_2-p_1||p_2-p_1|}(p_2-p_1)$。</p>
<p>同理可以得到点对于一条直线的对称点。</p>
<h3 id="点到线段的距离"><a href="#点到线段的距离" class="headerlink" title="点到线段的距离"></a>点到线段的距离</h3><p>下面三个取最小值：</p>
<ul>
<li><p>点到线段某个端点的距离。</p>
</li>
<li><p>点到这个直线的距离。（点的投影在线段上）</p>
</li>
</ul>
<h3 id="直线的位置关系"><a href="#直线的位置关系" class="headerlink" title="直线的位置关系"></a>直线的位置关系</h3><p>两条直线的位置关系直接使用叉积判断即可。</p>
<p>两条线段的位置关系同理可以应用叉积的判断：</p>
<ul>
<li>如果每条线段的两个端点都在另外一条线段的直线的两侧，那么这两条线段相交。</li>
</ul>
<p>于是用最简单的叉积相乘 $&lt;0$ 判断即可。</p>
<h3 id="直线交点"><a href="#直线交点" class="headerlink" title="直线交点"></a>直线交点</h3><p>可以通过两条直线的 $y&#x3D;kx+b$ 联立得到交点，但是这样的话精度和特判有点麻烦，我们可以考虑更加简单的做法。</p>
<p>如果第一条直线上有两个点 $A,B$，第二条直线上有两个点 $C,D$，$P$ 在 $A,B,C,D$ 构成的四边形中间，也就是对角线交点，那么就有相似 $\dfrac {|DP|}{|CP|}&#x3D;\dfrac {S \triangle ABD}{S\triangle ABC}&#x3D;\dfrac {(A,D) \times (A,B))}{(A,B) \times (A,C)}$。</p>
<p>注意：$A$ 在 $B$ 的下方，$C$ 在 $D$ 的左方。（有的时候不需要调整顺序）</p>
<p>那么就有 $\dfrac {|DP|}{|CP|}&#x3D;\dfrac {D_x-P_x}{P_x-C_x}&#x3D;\dfrac {D_y-P_y}{P_y-C_y}$，联立两个方程，得到：</p>
<p>$$<br>P_x &#x3D; \dfrac {S\triangle ABD C_x+S\triangle ABC D_x}{S\triangle ABD+S\triangle ABC}\<br>-\<br>P_y &#x3D; \dfrac {S\triangle ABD C_y+S\triangle ABC D_y}{S\triangle ABD+S\triangle ABC}<br>$$</p>
<p>于是用叉积求三角形面积即可。</p>
<p>线段的交点也就比较简单了，判断是否有交即可，然后求直线交点。</p>
<h2 id="多边形"><a href="#多边形" class="headerlink" title="多边形"></a>多边形</h2><h3 id="点和多边形的关系"><a href="#点和多边形的关系" class="headerlink" title="点和多边形的关系"></a>点和多边形的关系</h3><p>一种方法就是暴力枚举每条边，然后对于每条边的两个端点按照顺序与这个点 $P$ 构成的向量作叉乘，这样的话我们会得到 $n$ 个结果，这 $n$ 个结果要么都是负数，要么都是正数，如果出现其它情况那就说明这个点在多边形外面。</p>
<p>上面这种方法只能用于凸多边形，更加常用的方法是引出来一条射线，然后判断这条射线与多少条边相交，如果是奇数，那么就在多边形内部。</p>
<p>但是需要注意的是我们可能需要进行多次随机取值，因为如果划到了端点就不好判断了，时间复杂度依然是 $O(n)$。</p>
<h3 id="多边形的面积"><a href="#多边形的面积" class="headerlink" title="多边形的面积"></a>多边形的面积</h3><p>直接对于每个边的两个端点与原点构成的向量按照顺序作叉乘就可以了。</p>
<p>最后需要除以 $2$ 并且取绝对值，因为每次求出的相当于是一个三角形的面积，这些三角形因为叉乘有正负，多加的会被容斥掉，所以这么做对凸多边形和凹多边形都可以。</p>
<h2 id="凸包"><a href="#凸包" class="headerlink" title="凸包"></a>凸包</h2><p>例题：<a href="https://www.luogu.com.cn/problem/P2742">P2742 [USACO5.1] 圈奶牛Fencing the Cows &#x2F;【模板】二维凸包</a>。</p>
<p>大意：给定平面上若干个点，求出包含这些点的最小凸多边形的长度，这个凸多边形被称为凸包。</p>
<p>解法如下：</p>
<p>首先我们将所有点按照 $x$ 坐标排序，$x$ 坐标相同的按照 $y$ 坐标排序，这两个维度都是从小到大排序，分上下凸包考虑，此处以下凸包为例，设 $p_1,p_2,\dots,p_k$ 是当前凸包的点集，容易发现排序之后最左边的点和最右边的点都在凸包上。</p>
<p>接下来考虑加入一个点 $x$，那么如果 $(p_{k-1},p_k) \times (p_{k-1},x)&lt;0$，说明 $(p_{k-1},x)$ 在 $(p_{k-1},p_k)$ 下方，应该弹出 $p_k$。</p>
<p>所以每个元素最多被弹出一次，最后处理完上下凸包之后拼起来就可以了。（上凸包需要倒序枚举进栈，并且最后一个点不需要重复进栈）</p>
<p>时间复杂度 $O(n \log n)$，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;db x,y;&#125;p[N],sta[N];</span><br><span class="line"><span class="keyword">inline</span> point <span class="keyword">operator</span>-(point a,point b)&#123;<span class="keyword">return</span> (point)&#123;a.x-b.x,a.y-b.y&#125;;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sgn</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;eps) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;eps) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(point a,point b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">sgn</span>(a.x-b.x)==<span class="number">-1</span>) <span class="keyword">return</span> <span class="built_in">sgn</span>(b.y-a.y);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">sgn</span>(b.x-a.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">cross</span><span class="params">(point a,point b)</span></span>&#123;<span class="keyword">return</span> a.x*b.y-a.y*b.x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">lenth</span><span class="params">(point a,point b)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));&#125;</span><br><span class="line">ll n,i,top,pos;</span><br><span class="line">db ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n,cout&lt;&lt;fixed&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class="line">	<span class="built_in">sort</span>(p+<span class="number">1</span>,p+n+<span class="number">1</span>,cmp);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">while</span>(top&gt;=<span class="number">2</span>&amp;&amp;<span class="built_in">cross</span>(sta[top]-sta[top<span class="number">-1</span>],p[i]-sta[top<span class="number">-1</span>])&lt;=<span class="number">0</span>) top--;</span><br><span class="line">		sta[++top]=p[i];</span><br><span class="line">	&#125;</span><br><span class="line">	pos=top;</span><br><span class="line">	<span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">		<span class="keyword">while</span>(top&gt;=pos+<span class="number">1</span>&amp;&amp;<span class="built_in">cross</span>(sta[top]-sta[top<span class="number">-1</span>],p[i]-sta[top<span class="number">-1</span>])&lt;=<span class="number">0</span>) top--;</span><br><span class="line">		sta[++top]=p[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;top;i++) ans+=<span class="built_in">lenth</span>(sta[i],sta[i+<span class="number">1</span>]);</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个算法被称为 Andrew 算法。</p>
<h3 id="点是否在凸包内部"><a href="#点是否在凸包内部" class="headerlink" title="点是否在凸包内部"></a>点是否在凸包内部</h3><p>凸包内最左边的那个点作为原点，剩下的点按照逆时针通过叉积排序就可以了。</p>
<p>查找的时候二分出来它应该插入到哪个位置，得到前后两个点，然后根据叉积判断位置关系就可以了。</p>
<p>还要特判边界情况，即在凸包最后一个点的外侧或者第一个点的外侧或者和原点重合了。</p>
<p>时间复杂度 $O(\log n)$，甚至不需要扫描每一条边。</p>
<h2 id="闵可夫斯基和"><a href="#闵可夫斯基和" class="headerlink" title="闵可夫斯基和"></a>闵可夫斯基和</h2><p>给定两个凸包 $A,B$，构建一个凸包 $C$ 为 $A,B$ 闵可夫斯基和，即满足 $\forall a \in A,b \in B | a+b \in C$，其中 $a,b$ 均为向量，$a \in A$ 为在凸包 $A$ 中的向量，$a+b$ 为向量加法。</p>
<p>首先有一个性质就是两个凸包的闵可夫斯基和还是凸包，并且 $C$ 的边的条数恰好是 $A,B$ 两个凸包的边的数量之和，更明确一点，$C$ 的边集构成的向量集合就是 $A,B$ 两个凸包构成的向量集合的并集。</p>
<p>因此我们可以直接对于所有 $A,B$ 中的边按照逆时针排序，这个可以用叉积解决，然后固定一下 $C$ 中的一个点，这里一般选择 $A$ 的第一个点和 $B$ 的第一个点加起来的结果。（可以看成是一个向量）</p>
<p>特别注意：$C$ 中的第一个点连接的边也得是 $A$ 中的第一条边和 $B$ 中的第一条边作为向量靠下面（逆时针排序后的第一个）的那一个，因此我们不能直接 <code>sort</code> 排序，而是使用归并排序来合并 $A,B$ 两个向量集合。</p>
<p>最后我们就在 $O(n)$ 的时间复杂度内求出了这个凸包 $C$。</p>
<p><strong>最后还要再对闵可夫斯基和求一遍凸包才能通过，因为有可能存在三点共线的情况。</strong></p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P4557">P4557 [JSOI2018] 战争</a>。</p>
<p>这道题让你求出每次 $A$ 沿着向量 $w$ 平移之后与 $B$ 有没有公共点，$A$ 和 $B$ 是我们根据给定的点集算出来的凸包。</p>
<p>那么若有公共点则存在 $a \in A,b \in B$ 满足 $b+w&#x3D;a$，移项得 $w&#x3D;a-b$，那么就是求 $w$ 在不在 $A$ 和 $-B$ 的闵可夫斯基和内部，直接用 $O(\log n)$ 求点是否在闵可夫斯基和内部即可。</p>
<p>时间复杂度 $O(n \log n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;ll x,y;&#125;p1[N],p2[N],sta[N],g[N],p3[N],p4[N],st;</span><br><span class="line"><span class="keyword">inline</span> point <span class="keyword">operator</span>+(point a,point b)&#123;<span class="keyword">return</span> (point)&#123;a.x+b.x,a.y+b.y&#125;;&#125;</span><br><span class="line"><span class="keyword">inline</span> point <span class="keyword">operator</span>-(point a,point b)&#123;<span class="keyword">return</span> (point)&#123;a.x-b.x,a.y-b.y&#125;;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sgn</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;eps) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;eps) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(point a,point b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">sgn</span>(a.x-b.x)==<span class="number">-1</span>) <span class="keyword">return</span> <span class="built_in">sgn</span>(b.y-a.y);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">sgn</span>(b.x-a.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">cross</span><span class="params">(point a,point b)</span></span>&#123;<span class="keyword">return</span> a.x*b.y-a.y*b.x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">lenth</span><span class="params">(point a,point b)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmps</span><span class="params">(point a,point b)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">cross</span>(a,b)&gt;<span class="number">0</span>;&#125;</span><br><span class="line">ll n,m,q,i,j,top,pos,x,y,tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">andrew</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">sort</span>(p1+<span class="number">1</span>,p1+n+<span class="number">1</span>,cmp),<span class="built_in">sort</span>(p2+<span class="number">1</span>,p2+m+<span class="number">1</span>,cmp);</span><br><span class="line">	top=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">while</span>(top&gt;=<span class="number">2</span>&amp;&amp;<span class="built_in">cross</span>(sta[top]-sta[top<span class="number">-1</span>],p1[i]-sta[top<span class="number">-1</span>])&lt;=<span class="number">0</span>) top--;</span><br><span class="line">		sta[++top]=p1[i];</span><br><span class="line">	&#125;</span><br><span class="line">	pos=top;</span><br><span class="line">	<span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">		<span class="keyword">while</span>(top&gt;=pos+<span class="number">1</span>&amp;&amp;<span class="built_in">cross</span>(sta[top]-sta[top<span class="number">-1</span>],p1[i]-sta[top<span class="number">-1</span>])&lt;=<span class="number">0</span>) top--;</span><br><span class="line">		sta[++top]=p1[i];</span><br><span class="line">	&#125;</span><br><span class="line">	n=top<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;top;i++) p1[i]=sta[i];</span><br><span class="line">	top=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="keyword">while</span>(top&gt;=<span class="number">2</span>&amp;&amp;<span class="built_in">cross</span>(sta[top]-sta[top<span class="number">-1</span>],p2[i]-sta[top<span class="number">-1</span>])&lt;=<span class="number">0</span>) top--;</span><br><span class="line">		sta[++top]=p2[i];</span><br><span class="line">	&#125;</span><br><span class="line">	pos=top;</span><br><span class="line">	<span class="keyword">for</span>(i=m<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">		<span class="keyword">while</span>(top&gt;=pos+<span class="number">1</span>&amp;&amp;<span class="built_in">cross</span>(sta[top]-sta[top<span class="number">-1</span>],p2[i]-sta[top<span class="number">-1</span>])&lt;=<span class="number">0</span>) top--;</span><br><span class="line">		sta[++top]=p2[i];</span><br><span class="line">	&#125;</span><br><span class="line">	m=top<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;top;i++) p2[i]=sta[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Minkovski</span><span class="params">()</span></span>&#123;</span><br><span class="line">	g[++tot] = (point)&#123;p1[<span class="number">1</span>].x+p2[<span class="number">1</span>].x,p1[<span class="number">1</span>].y+p2[<span class="number">1</span>].y&#125;;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) p3[i]=p1[i%n+<span class="number">1</span>]-p1[i];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++) p4[i]=p2[i%m+<span class="number">1</span>]-p2[i];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>,j=<span class="number">1</span>;i&lt;=n&amp;&amp;j&lt;=m;) tot++,g[tot]=g[tot<span class="number">-1</span>]+(<span class="built_in">cross</span>(p3[i],p4[j])&gt;<span class="number">0</span>?p3[i++]:p4[j++]);</span><br><span class="line">	<span class="keyword">for</span>(;i&lt;=n;i++) tot++,g[tot]=g[tot<span class="number">-1</span>]+p3[i];</span><br><span class="line">	<span class="keyword">for</span>(;j&lt;=m;j++) tot++,g[tot]=g[tot<span class="number">-1</span>]+p4[j];</span><br><span class="line">	tot--,<span class="built_in">sort</span>(g+<span class="number">1</span>,g+tot+<span class="number">1</span>,cmp);</span><br><span class="line">	top=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line">		<span class="keyword">while</span>(top&gt;=<span class="number">2</span>&amp;&amp;<span class="built_in">cross</span>(sta[top]-sta[top<span class="number">-1</span>],g[i]-sta[top<span class="number">-1</span>])&lt;=<span class="number">0</span>) top--;</span><br><span class="line">		sta[++top]=g[i];</span><br><span class="line">	&#125;</span><br><span class="line">	pos=top;</span><br><span class="line">	<span class="keyword">for</span>(i=tot<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">		<span class="keyword">while</span>(top&gt;=pos+<span class="number">1</span>&amp;&amp;<span class="built_in">cross</span>(sta[top]-sta[top<span class="number">-1</span>],g[i]-sta[top<span class="number">-1</span>])&lt;=<span class="number">0</span>) top--;</span><br><span class="line">		sta[++top]=g[i];</span><br><span class="line">	&#125;</span><br><span class="line">	tot=top<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=tot;i++) g[i]=sta[i];</span><br><span class="line">	st=g[<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=tot;i++) g[i]=g[i]-st;</span><br><span class="line">	<span class="built_in">sort</span>(g+<span class="number">2</span>,g+tot+<span class="number">1</span>,cmps);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(point x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tot==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(x.x==g[<span class="number">1</span>].x&amp;&amp;x.y==g[<span class="number">1</span>].y) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">cross</span>(x,g[<span class="number">2</span>])&gt;<span class="number">0</span>||<span class="built_in">cross</span>(g[tot],x)&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	ll res = <span class="built_in">lower_bound</span>(g+<span class="number">2</span>,g+tot+<span class="number">1</span>,x,cmps)-g<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">cross</span>(g[res+<span class="number">1</span>]-g[res],x-g[res])&gt;=<span class="number">0</span>||(<span class="built_in">cross</span>(g[res+<span class="number">1</span>],x)==<span class="number">0</span>&amp;&amp;((g[res+<span class="number">1</span>].x&gt;<span class="number">0</span>&amp;&amp;x.x&gt;<span class="number">0</span>&amp;&amp;x.x&lt;=g[res+<span class="number">1</span>].x)||(g[res+<span class="number">1</span>].x&lt;<span class="number">0</span>&amp;&amp;x.x&lt;<span class="number">0</span>&amp;&amp;x.x&gt;=g[res+<span class="number">1</span>].x)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;p1[i].x&gt;&gt;p1[i].y;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++) cin&gt;&gt;p2[i].x&gt;&gt;p2[i].y,p2[i].x=-p2[i].x,p2[i].y=-p2[i].y;</span><br><span class="line">	<span class="built_in">andrew</span>();</span><br><span class="line">	<span class="built_in">Minkovski</span>();</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">		cout&lt;&lt;<span class="built_in">query</span>((point)&#123;x,y&#125;-st)&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意上面那份代码最后还要求一次凸包，原因在于可能用重复计算的点。</p>
<p>例题 2：<a href="http://oi.nks.edu.cn/zh/Problem/Details?cid=2674&tid=Q">here</a></p>
<p>题目大意：给定长度为 $n$ 的序列 $A$，定义长度为 $k$ 的子序列的权值为奇数位上的和减去偶数位上的和，求出所有长度为 $1 \le k \le n$ 的子序列的最大权值。</p>
<p>其中：$1 \le n \le 10^5$，$0 \le A_i \le 2 \times 10^4$。</p>
<p>首先如果 $k$ 是偶数情况的话，我们可以令 $B_i \gets A_{i}-A_{i+1}$，然后选出连续的 $k$ 段区间使得区间和最大，这个可以用费用流解决，所以设 $f(i)$ 表示 $k&#x3D;i$ 的答案，那么对于 $i \bmod 2&#x3D;0$ 的情况 $f$ 明显是凸函数，因为费用流每次增广的流量是递减的，奇数的情况同理。</p>
<p>于是就可以设 $(x,y)$ 坐标表示当 $i&#x3D;x$ 的时候存在 $f(i)&#x3D;y$，于是我们发现所有 $i \bmod 2 &#x3D; 1$ 对于所有区间都有凸性，所以我们合并的时候用闵可夫斯基和就好。</p>
<p>因为凸包和凸包的闵可夫斯基和也是凸包，并且根据它的定义我们知道这么做一定是正确的。</p>
<p>具体来说，线段树每个节点维护一个平面直角坐标系上的凸包，凸包每个点的定义就是上面说的那样，然后在 <code>pushup</code> 的过程中根据题目的要求（一正一负）记录一下正负的情况合并就可以了。</p>
<p>记得特判掉边界情况。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;ll x,y;&#125;g[N],p3[N],p4[N];</span><br><span class="line">vector&lt;point&gt; tr[N&lt;&lt;<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>],st;</span><br><span class="line"><span class="keyword">inline</span> point <span class="keyword">operator</span>+(point a,point b)&#123;<span class="keyword">return</span> (point)&#123;a.x+b.x,a.y+b.y&#125;;&#125;</span><br><span class="line"><span class="keyword">inline</span> point <span class="keyword">operator</span>-(point a,point b)&#123;<span class="keyword">return</span> (point)&#123;a.x-b.x,a.y-b.y&#125;;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">lenth</span><span class="params">(point a)</span></span>&#123;<span class="keyword">return</span> a.x*a.x+a.y*a.y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(point a,point b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a.x==b.x) <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">cross</span><span class="params">(point a,point b)</span></span>&#123;<span class="keyword">return</span> a.x*b.y-a.y*b.x;&#125;</span><br><span class="line">ll n,i,j,a[N],tot,ans[N],temp[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> vector&lt;point&gt; <span class="title">Minkovski</span><span class="params">(vector&lt;point&gt; as,vector&lt;point&gt; bs)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(as.<span class="built_in">size</span>()==<span class="number">0</span>) <span class="keyword">return</span> bs;</span><br><span class="line">	<span class="keyword">if</span>(bs.<span class="built_in">size</span>()==<span class="number">0</span>) <span class="keyword">return</span> as;</span><br><span class="line">	ll i,j;</span><br><span class="line">	tot=<span class="number">0</span>,st.<span class="built_in">clear</span>();</span><br><span class="line">	g[++tot] = (point)&#123;as[<span class="number">0</span>].x+bs[<span class="number">0</span>].x,as[<span class="number">0</span>].y+bs[<span class="number">0</span>].y&#125;;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;as.<span class="built_in">size</span>();i++) p3[i]=as[i]-as[i<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;bs.<span class="built_in">size</span>();i++) p4[i]=bs[i]-bs[i<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>,j=<span class="number">1</span>;i&lt;as.<span class="built_in">size</span>()&amp;&amp;j&lt;bs.<span class="built_in">size</span>();)&#123;</span><br><span class="line">		tot++;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">cross</span>(p3[i],p4[j])&lt;<span class="number">0</span>) g[tot]=g[tot<span class="number">-1</span>]+p3[i++];</span><br><span class="line">		<span class="keyword">else</span> g[tot]=g[tot<span class="number">-1</span>]+p4[j++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(;i&lt;as.<span class="built_in">size</span>();i++) tot++,g[tot]=g[tot<span class="number">-1</span>]+p3[i];</span><br><span class="line">	<span class="keyword">for</span>(;j&lt;bs.<span class="built_in">size</span>();j++) tot++,g[tot]=g[tot<span class="number">-1</span>]+p4[j];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=tot;i++) st.<span class="built_in">push_back</span>(g[i]);</span><br><span class="line">	<span class="keyword">return</span> st;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> vector&lt;point&gt; <span class="title">max</span><span class="params">(vector&lt;point&gt; a,vector&lt;point&gt; b,vector&lt;point&gt; c,vector&lt;point&gt; d,ll len)</span></span>&#123;</span><br><span class="line">	ll beg = (len%<span class="number">2</span>==<span class="number">0</span>?<span class="number">2</span>:<span class="number">1</span>);</span><br><span class="line">	st.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">for</span>(ll i=beg;i&lt;=len;i+=<span class="number">2</span>) temp[i]=<span class="number">-0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">	temp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();i++) temp[a[i].x]=<span class="built_in">max</span>(temp[a[i].x],a[i].y);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;b.<span class="built_in">size</span>();i++) temp[b[i].x]=<span class="built_in">max</span>(temp[b[i].x],b[i].y);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;c.<span class="built_in">size</span>();i++) temp[c[i].x]=<span class="built_in">max</span>(temp[c[i].x],c[i].y);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;d.<span class="built_in">size</span>();i++) temp[d[i].x]=<span class="built_in">max</span>(temp[d[i].x],d[i].y);</span><br><span class="line">	<span class="keyword">for</span>(ll i=beg;i&lt;=len;i+=<span class="number">2</span>) st.<span class="built_in">push_back</span>((point)&#123;i,temp[i]&#125;);</span><br><span class="line">	<span class="keyword">return</span> st;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(ll s,ll t,ll p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(s==t)&#123;</span><br><span class="line">		tr[p][<span class="number">0</span>][<span class="number">0</span>].<span class="built_in">push_back</span>((point)&#123;<span class="number">1</span>,a[s]&#125;);</span><br><span class="line">		tr[p][<span class="number">1</span>][<span class="number">1</span>].<span class="built_in">push_back</span>((point)&#123;<span class="number">1</span>,-a[s]&#125;);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">build</span>(s,(s+t)/<span class="number">2</span>,<span class="number">2</span>*p),<span class="built_in">build</span>((s+t)/<span class="number">2</span>+<span class="number">1</span>,t,<span class="number">2</span>*p+<span class="number">1</span>);</span><br><span class="line">	ll len1,len2;</span><br><span class="line">	<span class="keyword">if</span>((t-s+<span class="number">1</span>)%<span class="number">2</span>==<span class="number">0</span>) len1=t-s,len2=t-s+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> len1=t-s+<span class="number">1</span>,len2=t-s;</span><br><span class="line">	tr[p][<span class="number">0</span>][<span class="number">0</span>] = <span class="built_in">max</span>(<span class="built_in">Minkovski</span>(tr[<span class="number">2</span>*p][<span class="number">0</span>][<span class="number">1</span>],tr[<span class="number">2</span>*p+<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]),<span class="built_in">Minkovski</span>(tr[<span class="number">2</span>*p][<span class="number">0</span>][<span class="number">0</span>],tr[<span class="number">2</span>*p+<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>]),tr[<span class="number">2</span>*p][<span class="number">0</span>][<span class="number">0</span>],tr[<span class="number">2</span>*p+<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>],len1);</span><br><span class="line">	tr[p][<span class="number">0</span>][<span class="number">1</span>] = <span class="built_in">max</span>(<span class="built_in">Minkovski</span>(tr[<span class="number">2</span>*p][<span class="number">0</span>][<span class="number">1</span>],tr[<span class="number">2</span>*p+<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>]),<span class="built_in">Minkovski</span>(tr[<span class="number">2</span>*p][<span class="number">0</span>][<span class="number">0</span>],tr[<span class="number">2</span>*p+<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]),tr[<span class="number">2</span>*p][<span class="number">0</span>][<span class="number">1</span>],tr[<span class="number">2</span>*p+<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>],len2);</span><br><span class="line">	tr[p][<span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">max</span>(<span class="built_in">Minkovski</span>(tr[<span class="number">2</span>*p][<span class="number">1</span>][<span class="number">1</span>],tr[<span class="number">2</span>*p+<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]),<span class="built_in">Minkovski</span>(tr[<span class="number">2</span>*p][<span class="number">1</span>][<span class="number">0</span>],tr[<span class="number">2</span>*p+<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>]),tr[<span class="number">2</span>*p][<span class="number">1</span>][<span class="number">0</span>],tr[<span class="number">2</span>*p+<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>],len2);	</span><br><span class="line">	tr[p][<span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">max</span>(<span class="built_in">Minkovski</span>(tr[<span class="number">2</span>*p][<span class="number">1</span>][<span class="number">1</span>],tr[<span class="number">2</span>*p+<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>]),<span class="built_in">Minkovski</span>(tr[<span class="number">2</span>*p][<span class="number">1</span>][<span class="number">0</span>],tr[<span class="number">2</span>*p+<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]),tr[<span class="number">2</span>*p][<span class="number">1</span>][<span class="number">1</span>],tr[<span class="number">2</span>*p+<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>],len1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">memset</span>(ans,<span class="number">-0x3f</span>,<span class="built_in">sizeof</span>(ans));</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;tr[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>].<span class="built_in">size</span>();i++) ans[tr[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>][i].x]=<span class="built_in">max</span>(ans[tr[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>][i].x],tr[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>][i].y);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;tr[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>].<span class="built_in">size</span>();i++) ans[tr[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>][i].x]=<span class="built_in">max</span>(ans[tr[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>][i].x],tr[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>][i].y);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="极坐标系"><a href="#极坐标系" class="headerlink" title="极坐标系"></a>极坐标系</h2><p>一个点的位置在极坐标系上可以用下面的方式表示：</p>
<ul>
<li>原点 $(0,\varphi)$。</li>
</ul>
<p>设 $A$ 为平面上一点。</p>
<p>极点 $O$ 与 $A$ 之间的距离 $|OA|$ 称为 极径，记为 $\rho$；<br>以极轴为始边，$OA$ 为终边的角 $\angle xOA$ 称为 极角，记为 $\varphi$；</p>
<p>$A&#x3D;(\rho,\varphi)$。</p>
<p>我们可以很简单的将所有点按照极角排序，我们可以直接使用 <code>atan</code> 还原极角，但是这样的话分类讨论的情况较多，我们可以直接使用系统自带的函数 <code>atan2</code> 解决。</p>
<p>即设 $A&#x3D;(x,y)$（平面直角坐标系），$A$ 的极角就是 $\operatorname{atan2}(y,x)$，$A$ 的极径就是 $\sqrt{x^2+y^2}$。</p>
<p>有时候极角排序比用叉积排序更加方便。</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>计算几何</tag>
        <tag>凸包</tag>
        <tag>闵可夫斯基和</tag>
        <tag>向量</tag>
      </tags>
  </entry>
  <entry>
    <title>快速沃尔什变换 FWT/子集卷积</title>
    <url>/2024/04/03/%E5%BF%AB%E9%80%9F%E6%B2%83%E5%B0%94%E4%BB%80%E5%8F%98%E6%8D%A2-FWT-%E5%AD%90%E9%9B%86%E5%8D%B7%E7%A7%AF/</url>
    <content><![CDATA[<h1 id="快速沃尔什变换-FWT"><a href="#快速沃尔什变换-FWT" class="headerlink" title="快速沃尔什变换 FWT"></a>快速沃尔什变换 FWT</h1><p>给定两个数组 $A,B$，求出 $A,B$ 经过下列变换之后得到的 $C$ 数组，快速计算。</p>
<p>$$<br>C_i &#x3D; \sum_{j \oplus k&#x3D;i} A_jB_k<br>$$</p>
<p>容易发现，快速沃尔什变换就是对下标进行卷积，当 $\oplus$ 为加法的时候就是 FFT&#x2F;NTT。</p>
<p>其中 $\oplus$ 为 $\operatorname{or},\operatorname{and},\operatorname{xor}$ 中的任意一个，它们分别被称作：或卷积，与卷积，异或卷积。</p>
<h2 id="或卷积"><a href="#或卷积" class="headerlink" title="或卷积"></a>或卷积</h2><p>求解或卷积，即为求解：</p>
<p>$$<br>C_i &#x3D; \sum_{j | k&#x3D;i} A_jB_k<br>$$</p>
<p>首先如果我们设 $A0_i &#x3D; \sum_{j \in i} A_j,B0_i&#x3D;\sum_{j \in i} B_j$，那么我们有：</p>
<p>$$<br>\begin{aligned}<br>C0i &amp;&#x3D; \sum_{j \in i} C_j \\<br>&amp;&#x3D; \sum_{k|l \in i} A_kB_l \\<br>&amp;&#x3D; \sum_{k\in i,l \in i} A_kB_l \\<br>&amp;&#x3D; \sum_{k\in i} A_k \sum_{l \in i} B_l \\<br>&amp;&#x3D; A0_i B0_i \\<br>\end{aligned}<br>$$</p>
<p>而 $A \to A0,B\to B0,C0\to C$ 都很好算，高维前缀和即可，所以时间复杂度就被优化成了 $O(n2^n)$。 </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">gor</span><span class="params">(ll *a,ll *b,ll *c,ll n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) fa[i]=a[i],fb[i]=b[i];</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i*=<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;n;j+=<span class="number">2</span>*i)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll k=j;k&lt;j+i;k++) (((fa[k+i]+=fa[k])&gt;=mod)&amp;&amp;(fa[k+i]-=mod)),(((fb[k+i]+=fb[k])&gt;=mod)&amp;&amp;(fb[k+i]-=mod));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="comment">//A to A0,B to B0</span></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) c[i]=fa[i]*fb[i]%mod;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i*=<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;n;j+=<span class="number">2</span>*i)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll k=j;k&lt;j+i;k++) ((c[i+k]-=c[k])&lt;<span class="number">0</span>&amp;&amp;(c[i+k]+=mod));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="comment">//C0 to C</span></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) c[i]=(c[i]%mod+mod)%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="与卷积"><a href="#与卷积" class="headerlink" title="与卷积"></a>与卷积</h2><p>求解与卷积，即为求解：</p>
<p>$$<br>C_i &#x3D; \sum_{j \And k&#x3D;i} A_jB_k<br>$$</p>
<p>与或卷积一样的，只不过全部 $j \in i$ 换成了 $i \in j$，公式如下：</p>
<p>首先如果我们设 $ A0_i &#x3D; \sum_{i \in j} A_j , B0_i&#x3D;\sum_{i \in j} B_j $，那么我们有：</p>
<p>$$<br>\begin{aligned}<br>C0i &amp;&#x3D; \sum_{i \in j} C_j \\<br>&amp;&#x3D; \sum_{i \in (k \And l)} A_kB_l \\<br>&amp;&#x3D; \sum_{i\in k,i \in l} A_kB_l \\<br>&amp;&#x3D; \sum_{i\in k} A_k \sum_{i \in l} B_l \\<br>&amp;&#x3D; A0_i B0_i \<br>\end{aligned}<br>$$</p>
<p>求解 C 是一样的，所以就是高维后缀和，时间复杂度 $O(n2^n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">gand</span><span class="params">(ll *a,ll *b,ll *c,ll n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) fa[i]=a[i],fb[i]=b[i];</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i*=<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;n;j+=<span class="number">2</span>*i)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll k=j;k&lt;j+i;k++) (((fa[k]+=fa[k+i])&gt;=mod)&amp;&amp;(fa[k]-=mod)),(((fb[k]+=fb[k+i])&gt;=mod)&amp;&amp;(fb[k]-=mod));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) c[i]=fa[i]*fb[i]%mod;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i*=<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;n;j+=<span class="number">2</span>*i)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll k=j;k&lt;j+i;k++) ((c[k]-=c[i+k])&lt;<span class="number">0</span>&amp;&amp;(c[k]+=mod));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) c[i]=(c[i]%mod+mod)%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="异或卷积"><a href="#异或卷积" class="headerlink" title="异或卷积"></a>异或卷积</h2><p>求解异或卷积，即为求解：</p>
<p>$$<br>C_i &#x3D; \sum_{j \operatorname{xor} k&#x3D;i} A_jB_k<br>$$</p>
<p>这个推导有点复杂，所以我们考虑设代码中的 $f_k&#x3D;a,f_{k+i}&#x3D;b$，那么或卷积是 $b \gets a+b$，与卷积是 $a \gets a+b$，异或卷积是 $a \gets a+b,b \gets a-b$。</p>
<p>然后最后我们要逆运算回去，异或与与和或不同，因为我们两者加起来发现多了一倍，而不是用 $a \gets a-b$ 或者 $b \gets b-a$，因此每次用 $a \gets \frac{a+b}2,b \gets \frac{a-b}{2}$ 即可。</p>
<p>具体的推导过程可以用当 $n&#x3D;2^1$ 的时候特殊情况推导，这个留作复习的时候思考吧。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">gxor</span><span class="params">(ll *a,ll *b,ll *c,ll n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) fa[i]=a[i],fb[i]=b[i];</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i*=<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;n;j+=<span class="number">2</span>*i)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll k=j;k&lt;j+i;k++)&#123;</span><br><span class="line">				fa[k] += fa[k+i],fa[k+i] = fa[k]-fa[k+i]-fa[k+i];</span><br><span class="line">				fa[k] %= mod,fa[k+i] %= mod;</span><br><span class="line">				fb[k] += fb[k+i],fb[k+i] = fb[k]-fb[k+i]-fb[k+i];</span><br><span class="line">				fb[k] %= mod,fb[k+i] %= mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) c[i]=fa[i]*fb[i]%mod;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i*=<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;n;j+=<span class="number">2</span>*i)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll k=j;k&lt;j+i;k++)&#123;</span><br><span class="line">				c[k] += c[k+i],c[k+i] = c[k]-c[k+i]-c[k+i];</span><br><span class="line">				c[k] = c[k]*inv2%mod,c[k+i] = c[k+i]*inv2%mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) c[i]=(c[i]%mod+mod)%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="FWT-的一些性质"><a href="#FWT-的一些性质" class="headerlink" title="FWT 的一些性质"></a>FWT 的一些性质</h2><p>上面的三个运算统称为位运算卷积，其实只有或卷积是 FWT，其他的有的叫做莫比乌斯变换等等。</p>
<p>并且由 $A \to A0$ 的过程叫做 FWT 变换，从 $A0\to A$ 的过程叫做 FWT 逆变换（IFWT），其实跟 FFT&#x2F;NTT 很像。</p>
<h3 id="运算律"><a href="#运算律" class="headerlink" title="运算律"></a>运算律</h3><p>我们可以发现，每次从 $ A $ 数组变化到 $ A0 $ 数组都可以看作是一个矩阵乘法线性变换的过程，比如 $ A0_{i}&#x3D;\sum_{j \in i} A_j $ 可以写作 $ p_{j,i}&#x3D;[j \in i] $（转移矩阵），因此 FWT 具有结合律和分配律而不具有交换律。</p>
<p>所以如果我们在某个算法中会用到 FWT 变换的话，大部分情况都可以在程序最开始先令 $ A \to A0 $，然后用 $A0$ 进行变换，最后用 $ A0 $ 还原 $ A $ 即可，但是要注意，算法里面必须进行的是线性变换才可以这么处理，例题可以参见 <a href="https://www.luogu.com.cn/problem/P5406">P5406 THUPC2019 找树</a>。</p>
<p>或者我们如果遇到了要求 $ A_i &#x3D; \sum_{n_0}\sum_{n_1}\sum_{n_2}\dots\sum_{n_k}[n_0|n_1|n_2|\dots|n_k&#x3D;i]B_{n_0}B_{n_1}\dots B_{n_k} $ 这类题目的话，可以对 $B$ 直接进行 FWT 变换得到 $ B0 $，然后令 $ A0&#x3D;B0^{k+1} $，最后通过 $ A0 \to A $ 即可，这样的话时间复杂度通常会少一个 $ \log $，是一个很大的优化。（证明可以通过上面的分配律或者把式子写出来展开即可） </p>
<h3 id="分位考虑"><a href="#分位考虑" class="headerlink" title="分位考虑"></a>分位考虑</h3><p>如果我们要求对于二进制下的第 $pos$ 位采用了规定的 或&#x2F;与&#x2F;异或 的运算法则，那 FWT 还适用吗？</p>
<p>答案是肯定的，我们只需要在代码的第一层枚举中记录位数，然后位数是什么就运用哪种变换就可以了，比如下面的 FWT 和 IFWT 就是这样的。</p>
<p>顺带解释一下第一层 <code>for</code> 循环是枚举高维前缀和处理的位数，第二层是枚举没有处理的位数，第三层是枚举处理过的位数，可以想象一下 $ \text{second_num}+1\text{（第一层枚举的位）}+\text{third_num} $。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> poly <span class="title">fwt</span><span class="params">(poly a)</span></span>&#123;</span><br><span class="line">	poly fa = a;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>,pos=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;w);i*=<span class="number">2</span>,pos++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;(<span class="number">1</span>&lt;&lt;w);j+=<span class="number">2</span>*i)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll k=j;k&lt;j+i;k++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(s[pos]==<span class="string">&#x27;|&#x27;</span>)&#123;</span><br><span class="line">					((fa.a[k+i]+=fa.a[k])&gt;=mod)&amp;&amp;(fa.a[k+i]-=mod);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(s[pos]==<span class="string">&#x27;&amp;&#x27;</span>)&#123;</span><br><span class="line">					((fa.a[k]+=fa.a[k+i])&gt;=mod)&amp;&amp;(fa.a[k]-=mod);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(s[pos]==<span class="string">&#x27;^&#x27;</span>)&#123;</span><br><span class="line">					((fa.a[k]+=fa.a[k+i])&gt;=mod)&amp;&amp;(fa.a[k]-=mod),fa.a[k+i] = fa.a[k]-fa.a[k+i]*<span class="number">2</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;w);i++) fa.a[i]=(fa.a[i]%mod+mod)%mod;</span><br><span class="line">	<span class="keyword">return</span> fa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> poly <span class="title">ifwt</span><span class="params">(poly a)</span></span>&#123;</span><br><span class="line">	poly c = a;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>,pos=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;w);i*=<span class="number">2</span>,pos++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;(<span class="number">1</span>&lt;&lt;w);j+=<span class="number">2</span>*i)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll k=j;k&lt;j+i;k++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(s[pos]==<span class="string">&#x27;|&#x27;</span>)&#123;</span><br><span class="line">					((c.a[k+i]-=c.a[k])&lt;<span class="number">0</span>)&amp;&amp;(c.a[k+i]+=mod);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(s[pos]==<span class="string">&#x27;&amp;&#x27;</span>)&#123;</span><br><span class="line">					((c.a[k]-=c.a[k+i])&lt;<span class="number">0</span>)&amp;&amp;(c.a[k]+=mod);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(s[pos]==<span class="string">&#x27;^&#x27;</span>)&#123;</span><br><span class="line">					c.a[k] += c.a[k+i],c.a[k+i] = c.a[k]-c.a[k+i]*<span class="number">2</span>;</span><br><span class="line">					c.a[k] = c.a[k]*inv2,c.a[k+i] = c.a[k+i]*inv2;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;w);i++) c.a[i]=(c.a[i]%mod+mod)%mod;</span><br><span class="line">	<span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例题依旧是上面那道 THUPC 的题目。</p>
<h2 id="子集卷积及其相关操作"><a href="#子集卷积及其相关操作" class="headerlink" title="子集卷积及其相关操作"></a>子集卷积及其相关操作</h2><h3 id="子集卷积"><a href="#子集卷积" class="headerlink" title="子集卷积"></a>子集卷积</h3><p>给出数组 $A,B$ 求数组 $C$，其中：<br>$$<br>C_i &#x3D; \sum_{j|k&#x3D;i,j \And k&#x3D;0} A_jB_k<br>$$<br>首先，我们可以发现如果没有 $j \And k&#x3D;0$ 这个限制就是 FWT 或卷积，但是有一个限制就是 $j \And k&#x3D;0$，考虑转化这个限制变成 $\operatorname{popcount}(j)+\operatorname{popcount}(k)&#x3D;\operatorname{popcount}(i)$，于是如果我们给 $A$ 扩展一维，给 $B$ 扩展一维，并令 $A_{i}&#x3D;A0_{\operatorname{popcount(i)},i}$，$B$ 同理，那么我们得到：<br>$$<br>C0_{\operatorname{popcount}(i),i} &#x3D; \sum_{j|k&#x3D;i} A0_{\operatorname{popcount(j)},j}B0_{\operatorname{popcount(k)},k}<br>$$<br>那么 $j$ 和 $k$ 的 $\And$ 的限制就没有了，又因为 FWT 对加法具有分配律，所以我们可以先对 $A0$ 和 $B0$ 的 $pos$ 个（$pos$ 是二进制位数）维度做 FWT 变换，然后令：<br>$$<br>C1_{b,i} &#x3D; \sum_{b&#x3D;0}^a A1_{a,i}B1_{b-a,i}<br>$$<br>最后对 $C1$ 做 IFWT 就得到了 $C0$ 的值，进而可以得到 $C$ 的值。（其实应该是枚举了一个 $b$ 就算一次累加答案，但是因为 FWT 的分配律，所以可以枚举所有 $b$ 把结果加在一起之后再 IFWT）这个时候我们发现有些值虽然它二进制下 $1$ 的个数不等于当前维度，但是它的位置上依然有值，这是正常的（这个值没用），如果这个值对后面的计算有影响，清零即可。</p>
<p>总的时间复杂度是 $O(2^nn^2)$，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">gor1</span><span class="params">(ll *a,ll n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i*=<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;n;j+=<span class="number">2</span>*i)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll k=j;k&lt;j+i;k++) (((a[k+i]+=a[k])&gt;=mod)&amp;&amp;(a[k+i]-=mod));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">gor2</span><span class="params">(ll *a,ll n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i*=<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;n;j+=<span class="number">2</span>*i)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll k=j;k&lt;j+i;k++) ((a[i+k]-=a[k])&lt;<span class="number">0</span>&amp;&amp;(a[i+k]+=mod));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) a[i]=(a[i]%mod+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">times</span><span class="params">(ll *a,ll *b,ll *c,ll n)</span></span>&#123;</span><br><span class="line">	ll limit = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) f0[__builtin_popcount(i)][i]=a[i],f1[__builtin_popcount(i)][i]=b[i],limit=<span class="built_in">max</span>(limit,(ll)__builtin_popcount(i));</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=limit;i++) <span class="built_in">gor1</span>(f0[i],n),<span class="built_in">gor1</span>(f1[i],n);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=limit;i++) <span class="keyword">for</span>(ll j=<span class="number">0</span>;i+j&lt;=limit;j++) <span class="keyword">for</span>(ll k=<span class="number">0</span>;k&lt;=n;k++) f2[i+j][k]=(f2[i+j][k]+f0[i][k]*f1[j][k])%mod;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=limit;i++) <span class="built_in">gor2</span>(f2[i],n);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) c[i]=f2[__builtin_popcount(i)][i];</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=limit;i++) <span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;=n;j++) f1[i][j]=f2[i][j]=f0[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="子集卷积的逆运算"><a href="#子集卷积的逆运算" class="headerlink" title="子集卷积的逆运算"></a>子集卷积的逆运算</h3><p>如题，这一个小节主要探讨的是子集卷积除法的一些问题。</p>
<p>给出数组 $A,C$，求数组 $B$，这三个数组满足下面的条件：<br>$$<br>C_i &#x3D; \sum_{j|k&#x3D;i,j \And k&#x3D;0} A_jB_k<br>$$<br>根据上面子集卷积的定义，我们得到了 $A1,B1$ 之后，通过：<br>$$<br>C1_{b,i} &#x3D; \sum_{b&#x3D;0}^a A1_{a,i}B1_{b-a,i}<br>$$<br>得到了 $C1$，现在同理，我们得到了 $A1,C1$，也可以通过这个式子从 $0 \sim n$ 递推得到 $B1$ 的值，很简单，这里有一道例题，大概就是把题目的 dp 转化为知道上面式子的 $C$ 和 $A$ 求 $B$ 的问题进而求解，时间复杂度依然是 $O(n^22^n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">div</span><span class="params">(ll *a,ll *b,ll *c,ll n)</span></span>&#123;</span><br><span class="line">	ll limit = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) f0[__builtin_popcount(i)][i]=a[i],f1[__builtin_popcount(i)][i]=b[i],limit=<span class="built_in">max</span>(limit,(ll)__builtin_popcount(i));</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=limit;i++) <span class="built_in">gor1</span>(f0[i],n),<span class="built_in">gor1</span>(f1[i],n);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		ll inv = <span class="built_in">qmi</span>(f1[<span class="number">0</span>][i],mod<span class="number">-2</span>,mod);</span><br><span class="line">		f2[<span class="number">0</span>][i]=f0[<span class="number">0</span>][i]*inv%mod;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;=limit;j++)&#123;</span><br><span class="line">			f2[j][i]=f0[j][i];</span><br><span class="line">			<span class="keyword">for</span>(ll k=<span class="number">0</span>;k&lt;j;k++) f2[j][i]=(f2[j][i]-f2[k][i]*f1[j-k][i]%mod+mod)%mod;</span><br><span class="line">			f2[j][i]=f2[j][i]*inv%mod;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=limit;i++) <span class="built_in">gor2</span>(f2[i],n);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) c[i]=f2[__builtin_popcount(i)][i];</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=limit;i++) <span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;=n;j++) f1[i][j]=f2[i][j]=f0[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="子集卷积的其他运算"><a href="#子集卷积的其他运算" class="headerlink" title="子集卷积的其他运算"></a>子集卷积的其他运算</h3><p>同理，还有开方等等其他操作，这里简单介绍一下开方，而 $\ln,\exp$ 的问题目前不需要掌握并且需要较高的数学知识因此此处不展开。</p>
<p>开方，也就是：<br>$$<br>C_i &#x3D; \sum_{j|k&#x3D;i,j \And k&#x3D;0} A_jA_k<br>$$<br>知道 $C$ 求 $A$，还是先把 $C1$ 算出来，然后得到了：<br>$$<br>C1_{b,i} &#x3D; \sum_{b&#x3D;0}^a A1_{a,i}A1_{b-a,i}<br>$$<br>然后我们从 $0$ 开始，$0$ 需要通过二次剩余求出来，然后其他项就可以递推了，也很简单，时间复杂度依然是简单的 $O(n^22^n)$，二次剩余基本不占时间。</p>
<h2 id="动态子集卷积"><a href="#动态子集卷积" class="headerlink" title="动态子集卷积"></a>动态子集卷积</h2><p>这个通常用于 dp 优化里面，也就是我们知道了 $G,Q$ 两个数组，要想通过下面的方式得到 $F$ 数组：<br>$$<br>F_S Q_S &#x3D; \sum_{T\in S,T \ne 0} G_TF_{S&#x2F;T}<br>$$<br>$T$ 一般不可能是空集，如果强制要求 $T$ 包含某一个元素的话依然可以做。</p>
<p>首先我们发现 $\operatorname{popcount}(S&#x2F;T)&lt;\operatorname{popcount}(S)$，于是我们可以第 $i$ 次处理出所有 $F_S$ 满足 $\operatorname{popcount}(S)&#x3D;i$，因为 $G$ 和 $Q$ 是确定的，于是我们就可以通过所有 $\operatorname{popcount}(S)&lt;i$ 的 $F_S$ 得到这一层的 $F_S$，同样的，我们把 $\operatorname{popcount}$ 放到维度里面，假如我们得到了 $\operatorname{popcount}(S)&lt;i$ 的 $F_S$，我们考虑如何求出 $\operatorname{popcount}(T)&#x3D;i$ 的 $F_T$（像普通子集卷积那样给 $F$ 增加一维）：<br>$$<br>F_{\operatorname{popcount}(T),T}Q_T&#x3D;\sum_{i&#x3D;1}^{\operatorname{popcount}(T)} \sum_{j|k&#x3D;T} G_{i,j}F_{\operatorname{popcount}(T)-i,k}<br>$$<br>这样的话，求出来的答案一定是正确的，因为不合法的状态都会累加到不合法的 $F$ 上，完成整个过程之后把 $F_{i,j}(\operatorname{popcount}(j) \ne i)$ 置为 $0$ 即可。</p>
<p>容易发现，每次后面两个和式中的值都是确定的，因此我们只需要预处理出 $G$ 每一层 FWT 后的结果 $G0$ 和 $F$ 每一层 FWT 后的结果 $F0$ 即可。</p>
<p>然后就可以得到：<br>$$<br>F0_{\operatorname{popcount}(T),T}Q_T&#x3D;\sum_{i&#x3D;1}^{\operatorname{popcount}(T)} G0_{i,T}F0_{\operatorname{popcount}(T)-i,T}<br>$$<br>于是再 IFWT 回去即可，时间复杂度为 $O(n^22^n)$，例题是 <a href="https://www.luogu.com.cn/problem/P4221">P4221 WC2018 州区划分</a>，参考代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 22</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO&#123;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="type">static</span> <span class="type">char</span> buf[<span class="number">1000000</span>],*p=buf,*q=buf;</span><br><span class="line">		<span class="keyword">return</span> p==q&amp;&amp;(q=(p=buf)+<span class="built_in">fread</span>(buf,<span class="number">1</span>,<span class="number">1000000</span>,stdin),p==q)?EOF:*p++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ll res = <span class="number">0</span>,w = <span class="number">1</span>;</span><br><span class="line">		<span class="type">char</span> c = <span class="built_in">nc</span>();</span><br><span class="line">		<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)w=(c==<span class="string">&#x27;-&#x27;</span>?<span class="number">-1</span>:w),c=<span class="built_in">nc</span>();</span><br><span class="line">		<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)res=res*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=<span class="built_in">nc</span>();</span><br><span class="line">		<span class="keyword">return</span> res*w;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">char</span> obuf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p34=obuf; </span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span>&#123; </span><br><span class="line">		p34-obuf&lt;=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)?(*p34++=c):(<span class="built_in">fwrite</span>(obuf,p34-obuf,<span class="number">1</span>,stdout),p34=obuf,*p34++=c); </span><br><span class="line">	&#125; </span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(ll x)</span></span>&#123; </span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">write</span>(x/<span class="number">10</span>); </span><br><span class="line">		<span class="built_in">pc</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> IO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">ll n,m,p,i,j,k,x,y,et,la[N],to[N&lt;&lt;<span class="number">5</span>],ne[N&lt;&lt;<span class="number">5</span>],w[N],du[N],fath[N],pos,f[N][<span class="number">1</span>&lt;&lt;N<span class="number">-1</span>],g[N][<span class="number">1</span>&lt;&lt;N<span class="number">-1</span>],cntt[<span class="number">1</span>&lt;&lt;N<span class="number">-1</span>],inv[<span class="number">1</span>&lt;&lt;N<span class="number">-1</span>],sum[<span class="number">1</span>&lt;&lt;N<span class="number">-1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">gf</span><span class="params">(ll x)</span></span>&#123;<span class="keyword">return</span> x==fath[x]?x:fath[x]=<span class="built_in">gf</span>(fath[x]);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>%p,t = a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=<span class="number">1ll</span>*res*t%p;</span><br><span class="line">		t=<span class="number">1ll</span>*t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">fwt</span><span class="params">(ll *a,ll n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i*=<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;n;j+=<span class="number">2</span>*i)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll k=j;k&lt;j+i;k++)&#123;</span><br><span class="line">				(a[k+i]+=a[k])&gt;=mod&amp;&amp;(a[k+i]-=mod);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ifwt</span><span class="params">(ll *a,ll n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i*=<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;n;j+=<span class="number">2</span>*i)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll k=j;k&lt;j+i;k++)&#123;</span><br><span class="line">				(a[k+i]-=a[k])&lt;<span class="number">0</span>&amp;&amp;(a[k+i]+=mod);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>(),p=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>();</span><br><span class="line">		et++,ne[et]=la[x],la[x]=et,to[et]=y;</span><br><span class="line">		et++,ne[et]=la[y],la[y]=et,to[et]=x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) w[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;(<span class="number">1</span>&lt;&lt;n);i++)&#123;</span><br><span class="line">		ll cnt=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++) fath[j]=j,du[j]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>((i&gt;&gt;j)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">				pos=j,cntt[i]=cntt[i-(<span class="number">1</span>&lt;&lt;j)]+<span class="number">1</span>,sum[i]=sum[i-(<span class="number">1</span>&lt;&lt;j)]+w[j+<span class="number">1</span>];</span><br><span class="line">				<span class="keyword">for</span>(k=la[j+<span class="number">1</span>];k;k=ne[k])&#123;</span><br><span class="line">					<span class="keyword">if</span>((i&gt;&gt;(to[k]<span class="number">-1</span>))&amp;<span class="number">1</span>) fath[<span class="built_in">gf</span>(j+<span class="number">1</span>)]=<span class="built_in">gf</span>(to[k]),du[j+<span class="number">1</span>]++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++) <span class="keyword">if</span>(du[j+<span class="number">1</span>]%<span class="number">2</span>==<span class="number">1</span>||(((i&gt;&gt;j)&amp;<span class="number">1</span>)&amp;&amp;<span class="built_in">gf</span>(pos+<span class="number">1</span>)!=<span class="built_in">gf</span>(j+<span class="number">1</span>))) cnt=<span class="number">0</span>;</span><br><span class="line">		sum[i] %= mod,inv[i] = <span class="built_in">qmi</span>(<span class="built_in">qmi</span>(sum[i],p,mod),mod<span class="number">-2</span>,mod);	</span><br><span class="line">		<span class="keyword">if</span>(!cnt) g[cntt[i]][i] = (g[cntt[i]][i]+<span class="built_in">qmi</span>(sum[i],p,mod))%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n;i++) <span class="built_in">fwt</span>(g[i],<span class="number">1</span>&lt;&lt;n);</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>,<span class="built_in">fwt</span>(f[<span class="number">0</span>],<span class="number">1</span>&lt;&lt;n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++) <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;(<span class="number">1</span>&lt;&lt;n);k++) f[i][k]=(f[i][k]+<span class="number">1ll</span>*g[j][k]*f[i-j][k])%mod;</span><br><span class="line">		ifwt(f[i],<span class="number">1</span>&lt;&lt;n);	</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;(<span class="number">1</span>&lt;&lt;n);j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(cntt[j]==i) f[i][j]=<span class="number">1ll</span>*f[i][j]*inv[j]%mod;</span><br><span class="line">			<span class="keyword">else</span> f[i][j]=<span class="number">0</span>;</span><br><span class="line">		&#125;			</span><br><span class="line">		<span class="keyword">if</span>(i&lt;n) <span class="built_in">fwt</span>(f[i],<span class="number">1</span>&lt;&lt;n);</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;f[n][(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>FWT</tag>
        <tag>快速沃尔什变换</tag>
        <tag>快速莫比乌斯变换</tag>
        <tag>FMT</tag>
        <tag>子集卷积</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>拉格朗日插值 &amp; 线性递推</title>
    <url>/2024/04/03/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC-%E7%BA%BF%E6%80%A7%E9%80%92%E6%8E%A8/</url>
    <content><![CDATA[<h1 id="拉格朗日插值"><a href="#拉格朗日插值" class="headerlink" title="拉格朗日插值"></a>拉格朗日插值</h1><h2 id="动态拉格朗日插值"><a href="#动态拉格朗日插值" class="headerlink" title="动态拉格朗日插值"></a>动态拉格朗日插值</h2><p>插值公式（$n$ 个点 $x_i,y_i$ 确定一个 $n-1$ 次多项式，求出点 $x$ 处的取值）：</p>
<p>$$<br>f(x) &#x3D; \sum_{i&#x3D;1}^n y_i \prod_{j \ne i} \frac{x-x_j}{x_i-x_j}<br>$$</p>
<p>这个插值公式显然是 $O(n^2)$ 的，但是它可以动态向集合中加入点，动态询问当前多项式的点值。</p>
<p>也就是用前后缀积优化一下就可以了，此处给出代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 3005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,opt,x,y,tx[N],ty[N],opts[N],q1[N],q2[N],tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>%p,t = a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">	tot++,tx[tot]=x,ty[tot]=y,opts[tot]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;tot;i++) opts[tot]=opts[tot]*(x-tx[i]+mod)%mod;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;tot;i++) opts[i]=opts[i]*(tx[i]-x+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	ll ans = <span class="number">0</span>;</span><br><span class="line">	q1[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=tot;i++) q1[i]=q1[i<span class="number">-1</span>]*(x-tx[i]+mod)%mod;</span><br><span class="line">	q2[tot+<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=tot;i&gt;=<span class="number">1</span>;i--) q2[i]=q2[i+<span class="number">1</span>]*(x-tx[i]+mod)%mod;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line">		ll res = q1[i<span class="number">-1</span>]*q2[i+<span class="number">1</span>]%mod;</span><br><span class="line">		res = res*<span class="built_in">qmi</span>(opts[i],mod<span class="number">-2</span>,mod)%mod;</span><br><span class="line">		ans = (ans+res*ty[i])%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		cin&gt;&gt;opt;</span><br><span class="line">		<span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">			cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">			<span class="built_in">insert</span>(x,y);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			cin&gt;&gt;x;</span><br><span class="line">			cout&lt;&lt;<span class="built_in">query</span>(x)&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="快速拉格朗日插值"><a href="#快速拉格朗日插值" class="headerlink" title="快速拉格朗日插值"></a>快速拉格朗日插值</h2><p>这个方法只适用于静态的 $n$ 个点，不支持加点，然后询问多个点的点值，并且或者让你求出系数。</p>
<p>我们这里只讲求出系数，因为询问多个点的点值也很简单，把 $x$ 展开之后用多项式多点求值即可，或者求出系数之后多项式多点求值。</p>
<p>如何求出系数？我们回到公式：</p>
<p>$$<br>f(x) &#x3D; \sum_{i&#x3D;1}^n y_i \prod_{j \ne i} \frac{x-x_j}{x_i-x_j}<br>$$</p>
<p>首先求出常数项：</p>
<p>$$<br>f(x) &#x3D; \sum_{i&#x3D;1}^n y_i \prod_{j \ne i} \frac{1}{x_i-x_j}<br>$$</p>
<p>这个怎么做？相当于对于多项式 $A&#x3D;\prod_{i&#x3D;1}^n \frac 1{x-x_i}$ 求出 $x$ 在等于 $x_{1 \sim n}$ 处的点值然后乘上 $x_i-x_i&#x3D;0$。</p>
<p>因为这两个值都是 $0$，考虑运用洛必达法则，也就是 $x$ 在等于 $x_{1 \sim n}$ 处的点值然后乘上 $x_i-x_i&#x3D;0$ 就等于 $x$ 在多项式 $A&#x3D;\prod_{i&#x3D;1}^n \frac 1{x-x_i}$ 求导之后的点值。</p>
<p>这一部分用多项式多点求值即可。</p>
<p>设只用 $x_{l \sim r}$ 算出来 $f_{l,r}$（是一个多项式），就是 $\sum_{i&#x3D;l}^r y_iA’(x_i) \prod_{l \le j \le r,j \ne i} (x-x_j)$，然后考虑分治合并。</p>
<p>首先 $f_{l,l}$ 可以很简单地得到是 $y_iA’(x_i)$，然后我们考虑合并 $f_{l,mid}$ 和 $f_{mid+1,r}$：</p>
<p>$$<br>\begin{aligned}<br>f_{l,r}&amp;&#x3D; \sum_{i&#x3D;l}^r y_iA’(x_i) \prod_{l \le j \le r,j \ne i} (x-x_j) \\<br>&amp;&#x3D; \sum_{i&#x3D;l}^{mid} y_iA’(x_i) \prod_{l \le j \le r,j \ne i} (x-x_j) +\sum_{i&#x3D;mid+1}^{r} y_iA’(x_i) \prod_{l \le j \le r,j \ne i} (x-x_j) \\<br>&amp;&#x3D; \sum_{i&#x3D;l}^{mid} y_iA’(x_i) \prod_{l \le j \le mid,j \ne i} (x-x_j) \prod_{mid+1 \le j \le r}(x-x_j) +\sum_{i&#x3D;mid+1}^{r} y_iA’(x_i) \prod_{mid+1 \le j \le r,j \ne i} (x-x_j) \prod_{l \le j \le mid}(x-x_j)  \\<br>&amp;&#x3D; f_{l,mid}g_{mid+1,r} + f_{mid+1,r}g_{l,mid}  \\<br>\end{aligned}<br>$$</p>
<p>其中 $g_{l,r} &#x3D; \prod_{i&#x3D;l}^r(x-x_i)$，然后用分治下去的 NTT 计算就可以了。</p>
<p>最后的答案就是 $f_{1,n}$，代码实现如下，时间复杂度 $O(n \log^2 n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 500005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> IO&#123;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="type">static</span> <span class="type">char</span> buf[<span class="number">1000000</span>],*p=buf,*q=buf;</span><br><span class="line">		<span class="keyword">return</span> p==q&amp;&amp;(q=(p=buf)+<span class="built_in">fread</span>(buf,<span class="number">1</span>,<span class="number">1000000</span>,stdin),p==q)?EOF:*p++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ll res = <span class="number">0</span>,w = <span class="number">1</span>;</span><br><span class="line">		<span class="type">char</span> c = <span class="built_in">nc</span>();</span><br><span class="line">		<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)w=(c==<span class="string">&#x27;-&#x27;</span>?<span class="number">-1</span>:w),c=<span class="built_in">nc</span>();</span><br><span class="line">		<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)res=res*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=<span class="built_in">nc</span>();</span><br><span class="line">		<span class="keyword">return</span> res*w;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">char</span> obuf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p3=obuf; </span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span>&#123; </span><br><span class="line">		p3-obuf&lt;=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)?(*p3++=c):(<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout),p3=obuf,*p3++=c); </span><br><span class="line">	&#125; </span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(ll x)</span></span>&#123; </span><br><span class="line">		<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">pc</span>(<span class="string">&#x27;-&#x27;</span>),x=-x; </span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">write</span>(x/<span class="number">10</span>); </span><br><span class="line">		<span class="built_in">pc</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> IO;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>,t = a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> poly&#123;</span><br><span class="line">	ll n,m,len,res[N],G,invG,invn,nn,qm[N],qm2[N],temp[N],tempa[N],tempb[N],temp2[N],c[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">			res[i]=((res[i&gt;&gt;<span class="number">1</span>])&gt;&gt;<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span>(i&amp;<span class="number">1</span>) res[i]+=(n&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;<span class="number">18</span>;i++)&#123;</span><br><span class="line">			ll w1=<span class="built_in">qmi</span>(G,(mod<span class="number">-1</span>)/(<span class="number">1</span>&lt;&lt;(i+<span class="number">1</span>)),mod);</span><br><span class="line">			ll w2=<span class="built_in">qmi</span>(invG,(mod<span class="number">-1</span>)/(<span class="number">1</span>&lt;&lt;(i+<span class="number">1</span>)),mod);</span><br><span class="line">			<span class="keyword">for</span>(ll j=<span class="number">0</span>,now=<span class="number">1</span>,now2=<span class="number">1</span>;j&lt;(<span class="number">1</span>&lt;&lt;i);j++,now=now*w1%mod,now2=now2*w2%mod) qm[(<span class="number">1</span>&lt;&lt;i)+j]=now,qm2[(<span class="number">1</span>&lt;&lt;i)+j]=now2;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *f,ll n,ll type)</span></span>&#123;</span><br><span class="line">		<span class="type">static</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> tmp[N];</span><br><span class="line">		ll u = __builtin_ctz((<span class="number">1ll</span>&lt;&lt;<span class="number">18</span>)/n);</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) tmp[i]=f[res[i]&gt;&gt;u];</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll r=(i&lt;&lt;<span class="number">1</span>),j=<span class="number">0</span>;j&lt;n;j+=r)&#123;</span><br><span class="line">				<span class="keyword">for</span>(ll k=<span class="number">0</span>;k&lt;i;k++)&#123;</span><br><span class="line">					ll y = (type==<span class="number">1</span>?qm[i|k]:qm2[i|k])*tmp[j|k|i]%mod;</span><br><span class="line">					tmp[j|k|i] = (tmp[j|k]+mod-y),tmp[j|k]+=y;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) f[i]=tmp[i]%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">times</span><span class="params">(ll *a,ll *b,ll *cp,ll n,ll m,ll tim)</span></span>&#123;</span><br><span class="line">		ll nn = n,mm = m,op = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(op&lt;=n+m) op*=<span class="number">2</span>;</span><br><span class="line">		n=op;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) tempa[i]=(i&gt;=nn?<span class="number">0</span>:a[i]);</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) tempb[i]=(i&gt;=mm?<span class="number">0</span>:b[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(tempa,n,<span class="number">1</span>),<span class="built_in">ntt</span>(tempb,n,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(tim==<span class="number">1</span>) c[i]=tempa[i]*tempb[i]%mod;</span><br><span class="line">			<span class="keyword">else</span> c[i]=tempa[i]*tempb[i]%mod*tempb[i]%mod;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">ntt</span>(c,n,<span class="number">-1</span>);</span><br><span class="line">		ll invn = <span class="built_in">qmi</span>(n,mod<span class="number">-2</span>,mod);</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;nn+mm;i++) cp[i]=c[i]*invn%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(ll x,ll *val,ll *val2)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">			val2[<span class="number">0</span>] = <span class="built_in">qmi</span>(val[<span class="number">0</span>],mod<span class="number">-2</span>,mod);</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		ll len = (x+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">		<span class="built_in">solve</span>(len,val,val2);</span><br><span class="line">		<span class="keyword">for</span>(ll i=len;i&lt;x;i++) val2[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">times</span>(val,val2,temp2,x,x,<span class="number">2</span>);</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) val2[i]=((<span class="number">2</span>*val2[i]-temp2[i])%mod+mod)%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	ll *f[N],*g[N],bin[N&lt;&lt;<span class="number">6</span>],*<span class="built_in">pos</span>(bin),t1[N],t2[N],t3[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get_val_init</span><span class="params">(ll *a,ll l,ll r,ll p)</span></span>&#123;</span><br><span class="line">		g[p]=pos,pos+=(r-l+<span class="number">2</span>),f[p]=pos,pos+=(r-l+<span class="number">2</span>);</span><br><span class="line">		<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">			g[p][<span class="number">0</span>]=<span class="number">1</span>,g[p][<span class="number">1</span>]=(mod-a[l])%mod;</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		ll mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">		<span class="built_in">get_val_init</span>(a,l,mid,<span class="number">2</span>*p),<span class="built_in">get_val_init</span>(a,mid+<span class="number">1</span>,r,<span class="number">2</span>*p+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">times</span>(g[<span class="number">2</span>*p],g[<span class="number">2</span>*p+<span class="number">1</span>],g[p],mid-l+<span class="number">2</span>,r-mid+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get_val_solve</span><span class="params">(ll *a,ll *b,ll *c,ll l,ll r,ll p)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">			c[l]=f[p][<span class="number">0</span>];</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		ll mid = (l+r)/<span class="number">2</span>,len1 = mid-l+<span class="number">2</span>,len2 = r-mid+<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">reverse</span>(g[<span class="number">2</span>*p+<span class="number">1</span>],g[<span class="number">2</span>*p+<span class="number">1</span>]+len2);</span><br><span class="line">		<span class="built_in">times</span>(f[p],g[<span class="number">2</span>*p+<span class="number">1</span>],t3,r-l+<span class="number">1</span>,len2,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;len1;i++) f[<span class="number">2</span>*p][i]=t3[i+len2<span class="number">-1</span>];</span><br><span class="line">		<span class="built_in">get_val_solve</span>(a,b,c,l,mid,<span class="number">2</span>*p);</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">reverse</span>(g[<span class="number">2</span>*p],g[<span class="number">2</span>*p]+len1);</span><br><span class="line">		<span class="built_in">times</span>(f[p],g[<span class="number">2</span>*p],t3,r-l+<span class="number">1</span>,len1,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;len2;i++) f[<span class="number">2</span>*p+<span class="number">1</span>][i]=t3[i+len1<span class="number">-1</span>];</span><br><span class="line">		<span class="built_in">get_val_solve</span>(a,b,c,mid+<span class="number">1</span>,r,<span class="number">2</span>*p+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get_val</span><span class="params">(ll *a,ll *b,ll *c,ll n,ll m)</span></span>&#123;</span><br><span class="line">		<span class="built_in">get_val_init</span>(b,<span class="number">1</span>,m,<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">solve</span>(m+<span class="number">1</span>,g[<span class="number">1</span>],t1);				</span><br><span class="line">		<span class="built_in">reverse</span>(t1,t1+m+<span class="number">1</span>),<span class="built_in">times</span>(a,t1,t2,n+<span class="number">1</span>,m+<span class="number">1</span>,<span class="number">1</span>);		</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=m;i++) f[<span class="number">1</span>][i]=t2[n+i];</span><br><span class="line">		<span class="built_in">get_val_solve</span>(a,b,c,<span class="number">1</span>,m,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;i++) c[i]=(c[i]*b[i]+a[<span class="number">0</span>])%mod;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line">ll n,m,a[N],b[N],i,c[N],d[N],k,*g[N],*f[N],bin[N&lt;&lt;<span class="number">5</span>],*<span class="built_in">pos</span>(bin),temp[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">binary_ntt</span><span class="params">(ll *a,ll l,ll r,ll p)</span></span>&#123;</span><br><span class="line">	g[p]=pos,pos+=(r-l+<span class="number">2</span>),f[p]=pos,pos+=(r-l+<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">		g[p][<span class="number">0</span>]=(mod-a[l])%mod,g[p][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">binary_ntt</span>(a,l,mid,<span class="number">2</span>*p),<span class="built_in">binary_ntt</span>(a,mid+<span class="number">1</span>,r,<span class="number">2</span>*p+<span class="number">1</span>);</span><br><span class="line">	poly::<span class="built_in">times</span>(g[<span class="number">2</span>*p],g[<span class="number">2</span>*p+<span class="number">1</span>],g[p],mid-l+<span class="number">2</span>,r-mid+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">binary_solve</span><span class="params">(ll l,ll r,ll p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">		f[p][<span class="number">0</span>]=d[l];</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">binary_solve</span>(l,mid,<span class="number">2</span>*p),<span class="built_in">binary_solve</span>(mid+<span class="number">1</span>,r,<span class="number">2</span>*p+<span class="number">1</span>);</span><br><span class="line">	poly::<span class="built_in">times</span>(g[<span class="number">2</span>*p+<span class="number">1</span>],f[<span class="number">2</span>*p],temp,r-mid+<span class="number">1</span>,mid-l+<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=r-l+<span class="number">1</span>;i++) f[p][i]=(f[p][i]+temp[i])%mod;</span><br><span class="line">	poly::<span class="built_in">times</span>(g[<span class="number">2</span>*p],f[<span class="number">2</span>*p+<span class="number">1</span>],temp,mid-l+<span class="number">2</span>,r-mid+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=r-l+<span class="number">1</span>;i++) f[p][i]=(f[p][i]+temp[i])%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	poly::G=<span class="number">3</span>,poly::invG=<span class="built_in">qmi</span>(poly::G,mod<span class="number">-2</span>,mod),poly::<span class="built_in">init</span>(<span class="number">1</span>&lt;&lt;<span class="number">18</span>);</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) a[i]=<span class="built_in">read</span>(),b[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">binary_ntt</span>(a,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n;i++) c[i]=g[<span class="number">1</span>][i];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) c[i<span class="number">-1</span>]=c[i]*i%mod;</span><br><span class="line">	c[n]=<span class="number">0</span>;</span><br><span class="line">	poly::<span class="built_in">get_val</span>(c,a,d,n+<span class="number">1</span>,n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) d[i]=<span class="built_in">qmi</span>(d[i],mod<span class="number">-2</span>,mod)*b[i]%mod;</span><br><span class="line">	<span class="built_in">binary_solve</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">write</span>(f[<span class="number">1</span>][i]),<span class="built_in">pc</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="常系数齐次线性递推"><a href="#常系数齐次线性递推" class="headerlink" title="常系数齐次线性递推"></a>常系数齐次线性递推</h1><p>我们要解决的是 $a_i&#x3D;\sum_{j&#x3D;1}^k a_{i-j}b_j$，在 $O(k \log k \log n)$ 的时间复杂度内求出 $a_n$ 的值。</p>
<p>我们以 Fib 数列为例，$f_1&#x3D;1,f_2&#x3D;1,f_3&#x3D;2$，因为 $f_i&#x3D;f_{i-1}+f_{i-2}$，我们把 $f_1$ 和 $f_2$ 看作未知数，那么有：</p>
<p>$$<br>\begin{aligned}<br>f_3 &amp;&#x3D; f_1+f_2 \\<br>f_4 &amp;&#x3D; f_3+f_2&#x3D;f_1+2f_2 \\<br>f_5 &amp;&#x3D; f_3+f_4&#x3D;2f_1+3f_2 \\<br>\end{aligned}<br>$$</p>
<p>如果令 $f_1&#x3D;x^1,f_2&#x3D;x^2$，那么就有：</p>
<p>$$<br>\begin{aligned}<br>f_3 &amp;&#x3D; x^1+x^2 \\<br>f_4 &amp;&#x3D; f_3+f_2&#x3D;x+2x^2 \\<br>f_5 &amp;&#x3D; f_3+f_4&#x3D;2x^1+3x^2 \\<br>\end{aligned}<br>$$</p>
<p>如果我们让项数从 $0$ 开始，那么 $x^2&#x3D;x^0+x^1$，所以 $f_5&#x3D;3x^0+5x^1$，容易发现这就是 $x^5$ 对 $x^2-x^0-x^1$ 取模之后的结果。</p>
<p>并且 $x^2-x^0-x^1&#x3D;0$ 是这个斐波那契数列的特征公式，于是问题转化为了求 $x^n$ 对这个递推式的特征公式取模后的结果，设其为 $A&#x3D;a_0x^0+a_1x^1+\dots+a_{k-1}x^{k-1}$，因为我们知道 $x^{0 \sim k-1}$ 的值，所以直接带入计算即可。</p>
<p>考虑如何求出取模后的值，我们用倍增快速幂的方法即可，也就是先求出 $x^i \bmod T$ 的值，然后平方一下再取模就是 $x^{2i} \bmod T$ 的值，最后按照倍增快速幂合并出 $x^n \bmod T$ 就可以了。（$T$ 是特征多项式）</p>
<p>时间复杂度分析：每次乘法取模次数都是 $O(k)$ 级别的，一共乘+模 $O(\log n)$ 次，所以时间复杂度就是 $O(k \log k \log n)$。</p>
<p>代码实现（<a href="https://www.luogu.com.cn/problem/P4723">P4723 【模板】常系数齐次线性递推</a>）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 2000005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> IO&#123;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="type">static</span> <span class="type">char</span> buf[<span class="number">1000000</span>],*p=buf,*q=buf;</span><br><span class="line">		<span class="keyword">return</span> p==q&amp;&amp;(q=(p=buf)+<span class="built_in">fread</span>(buf,<span class="number">1</span>,<span class="number">1000000</span>,stdin),p==q)?EOF:*p++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ll res = <span class="number">0</span>,w = <span class="number">1</span>;</span><br><span class="line">		<span class="type">char</span> c = <span class="built_in">nc</span>();</span><br><span class="line">		<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)w=(c==<span class="string">&#x27;-&#x27;</span>?<span class="number">-1</span>:w),c=<span class="built_in">nc</span>();</span><br><span class="line">		<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)res=res*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=<span class="built_in">nc</span>();</span><br><span class="line">		<span class="keyword">return</span> res*w;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">char</span> obuf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p3=obuf; </span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pc</span><span class="params">(<span class="type">char</span> c)</span></span>&#123; </span><br><span class="line">		p3-obuf&lt;=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)?(*p3++=c):(<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout),p3=obuf,*p3++=c); </span><br><span class="line">	&#125; </span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(ll x)</span></span>&#123; </span><br><span class="line">		<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">pc</span>(<span class="string">&#x27;-&#x27;</span>),x=-x; </span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">write</span>(x/<span class="number">10</span>); </span><br><span class="line">		<span class="built_in">pc</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> IO;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qmi</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res = <span class="number">1</span>,t = a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*t%p;</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> poly&#123;</span><br><span class="line">	ll n,m,len,res[N],G,invG,invn,nn,qm[N],qm2[N],c[N],aval[N],bval[N],cval[N],dval[N],val[N],val2[N],val3[N],temp[N],tempp[N],tempa[N],tempb[N],temp2[N];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">			res[i]=((res[i&gt;&gt;<span class="number">1</span>])&gt;&gt;<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span>(i&amp;<span class="number">1</span>) res[i]+=(n&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;<span class="number">18</span>;i++)&#123;</span><br><span class="line">			ll w1=<span class="built_in">qmi</span>(G,(mod<span class="number">-1</span>)/(<span class="number">1</span>&lt;&lt;(i+<span class="number">1</span>)),mod);</span><br><span class="line">			ll w2=<span class="built_in">qmi</span>(invG,(mod<span class="number">-1</span>)/(<span class="number">1</span>&lt;&lt;(i+<span class="number">1</span>)),mod);</span><br><span class="line">			<span class="keyword">for</span>(ll j=<span class="number">0</span>,now=<span class="number">1</span>,now2=<span class="number">1</span>;j&lt;(<span class="number">1</span>&lt;&lt;i);j++,now=now*w1%mod,now2=now2*w2%mod) qm[(<span class="number">1</span>&lt;&lt;i)+j]=now,qm2[(<span class="number">1</span>&lt;&lt;i)+j]=now2;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(ll *f,ll n,ll type)</span></span>&#123;</span><br><span class="line">		<span class="type">static</span> <span class="type">unsigned</span> ll tmp[N];</span><br><span class="line">		ll u = __builtin_ctz((<span class="number">1ll</span>&lt;&lt;<span class="number">18</span>)/n);</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) tmp[i]=f[res[i]&gt;&gt;u];</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll r=(i&lt;&lt;<span class="number">1</span>),j=<span class="number">0</span>;j&lt;n;j+=r)&#123;</span><br><span class="line">				<span class="keyword">for</span>(ll k=<span class="number">0</span>;k&lt;i;k++)&#123;</span><br><span class="line">					ll y = (type==<span class="number">1</span>?qm[i|k]:qm2[i|k])*tmp[j|k|i]%mod;</span><br><span class="line">					tmp[j|k|i] = (tmp[j|k]+mod-y),tmp[j|k]+=y;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) f[i]=tmp[i]%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">times</span><span class="params">(ll *a,ll *b,ll *cp,ll n,ll m,ll tim)</span></span>&#123;</span><br><span class="line">		ll nn = n,mm = m,op = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(op&lt;=n+m) op*=<span class="number">2</span>;</span><br><span class="line">		n=op;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) tempa[i]=(i&gt;=nn?<span class="number">0</span>:a[i]);</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) tempb[i]=(i&gt;=mm?<span class="number">0</span>:b[i]);</span><br><span class="line">		<span class="built_in">ntt</span>(tempa,n,<span class="number">1</span>),<span class="built_in">ntt</span>(tempb,n,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(tim==<span class="number">1</span>) c[i]=tempa[i]*tempb[i]%mod;</span><br><span class="line">			<span class="keyword">else</span> c[i]=tempa[i]*tempb[i]%mod*tempb[i]%mod;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">ntt</span>(c,n,<span class="number">-1</span>);</span><br><span class="line">		ll invn = <span class="built_in">qmi</span>(n,mod<span class="number">-2</span>,mod);</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;nn+mm;i++) cp[i]=c[i]*invn%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">			val2[<span class="number">0</span>] = <span class="built_in">qmi</span>(val[<span class="number">0</span>],mod<span class="number">-2</span>,mod);</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		ll len = (x+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">		<span class="built_in">solve</span>(len);</span><br><span class="line">		<span class="keyword">for</span>(ll i=len;i&lt;x;i++) val2[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">times</span>(val,val2,temp2,x,x,<span class="number">2</span>);</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;x;i++) val2[i]=((<span class="number">2</span>*val2[i]-temp2[i])%mod+mod)%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">modd</span><span class="params">(ll *aa,ll *bb,ll n,ll m,ll *f,ll &amp;lenn,ll type)</span></span>&#123;</span><br><span class="line">		lenn=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++) aval[i]=aa[i],cval[i]=aval[i];</span><br><span class="line">		len=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">reverse</span>(aval,aval+n);</span><br><span class="line">		<span class="keyword">if</span>(type==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;m;i++) val[i]=bb[i],bval[i]=val[i];</span><br><span class="line">			<span class="built_in">reverse</span>(val,val+m);</span><br><span class="line">			<span class="built_in">solve</span>(m);</span><br><span class="line">		&#125;</span><br><span class="line">		nn=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(nn&lt;n*<span class="number">2</span>) nn*=<span class="number">2</span>;</span><br><span class="line">		<span class="built_in">times</span>(aval,val2,aval,n,n,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(ll i=n-m;i&gt;=<span class="number">0</span>;i--) val3[len++]=aval[i];</span><br><span class="line">		<span class="built_in">times</span>(bval,val3,dval,m,len,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;m<span class="number">-1</span>;i++) f[lenn++]=(cval[i]-dval[i]+mod)%mod;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">ll n,m,a[N],b[N],i,c[N],k,p1,p2,g[N],g2[N],ans,temp,opt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	poly::G=<span class="number">3</span>,poly::invG=<span class="built_in">qmi</span>(poly::G,mod<span class="number">-2</span>,mod),poly::<span class="built_in">init</span>(<span class="number">1</span>&lt;&lt;<span class="number">18</span>);</span><br><span class="line">	n=<span class="built_in">read</span>(),k=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k;i++) b[i]=<span class="built_in">read</span>(),b[i]=(b[i]%mod+mod)%mod;</span><br><span class="line">	<span class="built_in">reverse</span>(b,b+k);</span><br><span class="line">	c[k]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k;i++) c[i]=(mod-b[i])%mod;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k;i++) a[i]=<span class="built_in">read</span>(),a[i]=(a[i]%mod+mod)%mod;</span><br><span class="line">	g[<span class="number">0</span>]=<span class="number">1</span>,g2[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(n)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">			poly::<span class="built_in">times</span>(g,g2,g,k,k,<span class="number">1</span>);</span><br><span class="line">			poly::<span class="built_in">modd</span>(g,c,<span class="number">2</span>*k<span class="number">-1</span>,k+<span class="number">1</span>,g,temp,opt),opt=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		poly::<span class="built_in">times</span>(g2,g2,g2,k,k,<span class="number">1</span>),poly::<span class="built_in">modd</span>(g2,c,<span class="number">2</span>*k<span class="number">-1</span>,k+<span class="number">1</span>,g2,temp,opt),opt=<span class="number">1</span>;</span><br><span class="line">		n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k;i++) ans=(ans+g[i]*a[i])%mod;</span><br><span class="line">	<span class="built_in">write</span>(ans);</span><br><span class="line">	<span class="built_in">fwrite</span>(obuf,p3-obuf,<span class="number">1</span>,stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>拉格朗日插值</tag>
        <tag>动态拉格朗日插值</tag>
        <tag>快速拉格朗日插值</tag>
        <tag>常系数齐次线性递推</tag>
      </tags>
  </entry>
  <entry>
    <title>回文自动机</title>
    <url>/2024/04/22/%E5%9B%9E%E6%96%87%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="回文自动机（PAM）"><a href="#回文自动机（PAM）" class="headerlink" title="回文自动机（PAM）"></a>回文自动机（PAM）</h1><p>回文自动机是一种高效处理回文串相关操作的数据结构，这一节我们专门描述回文自动机以及其扩展应用。</p>
<blockquote>
<p>定理：一个字符串中的本质不同回文子串只有 $O(n)$ 个。</p>
<p>证明：考虑 Manacher 的过程，每次复制一个区间暴力扩展是 $O(n)$ 的，而复制的区间的回文串都在之前出现过，所以定理得证。</p>
</blockquote>
<h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>首先，明确一下回文自动机和回文树上的定义：</p>
<blockquote>
<p>回文自动机的一个节点 $p$ 代表一个字符串 $S$，从它经过一条转移边 $c$ 到达字符串为 $cSc$ 的节点。</p>
<p>回文树上的一个节点 $p$ 唯一对应回文自动机上的一个节点（双射），$p$ 的父亲 $f_p$ 是 $p$ 所代表字符串的最长回文后缀处在的节点。</p>
<p>任意一个节点都唯一对应一个回文子串，本质相同的回文子串对应相同的节点。</p>
<p>存储的时候，我们只在节点上存储对应回文子串的长度，如果要得知具体的子串，可以记录 endpos 然后递归搜索即可。</p>
</blockquote>
<p>于是，我们发现了一个问题，回文子串具有奇数和偶数长度，这两个长度在回文自动机上一定是不相交的，解决方法便是初始状态建立两个根，奇根和偶根，其中偶根在回文树上的父亲是奇根，奇根所代表的字符串长度为 $-1$，偶根代表的字符串长度为 $0$。</p>
<p>考虑加入一个字符 $ch$，回文自动机和回文树会发生什么变化，首先我们需要记录加入之前，这个串的最长回文后缀，这是简单的，然后考虑新的串的最长回文后缀。</p>
<p>设原来的最长回文后缀代表节点为 $p$，那么我们需要顺着 $p$ 在回文树上一直跳转，直到 $p$ 之前的第一个字符等于 $ch$，这个时候，新的串的最长回文后缀就是 $pam_{p,ch}$，特别的，如果没有这个节点，需要新建。</p>
<p>然后考虑新建的节点在回文树上的父亲是什么，然后我们继续顺着 $p$ 在回文树上跳转，直到找到另外一个 $p$ 之前的第一个字符等于 $ch$，这个时候 $pam_{p,ch}$ 就是新建的节点在回文树上的父亲，这个节点是一定存在的，因为它是跳转之前的那个 $p$ 的一个真前缀。</p>
<p>如果找不到，就令新建的节点在回文树上的父亲为偶根，即长度 $0$ 的节点即可，判断是否相等可以判断为 $s_{i-len_p-1}&#x3D;s_i$，这个时候，奇根也起作用了，因为 $s_{i-(-1)-1}$ 一定等于 $s_i$，所以第一步如果没有匹配上，它就一定会成为奇根的 $pam_{ch}$。</p>
<p>构建过程如下图所示，图片源自 OI-wiki：</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/140mx4qi.png"></p>
<p>时间复杂度：当前节点（最长回文后缀）在回文树上的深度每次最多增加 $1$，所以构建过程为 $O(n)$。</p>
<p>这个回文自动机只支持往后添加字符，考虑如何支持往前添加字符，因为如果 $s$ 是 $t$ 的回文后缀（$t$ 也是回文串），那么 $s$ 也是 $t$ 的回文前缀，所以往前添加字符也可以用这个回文树和回文自动机。</p>
<p>不过需要处理最长回文前缀，注意到在后面添加字符的时候这个东西不会改变；在前面添加字符的时候最长回文后缀也不会改变，除非整个串是回文串，特判一下就可以了。</p>
<p>下面给出支持后端插入的代码，以 <a href="https://www.luogu.com.cn/problem/P3649">P3649 APIO2014 回文串</a> 为例，这道题只需要统计每个回文串出现的次数就可以了，比较简单，套路就是在每个前缀的最长回文后缀那里打一个标记，然后遍历一遍回文树上传标记数量就可以了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 300005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line">ll root_1=<span class="number">1</span>,root0=<span class="number">2</span>,n,i,fath[N],pam[N][<span class="number">26</span>],now=<span class="number">1</span>,tot=<span class="number">2</span>,ne[N],la[N],to[N],et,son[N],ans,len[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(ll x,ll y)</span></span>&#123;et++,ne[et]=la[x],la[x]=et,to[et]=y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(ll x,ll id)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(s[id]!=s[id-len[now]<span class="number">-1</span>]) now=fath[now];</span><br><span class="line">	<span class="keyword">if</span>(!pam[now][x]) pam[now][x]=++tot,len[tot]=len[now]+<span class="number">2</span>;</span><br><span class="line">	ll temp = pam[now][x];</span><br><span class="line">	now=fath[now];</span><br><span class="line">	<span class="keyword">while</span>(now&amp;&amp;s[id]!=s[id-len[now]<span class="number">-1</span>]) now=fath[now];</span><br><span class="line">	<span class="keyword">if</span>(now) fath[temp]=pam[now][x];</span><br><span class="line">	<span class="keyword">else</span> fath[temp]=root0;</span><br><span class="line">	now=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=la[x];i;i=ne[i]) <span class="built_in">dfs</span>(to[i]),son[x]+=son[to[i]];</span><br><span class="line">	ans=<span class="built_in">max</span>(ans,son[x]*len[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	fath[<span class="number">2</span>]=<span class="number">1</span>,len[<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;(s+<span class="number">1</span>),n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">insert</span>(s[i]-<span class="string">&#x27;a&#x27;</span>,i),son[now]++;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=tot;i++) <span class="built_in">merge</span>(fath[i],i);</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="其他性质"><a href="#其他性质" class="headerlink" title="其他性质"></a>其他性质</h2><p>我们从处理一个串的回文划分数量开始说起。</p>
<p>回文划分，即划分成若干个回文子串的数量，例如 $S&#x3D;\texttt{abba}$，那么它有 $3$ 种回文划分方式。</p>
<p>暴力统计的话是 $O(n^2)$ 的，我们这里主要讨论的是利用回文后缀的性质的 $O(n \log n)$ 做法。</p>
<p>暴力做法公式：$f_i &#x3D; \sum_{j&#x3D;0}^{i-1} f_j p_{j+1,i}$，其中 $p_{l,r}&#x3D;1&#x2F;0$ 表示 $S[l,r]$ 是否为回文串。</p>
<blockquote>
<p>定理：一个回文串的所有回文后缀可以按照长度划分成 $O(\log n)$ 段。</p>
<p>证明：因为一个回文串的回文后缀一定是这个回文串的 border，问题就变成了一个回文串的 border 可以按照长度划分为 $O(\log n)$ 段，然后用定理“任意字符串的 border 可以按照长度划分成 $O(\log n)$ 段”即可。</p>
</blockquote>
<p>于是我们考虑知道了 $f_{1 \sim i-1}$ 的值，添加一个字符之后计算 $f_i$ 的值。</p>
<p>首先我们需要在回文自动机上多维护两个值 $diff_x$ 和 $slink_x$，第一个表示 $len_x-len_{fa_x}$，第二个表示 $x$ 的祖先中离 $x$ 最近的节点满足 $diff_x \ne diff_u$ 的 $u$，此时 $slink_x&#x3D;u$，根据上面的定理从 $x$ 一直跳 $slink_x$ 可以跳不超过 $\log$ 步到达根节点，这里规定根节点为偶根，奇根只会带来不必要的讨论，故舍弃它。</p>
<p>此外还有一个转移数组 $g_x$ 表示所有 $u \in x \sim slink_x$（不包含 $slink_x$）的 $f_{endpos-len_u}$ 的和，其中 $endpos$ 是 $x$（也是所有 $u$）在原串中出现的最晚的位置。（$x$ 是当前等差数列最长的字符串 $g$ 才有值，否则 $g$ 的值有误）</p>
<p>用图片来表达就是下面这个样子（图片源于 OI-wiki）：</p>
<p> <img src="https://cdn.luogu.com.cn/upload/image_hosting/2p3bj62m.png"></p>
<p>其中 $g_x$ 为所有橙色位置的 $f$ 的和，考虑添加之后如何转移，我们发现添加一个字符之前 $fa_x$ 是其所在等差数列中最长的字符串，否则 $x$ 一定不是所在等差数列中最长的字符串（可以往左扩展 $diff_x$ 步），所以 $g_{fa_x}$ 是正确的，存储了蓝色位置的 $f$ 值，我们发现 $g_x$ 相较于 $g_{fa_x}$ 多了一个 $f_{x-len_{slink_x}-diff_x}$，加上即可。</p>
<p>每次新增一个字符都暴力跳当前最长后缀节点的 $slink$，更新 $g$，然后每次都累加到当前 $f_i$ 中即可，时间复杂度为严格 $O(n \log n)$。</p>
<p>补充说明：建立回文自动机的时候也可以像这样做到单次时间复杂度不超过 $\log$，总和不超过 $O(n)$ 的做法，但是一般不常用，作为技巧积累下来。依据这个性质，还可以完成强制在线的询问区间本质不同回文子串数量，这里就不展开讲了。</p>
<p>例题：<a href="https://codeforces.com/problemset/problem/932/G">Codeforces 932G Palindrome Partition</a></p>
<p>求 $s_0s_{n-1}s_1s_{n-2}\dots $ 的偶回文划分数，基本上是模板题，只在 $f_i,i \bmod 2&#x3D;0$ 的地方存储值即可。</p>
<p>下面给出一份参考代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> s[N],t[N];</span><br><span class="line">ll root_1=<span class="number">1</span>,root0=<span class="number">2</span>,n,i,j,fath[N],pam[N][<span class="number">26</span>],now=<span class="number">1</span>,tot=<span class="number">2</span>,len[N],dp[N],slink[N],g[N],diff[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(ll x,ll id)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(s[id]!=s[id-len[now]<span class="number">-1</span>]) now=fath[now];</span><br><span class="line">	<span class="keyword">if</span>(!pam[now][x]) pam[now][x]=++tot,len[tot]=len[now]+<span class="number">2</span>;</span><br><span class="line">	ll temp = pam[now][x];</span><br><span class="line">	now=fath[now];</span><br><span class="line">	<span class="keyword">while</span>(now&amp;&amp;s[id]!=s[id-len[now]<span class="number">-1</span>]) now=fath[now];</span><br><span class="line">	<span class="keyword">if</span>(now) fath[temp]=pam[now][x];</span><br><span class="line">	<span class="keyword">else</span> fath[temp]=root0;</span><br><span class="line">	now=temp,diff[now]=len[now]-len[fath[now]];</span><br><span class="line">	<span class="keyword">if</span>(diff[now]==diff[fath[now]]) slink[now]=slink[fath[now]];</span><br><span class="line">	<span class="keyword">else</span> slink[now]=fath[now];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	fath[<span class="number">2</span>]=<span class="number">1</span>,len[<span class="number">1</span>]=<span class="number">-1</span>,diff[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin&gt;&gt;(s+<span class="number">1</span>),n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i&amp;<span class="number">1</span>) t[i]=s[(i+<span class="number">1</span>)/<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">else</span> t[i]=s[n-i/<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) s[i]=t[i];</span><br><span class="line">	<span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">		cout&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">insert</span>(s[i]-<span class="string">&#x27;a&#x27;</span>,i);</span><br><span class="line">		<span class="keyword">for</span>(j=now;j&gt;<span class="number">1</span>;j=slink[j])&#123;</span><br><span class="line">			g[j]=dp[i-len[slink[j]]-diff[j]];</span><br><span class="line">			<span class="keyword">if</span>(diff[j]==diff[fath[j]]) g[j]=(g[j]+g[fath[j]])%mod;</span><br><span class="line">			<span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>) dp[i]=(dp[i]+g[j])%mod;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;dp[n]&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>OI</tag>
        <tag>回文自动机</tag>
        <tag>回文树</tag>
      </tags>
  </entry>
  <entry>
    <title>多项式计数</title>
    <url>/2024/04/22/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E8%AE%A1%E6%95%B0/</url>
    <content><![CDATA[<h1 id="斯特林数快速计算"><a href="#斯特林数快速计算" class="headerlink" title="斯特林数快速计算"></a>斯特林数快速计算</h1><h2 id="第二类斯特林数"><a href="#第二类斯特林数" class="headerlink" title="第二类斯特林数"></a>第二类斯特林数</h2><p>设 $\begin{Bmatrix} n \\ m\end{Bmatrix}$ 表示 $n$ 个数划分成 $m$ 个集合的方案数量，那么简单的，使用 $O(n^2)$ 可得递推式：</p>
<p>$$<br>\begin{Bmatrix} n \\ m\end{Bmatrix} &#x3D; \begin{Bmatrix} n-1 \\ m-1\end{Bmatrix}+m\begin{Bmatrix} n-1 \\ m\end{Bmatrix}<br>$$</p>
<p>边界情况是 $\begin{Bmatrix} n \\ 0\end{Bmatrix}&#x3D;[n&#x3D;0]$。</p>
<h3 id="第二类斯特林数·行"><a href="#第二类斯特林数·行" class="headerlink" title="第二类斯特林数·行"></a>第二类斯特林数·行</h3><p>考虑在 $O(n \log n)$ 内得到所有 $\begin{Bmatrix} n \\ i\end{Bmatrix}(1 \le i \le n)$ 的值，我们需要知道第二类斯特林数二项式反演（容斥）的公式：</p>
<p>$$<br>\begin{Bmatrix} n \\ m\end{Bmatrix} &#x3D; \sum_{i&#x3D;0}^m \dfrac{(-1)^{m-i}i^n}{i!(m-i)!}<br>$$</p>
<p>即 $G_i$ 表示 $i$ 个盒子可以为空的方案，简单的，为 $i^n$，然后 $F_i$ 表示 $i$ 个盒子不可以为空的方案，那么有：</p>
<p>$$<br>\begin{aligned}<br>F_i &amp;&#x3D; \sum_{j&#x3D;0}^i (-1)^{i-j} C_i^j G_j \\<br>&amp;&#x3D; \sum_{j&#x3D;0}^i \dfrac{(-1)^{i-j}i!j^n}{j!(i-j)!}<br>\end{aligned}<br>$$</p>
<p>答案就是 $\frac{F_m}{m!}$（盒子之间有序），所以分子的阶乘就没有了。</p>
<p>于是我们可以用 NTT 快速计算。</p>
<p><a href="https://www.luogu.com.cn/record/150548293">代码 here</a>。</p>
<h3 id="第二类斯特林数·列"><a href="#第二类斯特林数·列" class="headerlink" title="第二类斯特林数·列"></a>第二类斯特林数·列</h3><p>现在我们需要快速求出 $\begin{Bmatrix} i \\ m\end{Bmatrix}(0 \le i \le n)$。</p>
<p>首先不考虑盒子的顺序，最后除以 $m!$ 即可。考虑只有一个盒子的上面式子的指数型生成函数 EGF 为 $F(x)&#x3D;\sum_{i&#x3D;1}^{n} \frac{x^i}{i!}$，那么 $m$ 个盒子的指数型生成函数就是 $F^m(x)$，第 $n$ 项就是 $[x^n]F^m(x)$，最后算出答案之后需要根据指数型生成函数的定义乘上 $n!$ 即可。</p>
<p>上面的 $F^m(x)$ 不能使用 $O(n \log^2 n)$ 暴力快速幂计算，因为次数总和超过了 $n$，所以必须使用多项式 ln&#x2F;exp 的方式计算。</p>
<p>于是时间复杂度为 $O(n \log n)$。</p>
<p><a href="https://www.luogu.com.cn/record/156084982">代码 here</a>。</p>
<h2 id="第一类斯特林数"><a href="#第一类斯特林数" class="headerlink" title="第一类斯特林数"></a>第一类斯特林数</h2><p>设 $\begin{bmatrix} n \\ m\end{bmatrix}$ 表示 $n$ 个数划分成 $m$ 个圆排列的方案数量，那么简单的，使用 $O(n^2)$ 可得递推式：</p>
<p>$$<br>\begin{bmatrix} n \\ m\end{bmatrix} &#x3D; \begin{bmatrix} n-1 \\ m-1\end{bmatrix}+(n-1)\begin{bmatrix} n-1 \\ m\end{bmatrix}<br>$$</p>
<p>边界情况是 $\begin{bmatrix} n \\ 0\end{bmatrix}&#x3D;[n&#x3D;0]$。</p>
<h3 id="第一类斯特林数·行"><a href="#第一类斯特林数·行" class="headerlink" title="第一类斯特林数·行"></a>第一类斯特林数·行</h3><p>首先设一行的生成函数为 $F_i(x)$，那么由普通的转移方程得到 $F_n(x)&#x3D;(n-1)F_{n-1}(x)+xF_{n-1}(x)$，所以 $F_n(x)&#x3D;\prod_{i&#x3D;0}^{n-1}(x+i)&#x3D;x^{\overline{n}}$，这被称作 $x$ 的上升幂，同时还有 $x$ 的下降幂，因为两者比较相似，此处不做展开。</p>
<p>考虑如何计算 $x^{\overline{n}}$ 的各项系数，我们可以倍增先计算 $x^{\overline{n}}$ 再计算 $x^{\overline{2n}}$：</p>
<p>$$<br>x^{\overline{2n}}&#x3D;x^{\overline{n}}(x+n)^{\overline{n}}<br>$$</p>
<p>于是问题变成了得知一个多项式 $f(x)$，我们现在想要知道 $f(x+c)$ 的表达式：</p>
<p>$$<br>\begin{aligned}<br>f(x+c)&amp;&#x3D;\sum_i f_i(x+c)^i \\<br>&amp;&#x3D;\sum_j x^j \sum_i f_i C_i^j c^{i-j} \\<br>&amp;&#x3D; \sum_j x^j \frac 1 {j!}\sum_i f_i \frac{i!}{(i-j)!} c^{i-j}<br>\end{aligned}<br>$$</p>
<p>于是这一部分就可以倍增+多项式乘法解决，整体来说也可以通过类似于这种方式得到解法，时间复杂度 $T(n) &#x3D; T(\frac n2)+O(n \log n)&#x3D;O(n \log n)$。</p>
<p><strong>注意：倍增的时候每次 $+1$ 或者 $\times 2$ 直接计算会少 $2$ 倍常数。</strong></p>
<p><a href="https://www.luogu.com.cn/record/156124350">代码 here</a>。</p>
<h3 id="第一类斯特林数·列"><a href="#第一类斯特林数·列" class="headerlink" title="第一类斯特林数·列"></a>第一类斯特林数·列</h3><p>现在我们需要快速求出 $\begin{bmatrix} i \\ m\end{bmatrix}(0 \le i \le n)$。</p>
<p>首先不考虑盒子的顺序，最后除以 $m!$ 即可。考虑只有一个盒子的上面式子的指数型生成函数 EGF 为 $F(x)&#x3D;\sum_{i&#x3D;1}^{n} (i-1)!\frac{x^i}{i!}&#x3D;\sum_{i&#x3D;1}^{n} \frac{x^i}{i}$，那么 $m$ 个盒子的指数型生成函数就是 $F^m(x)$，第 $n$ 项就是 $[x^n]F^m(x)$，最后算出答案之后需要根据指数型生成函数的定义乘上 $n!$ 即可。</p>
<p>上面的 $F^m(x)$ 也不能使用 $O(n \log^2 n)$ 暴力快速幂计算，因为次数总和超过了 $n$，所以必须使用多项式 ln&#x2F;exp 的方式计算。</p>
<p>于是时间复杂度为 $O(n \log n)$。</p>
<p><a href="https://www.luogu.com.cn/record/156085302">代码 here</a>。</p>
<h1 id="集合划分计数"><a href="#集合划分计数" class="headerlink" title="集合划分计数"></a>集合划分计数</h1><p>设 $f_i$ 表示 $i$ 个元素划分集合的方案数，转移的时候枚举第一个元素所在集合大小即可：</p>
<p>$$<br>f_i &#x3D; \sum_{j&#x3D;1}^i C_{i-1}^{j-1} f_{i-j}<br>$$</p>
<p>于是把 $C$ 展开就可以简单地使用分治 NTT 计算了。</p>
<p><a href="https://www.luogu.com.cn/record/156181926">代码 here</a>。</p>
<h1 id="连通图计数"><a href="#连通图计数" class="headerlink" title="连通图计数"></a>连通图计数</h1><p>给定 $n$ 计算大小为 $n$ 的无向连通图的数量。</p>
<p>设 $f_i$ 表示大小为 $i$ 的无向连通图的数量，有容斥：</p>
<p>$$<br>\begin{aligned}<br>f_i &amp;&#x3D; 2^{\frac{i(i-1)}{2}}-\sum_{j&#x3D;1}^{i-1} f_j C_{i-1}^{j-1}2^{\frac{(i-j)(i-j-1)}{2}} \\<br> &amp;&#x3D; 2^{\frac{i(i-1)}{2}}-(i-1)!\sum_{j&#x3D;1}^{i-1} \frac{f_j}{(j-1)!} \frac{2^{\frac{(i-j)(i-j-1)}{2}}}{(i-j)!} \\<br>\end{aligned}<br>$$</p>
<p>那么最后的东西也可以使用分治 NTT 快速计算，当然也可以用多项式 ln 做到单 $\log$，代码是分治双 $\log$ 的。</p>
<p><a href="https://www.luogu.com.cn/record/156192905">代码 here</a>。</p>
<p>多项式 ln 做法：根据多项式 exp 的定义就可以推断，注意，我们先要对总的 $g$（$g_i$ 表示 $i$ 个点的任意无向图）进行求指数生成函数，然后 $f$ 的指数生成函数就是 $g$ 的指数生成函数的 ln。也就是最开始和结尾需要分别除以或者乘上阶乘。</p>
<p><a href="https://www.luogu.com.cn/record/156229273">多项式 ln 代码 here</a>。</p>
<p>多项式求逆：</p>
<p>$$<br>\begin{aligned}<br>f_i+(i-1)!\sum_{j&#x3D;1}^{i-1} \frac{f_j}{(j-1)!} \frac{2^{\frac{(i-j)(i-j-1)}{2}}}{(i-j)!} &amp;&#x3D; 2^{\frac{i(i-1)}{2}} \\<br>\sum_{j&#x3D;1}^{i} \frac{f_j}{(j-1)!} \frac{2^{\frac{(i-j)(i-j-1)}{2}}}{(i-j)!} &amp;&#x3D; \frac{2^{\frac{i(i-1)}{2}}}{(i-1)!} \\<br>\end{aligned}<br>$$</p>
<p>于是设 $F(x)&#x3D;\sum_{i}\frac{f_i}{(i-1)!}x^i,G(x)&#x3D;\sum_i \frac{2^{\frac{i(i-1)}{2}}}{i!}x^i,H(x)&#x3D;\sum_i \frac{2^{\frac{i(i-1)}{2}}}{(i-1)!}x^i$，$F$ 的下标从 $1$ 开始；$G$ 的下标从 $0$ 开始，$H$ 的下标从 $1$ 开始。</p>
<p>所以 $F&#x3D;HG^{-1}$，用一次多项式求逆+多项式乘法即可。</p>
<p><a href="https://www.luogu.com.cn/record/156232053">多项式求逆代码 here</a>。</p>
<h1 id="边双连通分量计数"><a href="#边双连通分量计数" class="headerlink" title="边双连通分量计数"></a>边双连通分量计数</h1><p>给定 $n,m$ 求出边双连通分量小于等于 $m+1$ 的图的个数。</p>
<p>一个比较简单的做法就是容斥+prufer 序的性质 $\prod_{i&#x3D;1}^k a_i (\sum_{i&#x3D;1}^k a_i)^{k-2}$ 即可。</p>
<p>于是我们可以设 $g_{i,j}$ 表示 $i$ 个点有 $j$ 个边双连通分量的答案，最后的答案就是 $\sum_{k&#x3D;1}^{m+1} g_{n,k}$。</p>
<p>首先考虑算出来 $g_{i,j}(j \ge 2)$，然后用 $g_{i,1}&#x3D;f_i-\sum_{j&#x3D;2}^i g_{i,j}$ 求出 $g_{i,1}$。（$f_i$ 表示 $i$ 个节点的连通图数量）</p>
<p>老套路枚举和 $i$ 在同一个连通块的点数，然后用组合数计算剩下的内容就可以了，具体而言：</p>
<p>$$<br>g_{i,j}(j \ge 2)&#x3D; \sum_{k&#x3D;1}^{i-1} g_{k,1}C_{i-1}^{k-1} \times opt<br>$$</p>
<p>$opt$ 是上文中我们提到的 $\prod_{i&#x3D;1}^k a_i (\sum_{i&#x3D;1}^k a_i)^{k-2}$，因为 $a$ 不好记录，所以还要再设 $h_{i,j}$ 为所有可能的情况中 $\prod_{i&#x3D;1}^k a_i$ 的乘积的和，根据乘法分配律和结合律，得到：</p>
<p>$$<br>h_{i,j}(j \ge 2)&#x3D; \sum_{k&#x3D;1}^{i-1} h_{i-k,j-1}g_{k,1}C_{i-1}^{k-1} k<br>$$</p>
<p>最后根据 $h$ 还原出来 $g$（$g_{i,j}&#x3D;h_{i,j}i^{j-2}$），最后容斥出来 $g_{i,1}$ 即可。</p>
<p>时间复杂度为 $O(n^3)$。还有更加优秀的做法，此处不展开。</p>
<p><a href="https://www.luogu.com.cn/record/156198388">代码 here</a>。</p>
<h1 id="有标号-DAG-计数"><a href="#有标号-DAG-计数" class="headerlink" title="有标号 DAG 计数"></a>有标号 DAG 计数</h1><p>给定 $n$ 个点，求出 $n$ 个点有标号的弱连通 DAG 数量。</p>
<p>首先我们需要求出 $n$ 个点的 DAG 数量，然后按照连通图计数的方法求出弱连通 DAG 数量即可。</p>
<p>首先我们枚举入度为 $0$ 的节点，结合上有向无环图的容斥公式，有：</p>
<p>$$<br>f_i &#x3D; \sum_{j&#x3D;1}^i (-1)^{j+1} C_i^j f_{i-j}2^{j(j-i)}<br>$$</p>
<p>因为 $j(j-i)&#x3D;C_i^2-C_j^2-C_{i-j}^2$，所以有：</p>
<p>$$<br>f_i &#x3D; 2^{C_i^2}i!\sum_{j&#x3D;1}^i  \frac {(-1)^{j+1}}{j!2^{C_j^2}}\frac{f_{i-j}}{(i-j)!2^{C_{i-j}^2}}<br>$$</p>
<p>于是我们可以分治 NTT 解决，我们发现，这个分治 NTT 是完全 $f_i&#x3D;\sum_{j&#x3D;1}^i g_jf_{i-j}$（已知 $g$ 求 $f$）的形式，因此可以用多项式求逆 $F^{-1}&#x3D;1-G$ 解决。</p>
<p>最后再次分治 NTT 或者多项式 ln 即可。</p>
<p>代码使用的是普通的分治 NTT。</p>
<p><a href="https://www.luogu.com.cn/record/156218811">代码 here</a>。</p>
<p>Update：<a href="https://www.luogu.com.cn/record/156224585">使用多项式 ln</a>。</p>
<h1 id="有标号二分图计数"><a href="#有标号二分图计数" class="headerlink" title="有标号二分图计数"></a>有标号二分图计数</h1><p>首先我们设 $f(i)$ 表示 $i$ 个节点二分图连通的方案数，$F(x)$ 为其 EGF。容易发现 $f(0)&#x3D;0$。</p>
<p>然后设 $g(i)$ 表示 $i$ 个节点二分图不一定连通的方案数，$G(x)$ 为其 EGF。容易发现 $G&#x3D;e^F$。</p>
<p>最后设 $h(i)$ 表示 $i$ 个节点给二分图染色之后的染色+图的方案数量，容易发现 $h_i&#x3D;\sum_{j&#x3D;0}^i C_i^j 2^{j(i-j)}$，这个可以用 NTT 快速得到。</p>
<p>推导：</p>
<p>$$<br>\begin{aligned}<br>h_i &amp;&#x3D; i!2^{\frac{i(i-1)}{2}} \sum_{j&#x3D;0}^i \frac{1}{j!2^{\frac{j(j-1)}2}} \frac{1}{(i-j)!2^{\frac{(i-j)(i-j-1)}2}}<br>\end{aligned}<br>$$</p>
<p>又因为 $F$ 的每个连通块都会在 $H$ 中计算两次（最小编号的点可以染色 $0&#x2F;1$，剩下的点都确定了），所以设 $F’(x)&#x3D;2F(x)$，那么 $H(x)&#x3D;e^{F’(x)}&#x3D;e^{2F(x)}&#x3D;(e^{F(x)})^2&#x3D;G^2(x)$。</p>
<p>于是把 $H$ 算出来，然后用多项式开根求 $G$ 即可（最后要乘上阶乘）。</p>
<p><a href="https://www.luogu.com.cn/record/156246589">代码 here</a>。</p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>多项式</tag>
        <tag>斯特林数</tag>
        <tag>计数</tag>
        <tag>exp</tag>
        <tag>ln</tag>
        <tag>指数型生成函数</tag>
        <tag>普通生成函数</tag>
      </tags>
  </entry>
  <entry>
    <title>THUSC2024游记</title>
    <url>/2024/05/14/THUSC-2024-%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Day-0"><a href="#Day-0" class="headerlink" title="Day-0"></a>Day-0</h1><p>前一天晚上翻来覆去睡不着，不知道为什么。早上 5 点左右就从寝室出发和教练做出租车去重庆江北机场 T3 航站楼，结果发现很多同学早就到了。</p>
<p>这次教练没有让我们托运行李，所以一切都还算顺利（上次去深圳等行李等了一个多小时。。。）</p>
<p>大概 11:00 左右到了杭州，然后又坐大巴车去余姚。余姚北站的麦当劳不知道为什么坐地起价，一瓶矿泉水都要 9 元，一杯咖啡也是 9 元，我就点了一个汉堡+咖啡就是 30 元呵呵。</p>
<p>最后打了一个车去酒店，酒店离余姚北站和余姚中学都不太远，其他同学都两两配了对住了酒店，结果就我一个人单着了，这下好了，多久睡觉都没问题了。（没想到后面老师用我的房间来讲课</p>
<p>然后一个下午就在酒店里【数据删除】，晚上去吃了余姚特色地锅鸡，我们要的是特辣，结果真的没有重庆微辣辣，所以浙江特辣&lt;重庆微辣（</p>
<p>有同学锐评道重庆微辣有回辣，但是浙江特辣就是加多了辣椒，一点都不辣。好吧，其实这个辣度还能够接受。</p>
<p>晚上会酒店由队爷 hyx 讲了一题多解，结果听不懂。。。</p>
<h1 id="Day-1"><a href="#Day-1" class="headerlink" title="Day-1"></a>Day-1</h1><p>早上起床，然后打车去试机。</p>
<p>B-L 字母的排队还比较松弛，这次清华的礼物比去年 THUSC 少了好多，上次好像还发了一个卡套。</p>
<p>看到一个人书包上挂了很多徽章，后来看了 dengduck 的博客发现好像是他。</p>
<p>试机过程比较顺利，只是最后一道题的提交答案有点抽象，搜一下是 UOJ 的题目，还是 ZJOI 的，怪不得。</p>
<p>锐评一下午饭，浙江特辣&lt;重庆微辣，而且还冷了，不好吃</p>
<p>中午回酒店【数据删除】，下午考试，这个考试十分抽象，T2&lt;T1&#x3D;T3&lt;T4</p>
<p>T2 基本上都过了，然后 T1 有一点代码力的应该都能过，然后 T3 学了树形 dp 的应该也能过（反正我没过），然后 T4，不做评价，我电脑一打开虚拟机就慢成 shit 了，所以基本上没碰，最后拿到了 100+100+61+(4+2+1+0+0+0+0+0+0+0)，后面听完评讲发现 T4.10&lt;T4.4&lt;T4.5&lt;T4.1&lt;T4.6&lt;T4.2&lt;T4.7&lt;T4.3&lt;T4.8&lt;T4.9，多少多少了。</p>
<p>后面发现一堆 $[300,400]$ 的，我太菜了。。。</p>
<p>晚饭吃的是湘菜，还不错，有重庆的辣味了，但是没有重庆的麻，差一点灵魂。</p>
<p>晚上老师和几个同学分享了第二天做工程题&#x2F;学习题的解法，其实这一年还算舒服，去年工程题发一堆文件下来，你都不知道看什么。</p>
<h1 id="Day-2"><a href="#Day-2" class="headerlink" title="Day-2"></a>Day-2</h1><p>早上打比赛，发现是学习型题目，然后只有两个简短的 pdf，那个 wordle 基本上也是都玩过，所以 T1+T2+T3 就能够在 1.5 小时内解决。</p>
<p>然后是 T4，T4 得看 pdf 中对于信息量的定义，直接照着它说的模拟，并且每次把不可能成为答案的串删掉就可以通过，目前为止是两个小时多一点。</p>
<p>最后是 T5，要求完成上面的一个综合——解决 wordle，于是直接上 T4 的做法，每次选信息量最大的单词，然后如果可选单词只有 1 个直接输出，只有两个 rand 一下输出就好，然后我的做法拿到了 48.33+44.33&#x3D;92.66。</p>
<p>本来还想卡一下，但是怎么卡分数都没有变，最后的几分钟基本上在调 log 和 log2。。。</p>
<p>插曲：我的电脑虚拟机跑这个程序慢死了，并且他一组就要跑 5s，不知道 THU 是怎么 600 组一共只跑了 10s 的</p>
<p>最后又是一堆 AK 的在我前面，破防了</p>
<p>今天中午的饭菜还不错，就是虾子不太好吃，下午听讲课和讲题，讲课我基本上在睡觉，讲题浅浅听了一下，然后又睡觉了。</p>
<p>发奖拖延到了 17:00，我们各自领了奖就走了，（自己带电脑参加的不给发奖）。</p>
<p>晚上【数据删除】，好吧其实是去余姚北站坐车到杭州南站去，结果有同学坐上了去杭州北站的车然后被拐跑了hh（当然最后老师把他找回来了）</p>
<p>回到酒店已经很晚了，吹了下龙门阵就睡了。</p>
<h1 id="Day-3"><a href="#Day-3" class="headerlink" title="Day-3"></a>Day-3</h1><p>上午去雷峰塔玩，其实没什么好玩的。</p>
<p>下午做了道题然后【数据删除】。</p>
<p>晚上打比赛，打的是依托 shit，这次题解终于写的很好了。</p>
<p>下接 APIO 2024 游记。</p>
<p><a href="/text/t3.zip">Day1+Day2 题面+样例数据</a></p>
<script src="https://giscus.app/client.js"
        data-repo="acoipp/blog_pl"
        data-repo-id="R_kgDOLPCpEQ"
        data-category="Announcements"
        data-category-id="DIC_kwDOLPCpEc4CdAa7"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="light"
        data-lang="zh-CN"
        crossorigin="anonymous"
        async>
</script>
]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>THUSC</tag>
        <tag>清华大学</tag>
        <tag>夏令营</tag>
      </tags>
  </entry>
</search>
